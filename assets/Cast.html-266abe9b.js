import{_ as e,V as o,W as p,X as n,Y as s,Z as t,$ as c,F as i}from"./framework-8edddef6.js";const u={},l=n("h1",{id:"spf13-cast",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spf13-cast","aria-hidden":"true"},"#"),s(" spf13/cast")],-1),r={href:"https://github.com/spf13/cast",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/spf13/cast#readme",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>cast是一个简单的类型转换库，用于将一个类型到另一个类型的快速转换，可以省去很多麻烦的操作。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get https://github.com/spf13/cast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>字符串</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;mayonegg&quot;</span><span class="token punctuation">)</span>         <span class="token comment">// &quot;mayonegg&quot;</span>
cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                  <span class="token comment">// &quot;8&quot;</span>
cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token number">8.31</span><span class="token punctuation">)</span>               <span class="token comment">// &quot;8.31&quot;</span>
cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;one time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;one time&quot;</span>
cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>                <span class="token comment">// &quot;&quot;</span>

<span class="token keyword">var</span> foo <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;one more time&quot;</span>
cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>                <span class="token comment">// &quot;one more time&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                  <span class="token comment">// 8</span>
cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token number">8.31</span><span class="token punctuation">)</span>               <span class="token comment">// 8</span>
cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span>                <span class="token comment">// 8</span>
cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>               <span class="token comment">// 1</span>
cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>              <span class="token comment">// 0</span>

<span class="token keyword">var</span> eight <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">8</span>
cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span>eight<span class="token punctuation">)</span>              <span class="token comment">// 8</span>
cast<span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>                <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function m(v,h){const a=i("ExternalLinkIcon");return o(),p("div",null,[l,n("p",null,[s("仓库："),n("a",r,[s("spf13/cast: safe and easy casting from one type to another in Go (github.com)"),t(a)])]),n("p",null,[s("文档："),n("a",d,[s("spf13/cast: safe and easy casting from one type to another in Go (github.com)"),t(a)])]),k])}const b=e(u,[["render",m],["__file","Cast.html.vue"]]);export{b as default};
