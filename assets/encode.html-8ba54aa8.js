import{_ as c,V as l,W as i,X as s,Y as n,Z as t,a0 as u,$ as a,F as p}from"./framework-8edddef6.js";const r={},d=a('<h1 id="encode" tabindex="-1"><a class="header-anchor" href="#encode" aria-hidden="true">#</a> encode</h1><p>在当前互联网时代中，最常用的独立于语言的数据格式有<code>xml</code>， <code>Yaml</code>，<code>json</code>，<code>protobuf</code>，Go同样的也支持这些数据格式的相关的操作，以下为对比表格。</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">XML</th><th style="text-align:center;">YAML</th><th style="text-align:center;">JSON</th><th style="text-align:center;">Protocol Buffers</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>数据结构</strong></td><td style="text-align:center;">复杂</td><td style="text-align:center;">较简单</td><td style="text-align:center;">简单</td><td style="text-align:center;">较复杂</td></tr><tr><td style="text-align:center;"><strong>保存方式</strong></td><td style="text-align:center;">文本</td><td style="text-align:center;">文本</td><td style="text-align:center;">文本</td><td style="text-align:center;">二进制</td></tr><tr><td style="text-align:center;"><strong>保存大小</strong></td><td style="text-align:center;">大</td><td style="text-align:center;">中</td><td style="text-align:center;">中</td><td style="text-align:center;">小</td></tr><tr><td style="text-align:center;"><strong>解析效率</strong></td><td style="text-align:center;">慢</td><td style="text-align:center;">中</td><td style="text-align:center;">中</td><td style="text-align:center;">快</td></tr><tr><td style="text-align:center;"><strong>语言支持</strong></td><td style="text-align:center;">非常多</td><td style="text-align:center;">多</td><td style="text-align:center;">很多</td><td style="text-align:center;">较多</td></tr><tr><td style="text-align:center;"><strong>开发难度</strong></td><td style="text-align:center;">繁琐</td><td style="text-align:center;">较简单</td><td style="text-align:center;">简单</td><td style="text-align:center;">简单</td></tr><tr><td style="text-align:center;"><strong>学习成本</strong></td><td style="text-align:center;">低</td><td style="text-align:center;">低</td><td style="text-align:center;">低</td><td style="text-align:center;">低</td></tr><tr><td style="text-align:center;"><strong>适用范围</strong></td><td style="text-align:center;">数据交换</td><td style="text-align:center;">配置文件</td><td style="text-align:center;">数据交换</td><td style="text-align:center;">数据交换</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在go中，如果想要对结构体进行序列化与反序列化，字段必须是对外暴露的，即首字母大写。</p></div>',4),k=s("code",null,".ini",-1),v={href:"https://toml.io/cn/",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h3><p><code>xml</code>又名e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage，是用于存储数据的一种格式，起源于20世纪60年代，是以上几种数据格式中最为古老的一种。它的用途十分广泛，可用于网络传输，数据交换，配置文件，数据存储等等。但随着时代的更替，逐渐正在被新的标记语言替代。</p><p>首先定义结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   UserId   <span class="token builtin">string</span> <span class="token string">\`xml:&quot;id&quot;\`</span>
   Username <span class="token builtin">string</span> <span class="token string">\`xml:&quot;name&quot;\`</span>
   Age      <span class="token builtin">int</span>    <span class="token string">\`xml:&quot;age&quot;\`</span>
   Address  <span class="token builtin">string</span> <span class="token string">\`xml:&quot;address&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Marshal</span><span class="token punctuation">(</span>v any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">//xml序列化</span>

<span class="token keyword">func</span> <span class="token function">MarshalIndent</span><span class="token punctuation">(</span>v any<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> indent <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">//格式化</span>

<span class="token keyword">func</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> v any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token comment">//反序列化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   person <span class="token operator">:=</span> Person<span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;120&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">18</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;usa&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>

   bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Person</span><span class="token punctuation">&gt;</span></span>                      
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>          
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>     
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>         
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>usa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Person</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> person <span class="token operator">=</span> Person<span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">0</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>

   xmlStr <span class="token operator">:=</span> <span class="token string">&quot;&lt;Person&gt;                      \\n        &lt;id&gt;120&lt;/id&gt;          \\n        &lt;name&gt;jack&lt;/name&gt;     \\n        &lt;age&gt;18&lt;/age&gt;         \\n        &lt;address&gt;usa&lt;/address&gt;\\n&lt;/Person&gt;  &quot;</span>

   err <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>xmlStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span>UserId<span class="token punctuation">:</span><span class="token number">120</span> Username<span class="token punctuation">:</span>jack Age<span class="token punctuation">:</span><span class="token number">18</span> Address<span class="token punctuation">:</span>usa<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),g=s("code",null,"etree",-1),b={href:"https://juejin.cn/post/6844903983614525453",target:"_blank",rel:"noopener noreferrer"},y=a(`<h3 id="yml" tabindex="-1"><a class="header-anchor" href="#yml" aria-hidden="true">#</a> YML</h3><p>YAML的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件，YML也在许多项目里以配置文件的形式存在，它的内容结构更加简洁，一目了然。go官方并没有提供对于YML的支持，我们需要使用第三方包。</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>go get github<span class="token punctuation">.</span>com/go-yaml/yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>主要方法</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Marshal</span><span class="token punctuation">(</span>in <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>out <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">//序列化</span>

<span class="token keyword">func</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>in <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> out <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">//反序列化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先准备结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Database <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;database&quot;\`</span>
   Url      <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;url&quot;\`</span>
   Port     <span class="token builtin">int</span>    <span class="token string">\`yaml:&quot;port&quot;\`</span>
   Username <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;username&quot;\`</span>
   Password <span class="token builtin">string</span> <span class="token string">\`yaml:&quot;password&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">database</span><span class="token punctuation">:</span> mysql
<span class="token key atrule">url</span><span class="token punctuation">:</span> 127.0.0.1
<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>
<span class="token key atrule">username</span><span class="token punctuation">:</span> root
<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列化-1" tabindex="-1"><a class="header-anchor" href="#序列化-1" aria-hidden="true">#</a> 序列化</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   config <span class="token operator">:=</span> Config<span class="token punctuation">{</span>
      Database<span class="token punctuation">:</span> <span class="token string">&quot;oracle&quot;</span><span class="token punctuation">,</span>
      Url<span class="token punctuation">:</span>      <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
      Port<span class="token punctuation">:</span>     <span class="token number">3326</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
      Password<span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>

   out<span class="token punctuation">,</span> err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">database</span><span class="token punctuation">:</span> oracle
<span class="token key atrule">url</span><span class="token punctuation">:</span> localhost
<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3326</span>
<span class="token key atrule">username</span><span class="token punctuation">:</span> root
<span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过由于<code>yml</code>本身有着严格的缩进语法，所以也不存在什么序列化格式化的问题了。</p><h4 id="反序列化-1" tabindex="-1"><a class="header-anchor" href="#反序列化-1" aria-hidden="true">#</a> 反序列化</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">&quot;./src/config.yml&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">var</span> config Config
   err <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>

   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{mysql 127.0.0.1 3306 root 123456}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><p><code>json</code>在<code>Restful</code>风格的接口通信中经常会用到，其相较于<code>xml</code>更轻便的大小，低廉的学习成本使其在<code>web</code>领域称为了主流的数据交换格式。</p><p>在go中，<code>encoding/json</code>包下提供对应的函数来进行json的序列化与反序列化，主要使用的有如下函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Marshal</span><span class="token punctuation">(</span>v any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">//将go对象序列化为json字符串</span>

<span class="token keyword">func</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> v any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token comment">//将json字符串反序列化为go对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   UserId   <span class="token builtin">string</span>
   Username <span class="token builtin">string</span>
   Age      <span class="token builtin">int</span>    
   Address  <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列化-2" tabindex="-1"><a class="header-anchor" href="#序列化-2" aria-hidden="true">#</a> 序列化</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	person <span class="token operator">:=</span> Person<span class="token punctuation">{</span>
		UserId<span class="token punctuation">:</span>   <span class="token string">&quot;120&quot;</span><span class="token punctuation">,</span>
		Username<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>      <span class="token number">18</span><span class="token punctuation">,</span>
		Address<span class="token punctuation">:</span>  <span class="token string">&quot;usa&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;UserId&quot;</span><span class="token operator">:</span><span class="token string">&quot;120&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;Username&quot;</span><span class="token operator">:</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;Age&quot;</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token property">&quot;Address&quot;</span><span class="token operator">:</span><span class="token string">&quot;usa&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="字段重命名" tabindex="-1"><a class="header-anchor" href="#字段重命名" aria-hidden="true">#</a> 字段重命名</h4><p>我们可以通过结构体标签来达到重命名的效果。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   UserId   <span class="token builtin">string</span> <span class="token string">\`json:&quot;id&quot;\`</span>
   Username <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
   Age      <span class="token builtin">int</span>    <span class="token string">\`json:&quot;age&quot;\`</span>
   Address  <span class="token builtin">string</span> <span class="token string">\`json:&quot;address&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时输出</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1202&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;USA&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="缩进" tabindex="-1"><a class="header-anchor" href="#缩进" aria-hidden="true">#</a> 缩进</h4><p>序列化时默认是没有任何缩进的，这是为了减少传输过程的空间损耗，但是这并不利于人为观察，在一些情况下我们需要将其序列化成人类能够观察的形式。为此，只需要换一个函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">MarshalIndent</span><span class="token punctuation">(</span>v any<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> indent <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   person <span class="token operator">:=</span> Person<span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;1202&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">19</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;USA&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
   bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1202&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
        <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;USA&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反序列化-2" tabindex="-1"><a class="header-anchor" href="#反序列化-2" aria-hidden="true">#</a> 反序列化</h4><p>在反序列化时需要注意，如果结构体有json标签的话，则字段名优先以json标签为准，否则以结构体属性名为准。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	person <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token punctuation">}</span>

	jsonStr <span class="token operator">:=</span> <span class="token string">&quot;{\\&quot;id\\&quot;:\\&quot;120\\&quot;,\\&quot;name\\&quot;:\\&quot;jack\\&quot;,\\&quot;age\\&quot;:18,\\&quot;address\\&quot;:\\&quot;usa\\&quot;}\\n&quot;</span>

	err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span>UserId<span class="token punctuation">:</span><span class="token number">120</span> Username<span class="token punctuation">:</span>jack Age<span class="token punctuation">:</span><span class="token number">18</span> Address<span class="token punctuation">:</span>usa<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="protocol-buffers" tabindex="-1"><a class="header-anchor" href="#protocol-buffers" aria-hidden="true">#</a> Protocol Buffers</h3>`,45),h=s("code",null,"Protobuf",-1),f=a(`<p>安装依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get github.com/golang/protobuf/proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>person.proto</code>文件</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">&quot;./;person&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> proto<span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">Gender</span><span class="token punctuation">{</span>
  MAIL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  FE_MAIL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">person</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">int32</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token positional-class-name class-name">Gender</span> gender <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成文件后</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
   p <span class="token string">&quot;GoProject/src/proto&quot;</span>
   <span class="token string">&quot;fmt&quot;</span>
   <span class="token string">&quot;github.com/golang/protobuf/proto&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	person <span class="token operator">:=</span> p<span class="token punctuation">.</span>Person<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>   <span class="token string">&quot;wyh&quot;</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>    <span class="token number">12</span><span class="token punctuation">,</span>
		Gender<span class="token punctuation">:</span> p<span class="token punctuation">.</span>Gender_FE_MAIL<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	data<span class="token punctuation">,</span> err <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token comment">//序列化</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	temp <span class="token operator">:=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;proto buffer len: &quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;bytes:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	err <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token comment">//反序列化</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>proto buffer len:  9 bytes: [10 3 119 121 104 16 12 24 1]
name:&quot;wyh&quot;  age:12  gender:FE_MAIL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过通常我们不会去手动序列化，<code>protoc</code>编译器可以根据我们定义好的<code>proto</code>文件生成对应语言的源代码。</p>`,9);function q(x,w){const e=p("ExternalLinkIcon"),o=p("RouterLink");return l(),i("div",null,[d,s("p",null,[n("另外，TOML也逐渐开始流行，语法上像是"),k,n("的改进，感兴趣可以前往"),s("a",v,[n("TOML：Tom 的（语义）明显、（配置）最小化的语言"),t(e)]),n("了解一下。")]),m,s("p",null,[n("不过传统的xml解析方式经常需要新建结构体，这会十分的繁琐，现在解析的都是简单的xml结构，倘若使用复杂的结构，就会让人十分头疼。所以我们大多数会用一个第三方开源库"),g,n("来解析xml，感兴趣的可以自行了解："),s("a",b,[n("Go比较好用的解析xml文件的插件etree - 掘金 (juejin.cn)"),t(e)]),n("。")]),y,s("p",null,[n("protocol是谷歌2008开源的语言中立，协议中立，可扩展的结构化数据序列化机制。相比于以上三种更加的轻便，而且在解包封包的时候更加的快速，多用于RPC领域通信相关，有关"),h,n("的讲解可以前往"),t(o,{to:"/community/mirco/protoc.html"},{default:u(()=>[n("Protobuf")]),_:1}),n("。")]),f])}const P=c(r,[["render",q],["__file","encode.html.vue"]]);export{P as default};
