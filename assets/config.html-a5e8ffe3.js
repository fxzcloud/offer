import{_ as n,V as s,W as a,$ as t}from"./framework-8edddef6.js";const p={},o=t(`<h1 id="spring-boot配置加载" tabindex="-1"><a class="header-anchor" href="#spring-boot配置加载" aria-hidden="true">#</a> spring boot配置加载</h1><blockquote><p>SB启动时，会创建出ConfigurableEnvironment，并添加默认属性、命令行属性。</p><p>通过回调SpringApplicationRunListener#environmentPrepared发布ApplicationEnvironmentPreparedEvent事件。</p><p>SB2.4以后，通过EnvironmentPostProcessorApplicationListener监听ApplicationEnvironmentPreparedEvent事件遍历EnvironmentPostProcessor进行处理配置文件加载。</p><p>SB2.4以后，通过ConfigDataEnvironmentPostProcessor进行实际的配置数据加载。</p><p>核心逻辑是通过将已经存在的属性源、默认应该导入的位置封装为ConfigDataEnvironmentContributor，最终通过ConfigDataEnvironmentContributors进行加载。</p></blockquote><h2 id="configdataenvironmentcontributor" tabindex="-1"><a class="header-anchor" href="#configdataenvironmentcontributor" aria-hidden="true">#</a> ConfigDataEnvironmentContributor</h2><p>在2.4版本后，Spring 决定更改加载配置文件背后的逻辑。</p><p>为了表示可能对环境做出贡献的元素，引入了 ConfigDataEnvironmentContributor，每个贡献者都将在此过程中被替换。</p><p>Spring 决定使用树作为数据结构来处理/应用配置数据。</p><p>我将 ConfigDataEnvironmentContributor 称为 CDEContributor。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/JpWD2I.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每个贡献者都可以导入一些属性，并将其作为子项附加，从而创建整个树。</p><p>每个贡献者将包含一些描述节点的元数据：</p><blockquote><ol><li><strong>location</strong>：一个 configDataLocation，将使用 configDataLocationResolver 解析为一个或多个资源。</li><li><strong>ressource</strong>：每个 propertySource 都会被包装在一个 ConfigData 对象中，ConfigResource 指示可以从哪个 ConfigData 加载。</li><li>**propertySource：**链接到该节点的propertySource。</li></ol><p>4.children ：<strong>子</strong>贡献者，如前所述，当贡献者导入某些属性时，将添加新的贡献者作为该贡献者的子代。为每个 importPhase 创建子项。</p><ol start="5"><li>**kind：**贡献者有多种类型：</li></ol><p><strong>ROOT</strong>：我们树的根</p><p><strong>INITIAL_IMPORT</strong>，这个贡献者被添加在开头，表明贡献者处于活跃状态，应该得到处理</p><p>通过包装现有 propertySource 获得的<strong>EXISTING Contributors 这些类型的 propertySource 将不会被处理</strong></p><p><em><strong>UNBOUND_IMPORT</strong></em> 已导入但尚未绑定的贡献者</p><p><em><strong>BOUND_IMPORT</strong></em> 从另一个贡献者导入的贡献者</p><p><em><strong>EMPTY_LOCATION</strong></em> 一个不包含任何要加载内容的有效位置。</p></blockquote><p>除此之外，儿童贡献者将被分为两组儿童 BEFORE_PROFILE_ACTIVATION 和 AFTER_PROFILE_ACTIVATION （将其想象为左和右），此信息将用于在遍历树时设置优先级，即在遍历之前首先查看 AFTER_PROFILE_ACTIVATION 领域另一个（或者在本例中先向右然后向左）。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/L7efFN.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/lQwWjG.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="入口" tabindex="-1"><a class="header-anchor" href="#入口" aria-hidden="true">#</a> 入口</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

			<span class="token doc-comment comment">/**
			 * 构造出 ConfigurableEnvironment
			 *
			 * 1. 可以使用 ApplicationContextFactory 来生成 ConfigurableEnvironment
			 * 2. 回调 SpringApplicationRunListener#environmentPrepared 配置 ConfigurableEnvironment
			 * 3. 修改属性的访问顺序为： 命令行参数 -&gt; 系统属性 -&gt; 环境变量 ... -&gt; 默认属性(默认是空的)
			 * */</span>
			<span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> bootstrapContext<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这一步会完成ConfigurableEnvironment的创建以及配置的加载工作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span>
													   <span class="token class-name">DefaultBootstrapContext</span> bootstrapContext<span class="token punctuation">,</span>
													   <span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token doc-comment comment">/**
		 * 创建出 ConfigurableEnvironment
		 *
		 * 如果没有默认的，就会读取 META-INF/spring.factories 中key为 \`ApplicationContextFactory.class.getName()\` 的实例
		 * 回调 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ApplicationContextFactory</span><span class="token punctuation">#</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationType</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 方法生成 ConfigurableEnvironment
		 *
		 * */</span>
		<span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token doc-comment comment">/**
		 * 配置Environment，其实就是扩展Environment能访问的属性信息
		 * 		访问顺序：命令行参数 -&gt; ... -&gt; 默认属性
		 *
		 * 注：默认属性可以这样子进行配置 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplicationTests</span><span class="token punctuation">#</span><span class="token function">defaultCommandLineArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
		 * */</span>
		<span class="token function">configureEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 将 ConfigurationPropertySourcesPropertySource 放到第一个位置</span>
		<span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token doc-comment comment">/**
		 * 回调 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SpringApplicationRunListener</span><span class="token punctuation">#</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBootstrapContext</span><span class="token punctuation">,</span> <span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
		 * 对 environment 进行配置
		 * */</span>
		listeners<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 移动 defaultProperties 到最后，即优先级最低</span>
		<span class="token class-name">DefaultPropertiesPropertySource</span><span class="token punctuation">.</span><span class="token function">moveToEnd</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>
				<span class="token operator">!</span>environment<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.main.environment-prefix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string">&quot;Environment prefix cannot be set via properties.&quot;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">bindToSpringApplication</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isCustomEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">EnvironmentConverter</span> environmentConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentConverter</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 转换成 ConfigurableEnvironment 类型的</span>
			environment <span class="token operator">=</span> environmentConverter<span class="token punctuation">.</span><span class="token function">convertEnvironmentIfNecessary</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token function">deduceEnvironmentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> environment<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建environment" tabindex="-1"><a class="header-anchor" href="#创建environment" aria-hidden="true">#</a> 创建Environment</h3><p>SERVLET环境默认创建的是ApplicationServletEnvironment。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextFactory<span class="token punctuation">.</span><span class="token function">createEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>environment <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextFactory <span class="token operator">!=</span> <span class="token class-name">ApplicationContextFactory</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			environment <span class="token operator">=</span> <span class="token class-name">ApplicationContextFactory</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">.</span><span class="token function">createEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> <span class="token punctuation">(</span>environment <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> environment <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">ApplicationServletEnvironment<span class="token punctuation">.</span>Factory</span>
	<span class="token keyword">public</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">createEnvironment</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationType</span> webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span>webApplicationType <span class="token operator">!=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationServletEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置environment" tabindex="-1"><a class="header-anchor" href="#配置environment" aria-hidden="true">#</a> 配置Environment</h3><p>为ConfigurableEnvironment添加默认的属性源以及命令行参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureEnvironment</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addConversionService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			environment<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token doc-comment comment">/**
		 * 扩展 environment 访问的属性
		 *
		 * 访问顺序：命令行参数 -&gt; ... -&gt; 默认属性
		 *
		 * */</span>
		<span class="token function">configurePropertySources</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 模板方法，空实现</span>
		<span class="token function">configureProfiles</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	
	
		<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configurePropertySources</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">MutablePropertySources</span> sources <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 将 defaultProperties 装饰成 propertySource 然后注册到 sources 中（放在最后）</span>
			<span class="token class-name">DefaultPropertiesPropertySource</span><span class="token punctuation">.</span><span class="token function">addOrMerge</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultProperties<span class="token punctuation">,</span> sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 将 args 构造成 SimpleCommandLinePropertySource 然后注册到 sources 中（放到前面）</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCommandLineProperties <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">CommandLinePropertySource</span><span class="token punctuation">.</span><span class="token constant">COMMAND_LINE_PROPERTY_SOURCE_NAME</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sources<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> source <span class="token operator">=</span> sources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name">CompositePropertySource</span> composite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositePropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
				composite<span class="token punctuation">.</span><span class="token function">addPropertySource</span><span class="token punctuation">(</span>
						<span class="token keyword">new</span> <span class="token class-name">SimpleCommandLinePropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;springApplicationCommandLineArgs&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				composite<span class="token punctuation">.</span><span class="token function">addPropertySource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
				sources<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> composite<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 放到前面</span>
				sources<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleCommandLinePropertySource</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回调environmentprepared" tabindex="-1"><a class="header-anchor" href="#回调environmentprepared" aria-hidden="true">#</a> 回调environmentPrepared</h3><p>默认只有一个EventPublishingRunListener发布环境预处理事件，将创建的环境对象传递。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">environmentPrepared</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBootstrapContext</span> bootstrapContext<span class="token punctuation">,</span>
			<span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>initialMulticaster<span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>
				<span class="token keyword">new</span> <span class="token class-name">ApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SB2.4以后通过EnvironmentPostProcessorApplicationListener监听ApplicationEnvironmentPreparedEvent事件，会回调ConfigDataEnvironmentPostProcessor进行配置文件的加载处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">EnvironmentPostProcessorApplicationListener</span><span class="token operator">:</span>
	
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEnvironmentPreparedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">onApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEnvironmentPreparedEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationPreparedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">onApplicationPreparedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationFailedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">onApplicationFailedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEnvironmentPreparedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getSpringApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EnvironmentPostProcessor</span> postProcessor <span class="token operator">:</span> <span class="token function">getEnvironmentPostProcessors</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				event<span class="token punctuation">.</span><span class="token function">getBootstrapContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 回调 EnvironmentPostProcessor</span>
			postProcessor<span class="token punctuation">.</span><span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置数据加载" tabindex="-1"><a class="header-anchor" href="#配置数据加载" aria-hidden="true">#</a> 配置数据加载</h2><p>版本:SB2.7.x</p><p>配置文件:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># classPath:application.yml</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> art<span class="token punctuation">-</span>server<span class="token punctuation">-</span>system
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NACOS_HOST<span class="token punctuation">:</span>art<span class="token punctuation">-</span>nacos<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NACOS_HOST<span class="token punctuation">:</span>art<span class="token punctuation">-</span>nacos<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos
      <span class="token key atrule">password</span><span class="token punctuation">:</span> art<span class="token punctuation">-</span>nacos
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>.yaml
      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>art<span class="token punctuation">-</span>common.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configdataenvironmentpostprocessor处理监听" tabindex="-1"><a class="header-anchor" href="#configdataenvironmentpostprocessor处理监听" aria-hidden="true">#</a> ConfigDataEnvironmentPostProcessor处理监听</h3><p>通过ConfigDataEnvironment进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">ConfigDataEnvironmentPostProcessor</span>：
  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">SpringApplication</span> application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> application<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> application<span class="token punctuation">.</span><span class="token function">getAdditionalProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">void</span> <span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span>
			<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> additionalProfiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Post-processing environment to add config data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> resourceLoader <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token doc-comment comment">/**
			 * 找到属性文件(application.yaml|yml|xml|properties)，解析成 PropertySource 然后添加到 environment 中(往后面加)
			 * */</span>
			<span class="token function">getConfigDataEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">,</span> additionalProfiles<span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">processAndApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UseLegacyConfigProcessingException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Switching to legacy config file processing [%s]&quot;</span><span class="token punctuation">,</span>
					ex<span class="token punctuation">.</span><span class="token function">getConfigurationProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">configureAdditionalProfiles</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> additionalProfiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">postProcessUsingLegacyApplicationListener</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>





<span class="token class-name">ConfigDataEnvironment</span> <span class="token function">getConfigDataEnvironment</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span>
			<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> additionalProfiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bootstrapContext<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">,</span>
				additionalProfiles<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environmentUpdateListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configdataenvironment初始化" tabindex="-1"><a class="header-anchor" href="#configdataenvironment初始化" aria-hidden="true">#</a> ConfigDataEnvironment初始化</h3><p>ConfigDataEnvironment的构造中初始化了一些要用到的成员变量。同时将已有的属性源以及需要导入配置的位置 封装成 Contributors。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">ConfigDataEnvironment</span>：
  
	<span class="token class-name">ConfigDataEnvironment</span><span class="token punctuation">(</span><span class="token class-name">DeferredLogFactory</span> logFactory<span class="token punctuation">,</span> <span class="token class-name">ConfigurableBootstrapContext</span> bootstrapContext<span class="token punctuation">,</span> <span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> additionalProfiles<span class="token punctuation">,</span> <span class="token class-name">ConfigDataEnvironmentUpdateListener</span> environmentUpdateListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Binder</span> binder <span class="token operator">=</span> <span class="token class-name">Binder</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">UseLegacyConfigProcessingException</span><span class="token punctuation">.</span><span class="token function">throwIfRequested</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>logFactory <span class="token operator">=</span> logFactory<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> logFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>notFoundAction <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token constant">ON_NOT_FOUND_PROPERTY</span><span class="token punctuation">,</span> <span class="token class-name">ConfigDataNotFoundAction</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataNotFoundAction</span><span class="token punctuation">.</span><span class="token constant">FAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>bootstrapContext <span class="token operator">=</span> bootstrapContext<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>
		<span class="token comment">// 解析需要加载配置位置的 读取 spring.factories 文件中 key 为 ConfigDataLocationResolver 的</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>resolvers <span class="token operator">=</span> <span class="token function">createConfigDataLocationResolvers</span><span class="token punctuation">(</span>logFactory<span class="token punctuation">,</span> bootstrapContext<span class="token punctuation">,</span> binder<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>additionalProfiles <span class="token operator">=</span> additionalProfiles<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>environmentUpdateListener <span class="token operator">=</span> <span class="token punctuation">(</span>environmentUpdateListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> environmentUpdateListener <span class="token operator">:</span> <span class="token class-name">ConfigDataEnvironmentUpdateListener</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">;</span>
		<span class="token comment">// 实际加载配置数据的 通过读取 spring.factories 文件中 key 为 ConfigDataLoader 的</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>loaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataLoaders</span><span class="token punctuation">(</span>logFactory<span class="token punctuation">,</span> bootstrapContext<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 将已有的属性源以及需要导入配置的位置 封装成 Contributors</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>contributors <span class="token operator">=</span> <span class="token function">createContributors</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将环境中已有的属性源封装成ConfigDataEnvironmentContributor， kind为Existing。</li><li>添加初始化属性值 将默认的几个位置封装成ConfigDataEnvironmentContributor ，kind为INITIAL_IMPORT。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConfigDataEnvironment</span><span class="token operator">:</span>

	<span class="token keyword">static</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataLocation</span><span class="token punctuation">&gt;</span></span> locations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// optional: 是固定前缀， ConfigDataLocation.of 会截掉</span>
		locations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataLocation</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;optional:classpath:/;optional:classpath:/config/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		locations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataLocation</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;optional:file:./;optional:file:./config/;optional:file:./config/*/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token constant">DEFAULT_SEARCH_LOCATIONS</span> <span class="token operator">=</span> locations<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfigDataLocation</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

 <span class="token comment">// 将环境中的propertySources、默认的几个位置封装成ConfigDataEnvironmentContributor</span>
	<span class="token keyword">private</span> <span class="token class-name">ConfigDataEnvironmentContributors</span> <span class="token function">createContributors</span><span class="token punctuation">(</span><span class="token class-name">Binder</span> binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Building config data environment contributors&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MutablePropertySources</span> propertySources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将环境中已有的属性源封装成ConfigDataEnvironmentContributor kind为Existing</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">&gt;</span></span> contributors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>propertySources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
    <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> defaultPropertySource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propertySource <span class="token operator">:</span> propertySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DefaultPropertiesPropertySource</span><span class="token punctuation">.</span><span class="token function">hasMatchingName</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 记录 defaultPropertySource</span>
				defaultPropertySource <span class="token operator">=</span> propertySource<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Creating wrapped config data contributor for &#39;%s&#39;&quot;</span><span class="token punctuation">,</span> propertySource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 将 propertySource 装饰成 ConfigDataEnvironmentContributor</span>
				contributors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">.</span><span class="token function">ofExisting</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 添加初始化属性值 将默认的几个位置封装成ConfigDataEnvironmentContributor</span>
		contributors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getInitialImportContributors</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>defaultPropertySource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Creating wrapped config data contributor for default property source&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			contributors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">.</span><span class="token function">ofExisting</span><span class="token punctuation">(</span>defaultPropertySource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> <span class="token function">createContributors</span><span class="token punctuation">(</span>contributors<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	

	
	<span class="token comment">// 封装默认的几个位置 </span>
	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInitialImportContributors</span><span class="token punctuation">(</span><span class="token class-name">Binder</span> binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">&gt;</span></span> initialContributors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 获取 &quot;spring.config.import&quot; 配置的路径，装饰成 ConfigDataEnvironmentContributor</span>
		<span class="token function">addInitialImportContributors</span><span class="token punctuation">(</span>initialContributors<span class="token punctuation">,</span> <span class="token function">bindLocations</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> <span class="token constant">IMPORT_PROPERTY</span><span class="token punctuation">,</span> <span class="token constant">EMPTY_LOCATIONS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 获取 &quot;spring.config.additional-location&quot; 配置的路径，装饰成 ConfigDataEnvironmentContributor</span>
		<span class="token function">addInitialImportContributors</span><span class="token punctuation">(</span>initialContributors<span class="token punctuation">,</span> <span class="token function">bindLocations</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> <span class="token constant">ADDITIONAL_LOCATION_PROPERTY</span><span class="token punctuation">,</span> <span class="token constant">EMPTY_LOCATIONS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token doc-comment comment">/**
		 * 获取 &quot;spring.config.location&quot; 配置的路径，装饰成 ConfigDataEnvironmentContributor
		 *
		 * 默认是
		 * classpath:/
		 * classpath:/config/
		 * file:./
		 * file:./config/
		 * file:./config/&#39;*&#39;/
		 * */</span>
		<span class="token function">addInitialImportContributors</span><span class="token punctuation">(</span>initialContributors<span class="token punctuation">,</span> <span class="token function">bindLocations</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> <span class="token constant">LOCATION_PROPERTY</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_SEARCH_LOCATIONS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> initialContributors<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	

	

   <span class="token comment">// 将默认的几个位置封装成ConfigDataEnvironmentContributor 类型为INITIAL_IMPORT 后面导入</span>
	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addInitialImportContributors</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">&gt;</span></span> initialContributors<span class="token punctuation">,</span> <span class="token class-name">ConfigDataLocation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> locations<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			initialContributors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createInitialImportContributor</span><span class="token punctuation">(</span>locations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">private</span> <span class="token class-name">ConfigDataEnvironmentContributor</span> <span class="token function">createInitialImportContributor</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataLocation</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Adding initial config data import from location &#39;%s&#39;&quot;</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">.</span><span class="token function">ofInitialImport</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token class-name">ConfigDataEnvironmentContributor</span> <span class="token function">ofInitialImport</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataLocation</span> initialImport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataLocation</span><span class="token punctuation">&gt;</span></span> imports <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>initialImport<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ConfigDataProperties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataProperties</span><span class="token punctuation">(</span>imports<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataEnvironmentContributor</span><span class="token punctuation">(</span><span class="token class-name">Kind</span><span class="token punctuation">.</span><span class="token constant">INITIAL_IMPORT</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> properties<span class="token punctuation">,</span>
				<span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到系统属性、环境变量、命令行属性等已有的属性源，kind为Existing。而其他几个需要导入的位置，kind被封装为了INITIAL_IMPORT。<img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/iA8qnP.png" alt="" loading="lazy"></p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/bdZmqY.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/Pbc9ZE.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="processandapply" tabindex="-1"><a class="header-anchor" href="#processandapply" aria-hidden="true">#</a> processAndApply</h3><p>处理所有贡献，并将任何新导入的属性源应用于Environment。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">processAndApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// importer 是一个很关键的对象，包含了扫描的目录、扫描到的文件 当然这里只是进行了实例化，还没有任何数据</span>
    <span class="token class-name">ConfigDataImporter</span> importer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataImporter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notFoundAction<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loaders<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">registerBootstrapBinder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contributors<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">DENY_INACTIVE_BINDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 处理 contributors 的初始化，其实就是加载并解析 contributors 路径下存在的属性文件
     * 其目的是找到所有可能的属性文件(比如 application.yml)
     * */</span>
    <span class="token class-name">ConfigDataEnvironmentContributors</span> contributors <span class="token operator">=</span> <span class="token function">processInitial</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contributors<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ConfigDataActivationContext</span> activationContext <span class="token operator">=</span> <span class="token function">createActivationContext</span><span class="token punctuation">(</span>contributors<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">BinderOption</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_BIND_TO_INACTIVE_SOURCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 处理没有 profile</span>
    contributors <span class="token operator">=</span> <span class="token function">processWithoutProfiles</span><span class="token punctuation">(</span>contributors<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> activationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 拿到 profile</span>
    activationContext <span class="token operator">=</span> <span class="token function">withProfiles</span><span class="token punctuation">(</span>contributors<span class="token punctuation">,</span> activationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 根据 profile 的名字，找到属性文件
     * */</span>
    contributors <span class="token operator">=</span> <span class="token function">processWithProfiles</span><span class="token punctuation">(</span>contributors<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> activationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将最终的结果设置到 environment 中，也就是属性文件生效了</span>
    <span class="token function">applyToEnvironment</span><span class="token punctuation">(</span>contributors<span class="token punctuation">,</span> activationContext<span class="token punctuation">,</span> importer<span class="token punctuation">.</span><span class="token function">getLoadedLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> importer<span class="token punctuation">.</span><span class="token function">getOptionalLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="processinitial" tabindex="-1"><a class="header-anchor" href="#processinitial" aria-hidden="true">#</a> processInitial</h4><p>这一波主要处理默认的那几个位置的导入。也就是kind为imital_import类型的。主要看8、9的处理。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/YQi52X.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConfigDataEnvironmentContributors</span> <span class="token function">processInitial</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataEnvironmentContributors</span> contributors<span class="token punctuation">,</span> <span class="token class-name">ConfigDataImporter</span> importer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Processing initial config data environment contributors without activation context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理配置的导入</span>
    contributors <span class="token operator">=</span> contributors<span class="token punctuation">.</span><span class="token function">withProcessedImports</span><span class="token punctuation">(</span>importer<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">registerBootstrapBinder</span><span class="token punctuation">(</span>contributors<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">DENY_INACTIVE_BINDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> contributors<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConfigDataEnvironmentContributors</span> <span class="token function">withProcessedImports</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataImporter</span> importer<span class="token punctuation">,</span>
       <span class="token class-name">ConfigDataActivationContext</span> activationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ImportPhase</span> importPhase <span class="token operator">=</span> <span class="token class-name">ImportPhase</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>activationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Processing imports for phase %s. %s&quot;</span><span class="token punctuation">,</span> importPhase<span class="token punctuation">,</span>
          <span class="token punctuation">(</span>activationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> activationContext <span class="token operator">:</span> <span class="token string">&quot;no activation context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ConfigDataEnvironmentContributors</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> processed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 获取待解析的 contributor</span>
       <span class="token class-name">ConfigDataEnvironmentContributor</span> contributor <span class="token operator">=</span> <span class="token function">getNextToProcess</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> activationContext<span class="token punctuation">,</span> importPhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
       <span class="token comment">// 说明都解析完了，返回解析的结果</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>contributor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Processed imports for of %d contributors&quot;</span><span class="token punctuation">,</span> processed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> result<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span>contributor<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Kind</span><span class="token punctuation">.</span><span class="token constant">UNBOUND_IMPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         	<span class="token comment">// 更新一下kind 不处理</span>
          <span class="token class-name">ConfigDataEnvironmentContributor</span> bound <span class="token operator">=</span> contributor<span class="token punctuation">.</span><span class="token function">withBoundProperties</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> activationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
          result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataEnvironmentContributors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bootstrapContext<span class="token punctuation">,</span>
                result<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withReplacement</span><span class="token punctuation">(</span>contributor<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">continue</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// 是用来拼接路径的，判断拼接完的路径下的文件是否存在</span>
       <span class="token class-name">ConfigDataLocationResolverContext</span> locationResolverContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContributorConfigDataLocationResolverContext</span><span class="token punctuation">(</span>
             result<span class="token punctuation">,</span> contributor<span class="token punctuation">,</span> activationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">ConfigDataLoaderContext</span> loaderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContributorDataLoaderContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataLocation</span><span class="token punctuation">&gt;</span></span> imports <span class="token operator">=</span> contributor<span class="token punctuation">.</span><span class="token function">getImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Processing imports %s&quot;</span><span class="token punctuation">,</span> imports<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token doc-comment comment">/**
        * 解析并且读取配置文件
        *
        * 思路就是:
        *     1. imports的是路径 就拼接上 application 然后判断资源是否存在
        *     2. imports是文件 判断资源是否存在
        *     3. 存在就解析文件成 PropertySource
        *
        * 主要是会使用这几个类。读取 META-INF/spring.factories 得到的：
        *     - org.springframework.boot.context.config.ConfigDataLocationResolver
        *     是用来判断指定路径下是否存在属性文件，文件允许啥后缀和怎么解析是依赖于 PropertySourceLoader
        *
        *     - org.springframework.boot.env.PropertySourceLoader
        *     这是用来允许哪些后缀的属性文件和解析属性文件成 PropertiesSource 的
        *
        *     - org.springframework.boot.context.config.ConfigDataLoader
        *     是用来处理 ConfigDataLocationResolver 的解析结果
        * */</span>
       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataResolutionResult</span><span class="token punctuation">,</span> <span class="token class-name">ConfigData</span><span class="token punctuation">&gt;</span></span> imported <span class="token operator">=</span> importer<span class="token punctuation">.</span><span class="token function">resolveAndLoad</span><span class="token punctuation">(</span>activationContext<span class="token punctuation">,</span>
             locationResolverContext<span class="token punctuation">,</span> loaderContext<span class="token punctuation">,</span> imports<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getImportedMessage</span><span class="token punctuation">(</span>imported<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
       <span class="token comment">// 加载完了 把加载的结果封装到子节点 并更新当前节点</span>
       <span class="token class-name">ConfigDataEnvironmentContributor</span> contributorAndChildren <span class="token operator">=</span> contributor<span class="token punctuation">.</span><span class="token function">withChildren</span><span class="token punctuation">(</span>importPhase<span class="token punctuation">,</span>
             <span class="token function">asContributors</span><span class="token punctuation">(</span>imported<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">// 替换当前节点</span>
       result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDataEnvironmentContributors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bootstrapContext<span class="token punctuation">,</span>
             result<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withReplacement</span><span class="token punctuation">(</span>contributor<span class="token punctuation">,</span> contributorAndChildren<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       processed<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取到第一个需要处理的贡献者。可以看到它import的路径为项目根路径下，根路径下没有配置文件，所以这一波肯定加载不到。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/gRyaBQ.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解析并且加载配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataResolutionResult</span><span class="token punctuation">,</span> <span class="token class-name">ConfigData</span><span class="token punctuation">&gt;</span></span> <span class="token function">resolveAndLoad</span><span class="token punctuation">(</span><span class="token class-name">ConfigDataActivationContext</span> activationContext<span class="token punctuation">,</span>
                                              <span class="token class-name">ConfigDataLocationResolverContext</span> locationResolverContext<span class="token punctuation">,</span> <span class="token class-name">ConfigDataLoaderContext</span> loaderContext<span class="token punctuation">,</span>
                                              <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataLocation</span><span class="token punctuation">&gt;</span></span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token class-name">Profiles</span> profiles <span class="token operator">=</span> <span class="token punctuation">(</span>activationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> activationContext<span class="token punctuation">.</span><span class="token function">getProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

       <span class="token comment">// 解析加载路径</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigDataResolutionResult</span><span class="token punctuation">&gt;</span></span> resolved <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>locationResolverContext<span class="token punctuation">,</span> profiles<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token comment">// 读取文件内容</span>
       <span class="token keyword">return</span> <span class="token function">load</span><span class="token punctuation">(</span>loaderContext<span class="token punctuation">,</span> resolved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;IO error on loading imports from &quot;</span> <span class="token operator">+</span> locations<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/ZHxKw4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到第一个解析出的位置为项目根路径下的application.yml。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/xGH4JX.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，对于application.yml的加载，使用的是StandardConfigDataLoader。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/EZgCee.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是由于我们项目的根目录下并没有该文件，所以加载的结果为空。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/a4lIya.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/S4chFg.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当前贡献者解析并加载完成之后，会更新当前贡献者的子节点，并更新当前贡献者的信息。</p><p>根据加载结果构造出的子节点如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/5oW8c1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当前贡献者更新后内容如下：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/mWQz4y.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续迭代下一个贡献者。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/taaFgc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到此时上一轮的贡献者已经被更新：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/zQm7XK.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取下一个需要处理的贡献者：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/GzgZ1o.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/M1UXvH.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解析需要加载的位置,可以看到解析出了两个classpath下的文件路径：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/01/MfZ7vU.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>加载类路径下的application.yml</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/rgV3dq.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/X0oOO2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，这一轮加载有两个结果集，其中一个不为空：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/yiqyfu.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>和上一轮加载一样，更新当前贡献者,可以看到，其中一个kind为unbound_import：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/zYTaFQ.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>和之前一样，更新当前贡献者的信息，进入下一轮加载。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/wAiqLf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这一轮加载中获取到的是我们上一轮加载到的application.yml。但是unbound_import类型的在这里只是更新了kind的状态。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/qIIi94.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/mBIgno.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续迭代,处理上一轮更新状态的application.yml：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/j27jYy.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/GDSEO2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，这里解析出的位置是空，因为此时的profiles为空，NacosConfigDataLocationResolver直接返回了空集合，表示当前不加载。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/BaYhhF.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/tBDjWd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/RiYA0b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/Dpb3x9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/D4fgcd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，processInitial的加载完成。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/D6CZnW.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/IyEprd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时result中的结构，可以看到8只有一个为空的子节点。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/Eq2C8u.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>9中有两个子节点，一个为空，一个不为空(classpath:application.yml)</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/uu4gHx.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/xckMde.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/S15SUx.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="创建激活上下文" tabindex="-1"><a class="header-anchor" href="#创建激活上下文" aria-hidden="true">#</a> 创建激活上下文</h4><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/wKHA2O.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="processwithoutprofiles" tabindex="-1"><a class="header-anchor" href="#processwithoutprofiles" aria-hidden="true">#</a> processWithoutProfiles</h4><p>由于此时Profiles为空，这个方法没有进行任何处理。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/zxB5yf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/KMDUrv.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/zYsAgm.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="withprofiles" tabindex="-1"><a class="header-anchor" href="#withprofiles" aria-hidden="true">#</a> withProfiles</h4><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/EF4PaN.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="processwithprofiles" tabindex="-1"><a class="header-anchor" href="#processwithprofiles" aria-hidden="true">#</a> processWithProfiles</h4><p>可以看到phase已经变化。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/Rum8QH.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取第一个要处理的贡献者，对应的加载位置是项目根目录。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/795qG3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/R398vs.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/mxusjb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/l9l3GB.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>依然加载不到，因为我们在项目根目录下没配置。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/xUqjqt.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>更新当前节点及其子节点。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/8JAHCy.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/BRjlRz.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>导入下一个贡献者。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/LdjaeJ.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这一轮解析出了我们nacos的配置路径。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/mY2OeN.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/48qVFF.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>已经加载到了nacos中的配置信息。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/bjoe1k.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/TKxEvq.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/kJBPho.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/MNlg2z.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>更新当前节点以及子节点。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/3OCWEp.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/XHcUty.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>迭代下一个贡献者。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/dinMXx.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>更新kind。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/9rB6Y7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同上。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/FHUua4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/B7iVB0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结束加载。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/lwp20g.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/q4qjcN.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/XxWPBr.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="applytoenvironment" tabindex="-1"><a class="header-anchor" href="#applytoenvironment" aria-hidden="true">#</a> applyToEnvironment</h4><p>将加载到的配置应用到环境。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/PlbFjz.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/9ZXMpy.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/25/Kk0NXA.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,160),e=[o];function i(c,l){return s(),a("div",null,e)}const r=n(p,[["render",i],["__file","config.html.vue"]]);export{r as default};
