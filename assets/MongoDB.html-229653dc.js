import{_ as p,V as o,W as c,X as n,Y as s,Z as t,$ as e,F as i}from"./framework-8edddef6.js";const u={},l=n("h1",{id:"mongodb",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb","aria-hidden":"true"},"#"),s(" MongoDB")],-1),r=n("p",null,"MongoDB是一个文档数据库，它的基本数据单位就是文档，存储格式是BSON（Binary JSON）一种类似JSON的结构，松散的结构可以存储不同类型的数据，相较于关系数据库更为灵活，并且使用js作为脚本语言，可以通过脚本来完成组合操作。本文主要介绍使用在Go中使用官方的mongo驱动操作mongodb数据库，并不是mongodb教程，如果你没有mongo基础，请先自行了解和学习。",-1),d={href:"https://www.mongodb.com/docs/manual/introduction/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"驱动",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#驱动","aria-hidden":"true"},"#"),s(" 驱动")],-1),v=n("p",null,"mongodb在go这方面的库比较少，早期有些社区维护的库，后面都停止维护了，不过官方的mongo驱动库已经完全足够使用了。",-1),m={href:"https://github.com/mongodb/mongo-go-driver",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/mongodb/mongo-go-driver#readme",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>下载依赖的话使用下面的地址就行了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go get go.mongodb.org/mongo-driver/mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h2><p>下面是一个简单的mongo客户端与服务端建立连接的例子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
   <span class="token string">&quot;context&quot;</span>
   <span class="token string">&quot;fmt&quot;</span>
   <span class="token string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span>
   <span class="token string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span>
   <span class="token string">&quot;go.mongodb.org/mongo-driver/mongo/readpref&quot;</span>
   <span class="token string">&quot;log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">// 使用URI建立连接</span>
   client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://admin:123456@192.168.48.138:27017/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 关闭连接</span>
   <span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
   <span class="token comment">// ping测试连接是否可用</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> readpref<span class="token punctuation">.</span><span class="token function">Primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bson" tabindex="-1"><a class="header-anchor" href="#bson" aria-hidden="true">#</a> bson</h2><p>mongodb在go里面使用了以下几种类型来映射数据库中的文档，位于<code>bson/bson.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// BSON文档的有序表示</span>
<span class="token keyword">type</span> D <span class="token operator">=</span> primitive<span class="token punctuation">.</span>D

<span class="token comment">// 一对键值，BSON文档的有序表示的基本单位</span>
<span class="token keyword">type</span> E <span class="token operator">=</span> primitive<span class="token punctuation">.</span>E

<span class="token comment">// BSON文档的无序表示</span>
<span class="token keyword">type</span> M <span class="token operator">=</span> primitive<span class="token punctuation">.</span>M

<span class="token comment">// BSON数据的有序表示</span>
<span class="token keyword">type</span> A <span class="token operator">=</span> primitive<span class="token punctuation">.</span>A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的实际类型如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// BSON文档的有序表示</span>
<span class="token keyword">type</span> D <span class="token punctuation">[</span><span class="token punctuation">]</span>E

<span class="token comment">// 一对键值，BSON文档的有序表示的基本单位</span>
<span class="token keyword">type</span> E <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Key   <span class="token builtin">string</span>
	Value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// BSON文档的无序表示</span>
<span class="token keyword">type</span> M <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// BSON数据的有序表示</span>
<span class="token keyword">type</span> A <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上几种类型，即可以构造查询SQL，也可以用来映射数据。</p>`,12),q={class:"hint-container tip"},f=n("p",{class:"hint-container-title"},"提示",-1),h=n("p",null,"驱动examples目录下有着相当多的使用示例，官方非常详细的演示了如何使用上述四种类型。",-1),x={href:"https://github.com/mongodb/mongo-go-driver/blob/master/examples/documentation_examples/examples.go",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"查询文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#查询文档","aria-hidden":"true"},"#"),s(" 查询文档")],-1),y={href:"https://github.com/mongodb/mongo-go-driver/blob/master/examples/documentation_examples/examples.go#L145",target:"_blank",rel:"noopener noreferrer"},D=e(`<p>首先创建user数据库，向集合users插入如下数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">use</span> <span class="token keyword">user</span>
<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>insertMany<span class="token punctuation">(</span><span class="token punctuation">[</span>
    {
        name: <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span>
        age: <span class="token number">12</span><span class="token punctuation">,</span>
        
    }<span class="token punctuation">,</span>
    {
        name: <span class="token string">&quot;jenny&quot;</span><span class="token punctuation">,</span>
        age: <span class="token number">14</span><span class="token punctuation">,</span>
        
    }<span class="token punctuation">,</span>
    {
        name: <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
        age: <span class="token number">18</span><span class="token punctuation">,</span>
        address: <span class="token string">&quot;usa&quot;</span>
    }
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询单个" tabindex="-1"><a class="header-anchor" href="#查询单个" aria-hidden="true">#</a> 查询单个</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name    <span class="token builtin">string</span> <span class="token string">\`bson:&quot;name&quot;\`</span>
    Age     <span class="token builtin">int</span>    <span class="token string">\`bson:&quot;age&quot;\`</span>
    Address <span class="token builtin">string</span> <span class="token string">\`bson:&quot;address&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> user User

result <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 选中数据库</span>
                    <span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                     <span class="token comment">// 选中集合</span>
                    <span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 过滤条件</span>

<span class="token comment">// 反序列化</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面那段查询代码等价于</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>findOne<span class="token punctuation">(</span>{
    address: <span class="token string">&quot;usa&quot;</span>
}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{Name:jack Age:18 Address:usa}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询多个" tabindex="-1"><a class="header-anchor" href="#查询多个" aria-hidden="true">#</a> 查询多个</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Name    <span class="token builtin">string</span> <span class="token string">\`bson:&quot;name&quot;\`</span>
   Age     <span class="token builtin">int</span>    <span class="token string">\`bson:&quot;age&quot;\`</span>
   Address <span class="token builtin">string</span> <span class="token string">\`bson:&quot;address&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User

cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 选中数据库</span>
               <span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 选中集合</span>
               <span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 过滤条件</span>

<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> err <span class="token operator">:=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[{Name:jack Age:18 Address:usa} {Name:mike Age:12 Address:} {Name:jenny Age:14 Address:}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在构造查询条件的时候，也可以使用options</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name    <span class="token builtin">string</span> <span class="token string">\`bson:&quot;name&quot;\`</span>
    Age     <span class="token builtin">int</span>    <span class="token string">\`bson:&quot;age&quot;\`</span>
    Address <span class="token builtin">string</span> <span class="token string">\`bson:&quot;address&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User

find <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
find<span class="token punctuation">.</span><span class="token function">SetSort</span><span class="token punctuation">(</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
find<span class="token punctuation">.</span><span class="token function">SetLimit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">// 选中数据库</span>
                    <span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token comment">// 选中集合</span>
                    <span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> find<span class="token punctuation">)</span> <span class="token comment">// 过滤条件</span>

<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> err <span class="token operator">:=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.users.find({}).sort({age:1}).limit(1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[{Name:mike Age:12 Address:}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="创建文档" tabindex="-1"><a class="header-anchor" href="#创建文档" aria-hidden="true">#</a> 创建文档</h2>`,21),w={href:"https://github.com/mongodb/mongo-go-driver/blob/master/examples/documentation_examples/examples.go#L55",target:"_blank",rel:"noopener noreferrer"},A=e(`<p>下面是创建一个文档的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>one<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> User<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;lili&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span>     <span class="token number">20</span><span class="token punctuation">,</span>
    Address<span class="token punctuation">:</span> <span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>InsertedID<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建成功后会返回文档的ObjectID</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ObjectID(&quot;64c60fa01e2548d9e4de6cf4&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是创建多个文档的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>users <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>User<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span>     <span class="token number">10</span><span class="token punctuation">,</span>
    Address<span class="token punctuation">:</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> User<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span>     <span class="token number">30</span><span class="token punctuation">,</span>
    Address<span class="token punctuation">:</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span>

one<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InsertMany</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> users<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>InsertedIDs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建成功后返回返回一组ObjectID</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[ObjectID(&quot;64c610d5aec2618d6ca0b515&quot;) ObjectID(&quot;64c610d5aec2618d6ca0b516&quot;)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面两段代码就等价于<code>db.users.insertOne</code>和<code>db.users.insertMany</code>。</p><h2 id="更新文档" tabindex="-1"><a class="header-anchor" href="#更新文档" aria-hidden="true">#</a> 更新文档</h2>`,10),P={href:"https://github.com/mongodb/mongo-go-driver/blob/master/examples/documentation_examples/examples.go#L1357",target:"_blank",rel:"noopener noreferrer"},O=e(`<p>下面是更新单个文档的示例，将名为lili人更名为mark</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>upres<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UpdateOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mark&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
       <span class="token punctuation">{</span><span class="token string">&quot;$set&quot;</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
          <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> upres<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span>updateOne<span class="token punctuation">(</span>{
    name: <span class="token string">&quot;lili&quot;</span>
}<span class="token punctuation">,</span> {
    $<span class="token keyword">set</span>: {
        name: <span class="token string">&quot;mark&quot;</span>
    }<span class="token punctuation">,</span>
}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&amp;{MatchedCount:1 ModifiedCount:1 UpsertedCount:0 UpsertedID:&lt;nil&gt;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是更新多个文档的示例，将年龄为10的人地址更新为cn</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>upres<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UpdateMany</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">&quot;$set&quot;</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> upres<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用<code>Update</code>，mongo还提供了<code>Replace</code>，两者的区别在于前者是更新文档字段，后者是直接替换文档。例如下面的代码，就不再需要操作符了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>upres<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReplaceOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
       <span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> upres<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时mongo还提供了<code>FindOneAndUpdate</code>和<code>FindOneAndReplace</code>来获取文档和更新文档。如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>res <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FindOneAndReplace</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
    bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
       <span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> res<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> user User

res<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Name: Age:0 Address:cn}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此操作会先查询文档再进行修改文档。</p><h2 id="删除文档" tabindex="-1"><a class="header-anchor" href="#删除文档" aria-hidden="true">#</a> 删除文档</h2>`,16),N={href:"https://github.com/mongodb/mongo-go-driver/blob/master/examples/documentation_examples/examples.go#L1638",target:"_blank",rel:"noopener noreferrer"},B=e(`<p>下面是删除一个文档的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DeleteOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>DeletedCount<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是删除多个文档的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DeleteMany</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>DeletedCount<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h2>`,5),C={href:"https://github.com/mongodb/mongo-go-driver/blob/master/examples/documentation_examples/examples.go#L2119",target:"_blank",rel:"noopener noreferrer"},M=e(`<p>聚合操作会用到<code>mongo.Pipeline</code>类型，它的本质是<code>[]bson.D</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Pipeline <span class="token punctuation">[</span><span class="token punctuation">]</span>bson<span class="token punctuation">.</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pipline <span class="token operator">:=</span> mongo<span class="token punctuation">.</span>Pipeline<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
       <span class="token punctuation">{</span><span class="token string">&quot;$match&quot;</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
          <span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
       <span class="token punctuation">{</span><span class="token string">&quot;$sort&quot;</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span>
          <span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
aggregate<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> pipline<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User
<span class="token keyword">if</span> err <span class="token operator">:=</span> aggregate<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[{lili 20 uk} {kak 30 uk}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段聚合操作就是匹配所有address为uk的用户，然后按照年龄排序。</p>`,6);function U(I,S){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,r,n("p",null,[s("mongodb文档："),n("a",d,[s("Introduction to MongoDB — MongoDB Manual"),t(a)])]),k,v,n("p",null,[s("开源仓库："),n("a",m,[s("mongodb/mongo-go-driver: The Official Golang driver for MongoDB (github.com)"),t(a)])]),n("p",null,[s("文档地址："),n("a",b,[s("mongodb/mongo-go-driver: The Official Golang driver for MongoDB (github.com)"),t(a)])]),g,n("div",q,[f,h,n("p",null,[s("地址："),n("a",x,[s("mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)"),t(a)])])]),_,n("p",null,[s("官方查询示例："),n("a",y,[s("mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)"),t(a)])]),D,n("p",null,[s("官方创建实例："),n("a",w,[s("mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)"),t(a)])]),A,n("p",null,[s("官方更新示例："),n("a",P,[s("mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)"),t(a)])]),O,n("p",null,[s("官方删除示例："),n("a",N,[s("mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)"),t(a)])]),B,n("p",null,[s("官方聚合示例："),n("a",C,[s("mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)"),t(a)])]),M])}const L=p(u,[["render",U],["__file","MongoDB.html.vue"]]);export{L as default};
