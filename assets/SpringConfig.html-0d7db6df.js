import{_ as n,V as s,W as a,$ as t}from"./framework-8edddef6.js";const p={},e=t(`<h1 id="spring配置文件" tabindex="-1"><a class="header-anchor" href="#spring配置文件" aria-hidden="true">#</a> spring配置文件</h1><h2 id="相关类" tabindex="-1"><a class="header-anchor" href="#相关类" aria-hidden="true">#</a> 相关类</h2><ul><li><code>@Configuration</code>：标注在类上，表示该类是个Full模式的配置类。自Spring 5.2.0版本后它加了个<code>proxyBeanMethods</code>属性来显示控制Full模式还是Lite模式，默认是true表示Full模式。</li><li><code>@Bean</code>：标注在方法上，表示方法生成一个由Spring容器管理的Bean。</li><li><code>ConfigurationClassPostProcessor</code>：用于引导处理@Configuration配置类的后置处理器。注意：它只是<strong>引导处理</strong>，并不是实际处理。</li><li><code>ConfigurationClassUtils</code>：内部工具类。用于判断组件是否是配置类，又或是Full模式/Lite模式，然后在bd元数据里打上标记。它还会处理一件小事：获取@Configuration配置类上标注的@Order排序值并放进bd里。</li><li><code>BeanMethod</code>：内部使用的类。用于封装标注有@Bean注解的方法。</li><li><code>ConfigurationClass</code>：内部使用的类。每一个@Configuration配置类都会被封装为它，内部会包含多个@Bean方法（BeanMethod）。</li><li><code>ConfigurationClassParser</code>：解析@Configuration配置类，最终以ConfigurationClass对象的形式展示，并且填充它：因为一个配置类可以<code>@Import</code>导入另外一个（或者N多个）其它配置类，所以需要填充。</li><li><code>ConfigurationClassBeanDefinitionReader</code>：内部使用的类。读取给定的已经解析好的<code>Set&lt;ConfigurationClass&gt;</code>集合，把里面的bd信息注册到<code>BeanDefinitionRegistry</code>里去（这里决定了bd的有序和无序相关问题）。</li><li><code>ConfigurationClassEnhancer</code>：内部使用的类。配置类增强器，用于对@Configuration类（Full模式）使用CGLIB增强，生成一个代理子类字节码Class对象。</li><li><code>EnhancedConfiguration</code>：被增强器增强过的配置类，都会自动的让实现此接口（实际是个<code>BeanFactoryAware</code>）接口。</li><li><code>SpringNamingPolicy</code>：使用CGLIB生成字节码类名名称生成策略 -&gt; 名称中会有<code>BySpringCGLIB</code>字样。</li><li><code>BeanFactoryAwareMethodInterceptor</code>：CGLIB代理对象拦截器。作用：拦截代理类的<code>setBeanFactory()</code>方法，给对应属性赋值。</li><li><code>BeanMethodInterceptor</code>：CGLIB代理对象拦截器。作用：拦截所有@Bean方法的执行，以支持可以通过直接调用@Bean方法来管理依赖关系（当然也支持<code>FactoryBean</code>模式）。</li></ul><h2 id="configurationclasspostprocessor" tabindex="-1"><a class="header-anchor" href="#configurationclasspostprocessor" aria-hidden="true">#</a> ConfigurationClassPostProcessor</h2><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/11/29/UE3kw3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="配置类解析流程" tabindex="-1"><a class="header-anchor" href="#配置类解析流程" aria-hidden="true">#</a> 配置类解析流程</h3><p><strong>配置类的解析均是交由<code>ConfigurationClassPostProcessor</code>来引导</strong>。在Spring Framework里（非Spring Boot）里，它是<code>BeanDefinitionRegistryPostProcessor</code>处理器的<strong>唯一</strong>实现类，用于引导处理<code>@Configuration</code>配置类。解析入口是<code>postProcessBeanDefinitionRegistry()</code>方法，实际处理委托给了<code>processConfigBeanDefinitions()</code>方法。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/11/30/SvepsB.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="configurationclasspostprocessor-1" tabindex="-1"><a class="header-anchor" href="#configurationclasspostprocessor-1" aria-hidden="true">#</a> ConfigurationClassPostProcessor</h4><p>从注册进来的配置类（可能是Full模式，可能是Lite模式）里进一步派生bean定义。简而言之：收集到所有的<code>BeanDefinition</code>（后简称为bd）存储起来，包括<code>@Import、@Component</code>等等组件。<strong>并且做出标注：是Full模式的还是Lite模式的配置类</strong>（若非配置组件就不标注）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConfigurationClassPostProcessor</span>：

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成一个id，放置后面再重复执行</span>
        <span class="token keyword">int</span> registryId <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 若重复执行  就抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registriesPostProcessed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>registryId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> <span class="token operator">+</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>factoriesPostProcessed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>registryId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> <span class="token operator">+</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 表示此registry里的bd收集动作，已经做了  避免再重复收集此registry</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registriesPostProcessed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 根据配置类，收集到所有的bd信息 并且做出mark标注：是Full模式还是Lite模式，很重要</span>
        <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 根据配置类，收集到所有的bd信息 并且做出mark标注：是Full模式还是Lite模式，很重要
 * Build and validate a configuration model based on the registry of
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Configuration</span></span><span class="token punctuation">}</span> classes.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> configCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 1. 启动时传入的配置类会注册到容器中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">#</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * 2. BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor 里面注册 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">#</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanDefinition</span> beanDef <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token constant">CONFIGURATION_CLASS_ATTRIBUTE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token comment">// Bean 定义已作为配置类进行处理</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> <span class="token operator">+</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 判断是否是配置类
         * 有 @Configuration(proxyBeanMethods=true) full配置类
         * 有 @Configuration(proxyBeanMethods=false) lite配置类
         * 无 @Configuration 但是有  (@Component || @ComponentScan || @Import || @ImportResource || @Bean ) lite配置类
         *
         * 是配置类，还会解析 @Order 注解的值，设置到 BeanDefinition 中。目的是后面配置类排序
         * */</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            configCandidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//如果未找到@Configuration类，请立即返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通过 Order可以排序，升序排序， order越小越靠前。
     * 可以在配置类上标注 @Order，调整配置类的解析顺序。
     * 升序排列。
     * */</span>
    <span class="token comment">// Sort by previously determined @Order value, if applicable</span>
    configCandidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bd1<span class="token punctuation">,</span> bd2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd1<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd2<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//检测通过封闭的应用程序上下文提供的任何自定义 Bean 名称生成策略</span>
    <span class="token class-name">SingletonBeanRegistry</span> sbr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sbr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">)</span> registry<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>localBeanNameGeneratorSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 可以预先往单例池中添加一个 CONFIGURATION_BEAN_NAME_ GENERATOR的 BeanNameGenerator类型的bean</span>
            <span class="token comment">// 可以用来作为扫描得到的Bean和 import导入进来的Bean的 beanName</span>
            <span class="token class-name">BeanNameGenerator</span> generator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanNameGenerator</span><span class="token punctuation">)</span> sbr<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token constant">CONFIGURATION_BEAN_NAME_GENERATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>generator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 解析每个@Configuration类</span>
    <span class="token class-name">ConfigurationClassParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">&gt;</span></span> alreadyParsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token class-name">StartupStep</span> processConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&quot;spring.context.config-classes.parse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 解析配置类，会把每个 BeanDefinitionHolder 解析为 ConfigurationClass
         * 会解析 @Bean、@Component、@ComponentScan、@ComponentScans、@Import、@ImportResource 也就是会解析出配置类里面的配置类。递归解析
         *
         * 解析完 configClasses，结果是：
         *  1. @Bean 标注的方法，  --&gt; beanMethods属性
         *  2. @ImportResource  --&gt; importedResources属性
         *  3. @Import(ImportBeanDefinitionRegistrar.class)  --&gt; importBeanDefinitionRegistrars属性，后面会回调方法
         *  4. @Import(ImportSelector.class) --&gt; 执行 ImportSelector#selectImports，返回值都解析成配置类
         *  5. @Import() --&gt; 解析成configClass
         *  6. @Import(DeferredImportSelector.class) --&gt; deferredImportSelectorHandler
         *
         *  注：
         *  1. 使用 @Import 导入的类一定是配置类
         *  2. @Import(DeferredImportSelector.class) 会延时解析，SpringBoot 的自动转配 就是通过这个机制实现的。通过延时解析保证 @ConditionalOnXx 注解能正确判断
         */</span>
        parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// AppConfig.class ---&gt; BeanDefinition</span>
        parser<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// configClasses 相当于就是解析之后的结果</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">&gt;</span></span> configClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getConfigurationClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configClasses<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>alreadyParsed<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Read the model and create bean definitions based on its content</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinitionReader</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         *  【@Bean 第三步】因为解析完的 configClasses 里面会记录 @Bean标注的方法，这个方法被称为 factoryMethod
         *  会在下面的方法注册成 beanDefinition
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        alreadyParsed<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        processConfig<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;classCount&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        candidates<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newCandidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> oldCandidateNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> alreadyParsedClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configurationClass <span class="token operator">:</span> alreadyParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> candidateName <span class="token operator">:</span> newCandidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldCandidateNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">BeanDefinition</span> bd <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span>
                            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            candidateNames <span class="token operator">=</span> newCandidateNames<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>candidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 注册 记录了@Import(A.class）的信息到BeanFactory中，在这里会用到
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ImportAwareBeanPostProcessor</span><span class="token punctuation">#</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sbr<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span><span class="token constant">IMPORT_REGISTRY_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sbr<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">IMPORT_REGISTRY_BEAN_NAME</span><span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory <span class="token keyword">instanceof</span> <span class="token class-name">CachingMetadataReaderFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span>
        <span class="token comment">// for a shared cache since it&#39;ll be cleared by the ApplicationContext.</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CachingMetadataReaderFactory</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configurationclassutils" tabindex="-1"><a class="header-anchor" href="#configurationclassutils" aria-hidden="true">#</a> ConfigurationClassUtils</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConfigurationClassUtils</span><span class="token operator">:</span>

<span class="token doc-comment comment">/**
*  检查给定的 bean 定义是否是配置类的候选者
 * （或在配置/组件类中声明的嵌套组件类，
 * 也要自动注册），并相应地标记它。
 * <span class="token keyword">@param</span> <span class="token parameter">beanDef</span> 要检查的 bean 定义
 * <span class="token keyword">@param</span> <span class="token parameter">metadataReaderFactory</span> 调用方当前使用的工厂
 * <span class="token keyword">@return</span> 候选人是否有资格成为（任何类型的）配置类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>
       <span class="token class-name">BeanDefinition</span> beanDef<span class="token punctuation">,</span> <span class="token class-name">MetadataReaderFactory</span> metadataReaderFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> className <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>className <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> beanDef<span class="token punctuation">.</span><span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span> <span class="token operator">&amp;&amp;</span>
          className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// Can reuse the pre-parsed metadata from the given BeanDefinition...</span>
       metadata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// Check already loaded Class if present...</span>
       <span class="token comment">// since we possibly can&#39;t even load the class file for this Class.</span>
       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>
             <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>
             <span class="token class-name">AopInfrastructureBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>
             <span class="token class-name">EventListenerFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       metadata <span class="token operator">=</span> <span class="token class-name">AnnotationMetadata</span><span class="token punctuation">.</span><span class="token function">introspect</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token class-name">MetadataReader</span> metadataReader <span class="token operator">=</span> metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
          metadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Could not find class file for introspecting configuration annotations: &quot;</span> <span class="token operator">+</span>
                   className<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> config <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;proxyBeanMethods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// full 配置类</span>
       beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">CONFIGURATION_CLASS_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token constant">CONFIGURATION_CLASS_FULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// lite 配置类</span>
       beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">CONFIGURATION_CLASS_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token constant">CONFIGURATION_CLASS_LITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// It&#39;s a full or lite configuration candidate... Let&#39;s determine the order value, if any.</span>
    <span class="token class-name">Integer</span> order <span class="token operator">=</span> <span class="token function">getOrder</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 设置排序值</span>
       beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">ORDER_ATTRIBUTE</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configurationclassparser" tabindex="-1"><a class="header-anchor" href="#configurationclassparser" aria-hidden="true">#</a> ConfigurationClassParser</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConfigurationClassParser</span><span class="token operator">:</span> 

<span class="token doc-comment comment">/**
 * 配置类解析
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> configCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionHolder</span> holder <span class="token operator">:</span> configCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 加载完所有的配置类里面的信息。
         * 这里会解析的内容是：
         * 1. @Component
         *      1.1 获取所有的成员内部类 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processMemberClasses</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">SourceClass</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      1.2 判断是否是配置类 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">#</span><span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      1.3 递归解析 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         * 2. @PropertySources
         *
         * 3. @ComponentScans、@ComponentScan
         *      3.1 扫描指定包的内容，并注册到IOC容器中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ComponentScanAnnotationParser</span><span class="token punctuation">#</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      3.2 判断是否是配置类 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">#</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">,</span> <span class="token class-name">MetadataReaderFactory</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      3.3 是配置类，就解析配置类 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         * 4. @Import(非DeferredImportSelector的类)    --&gt; 递归调用 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      处理 @Import(selector.class)，最终的结果都是按照配置类来解析 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processImports</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">SourceClass</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      4.1 selector instanceof DeferredImportSelector 。先存起来，这种类型需要延时解析 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DeferredImportSelectorHandler</span><span class="token punctuation">#</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      4.2 selector instanceof ImportSelector。递归解析Import <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processImports</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">SourceClass</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      4.3 select instanceof ImportBeanDefinitionRegistrar。设置为 configClass 的属性 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClass</span><span class="token punctuation">#</span><span class="token function">addImportBeanDefinitionRegistrar</span><span class="token punctuation">(</span><span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">AnnotationMetadata</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      4.4 兜底方法,这个就是关键，通过这就能看出 所有@Import导入的类，都会被解析成配置类 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         *      可以发现 @Import(DeferredImportSelector.class) 没有立即解析，而是先存起来 带所有配置类解析完之后。在遍历 回调接口方法，递归执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processImports</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">SourceClass</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      虽然 @Import(ImportBeanDefinitionRegistrar.class) 也是存起来，但是他是作为 configClass的属性，后面注册BeanDefinition的时候，直接回调方法。不像
         *          @Import(DeferredImportSelector.class) 还会解析回调的结果
         *
         * 6. @ImportResource
         *      设置为 configClass 的属性 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClass</span><span class="token punctuation">#</span><span class="token function">addImportedResource</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         * 7. @Bean
         *      设置为 configClass 的属性 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClass</span><span class="token punctuation">#</span><span class="token function">addBeanMethod</span><span class="token punctuation">(</span><span class="token class-name">BeanMethod</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         * 8. 有父类，且父类含有@Bean方法
         *      8.1 knownSuperclasses.put(superclass, configClass);  记录父类被加载了，避免多个子类是配置类的情况 其父类配置类会被解析多次的问题
         *      8.2 返回父类
         *      8.2 因为是 do...while 执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">doProcessConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">SourceClass</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *          所以实现了递归解析配置类的父类
         *      8.3 最终解析的 @Bean 会添加到子类配置类的属性中。比如：
         *          @Configuration
         *          class A extends C <span class="token punctuation">{</span><span class="token punctuation">}</span>
         *          @Configuration
         *          class B extends C <span class="token punctuation">{</span><span class="token punctuation">}</span>
         *          class C <span class="token punctuation">{</span>
         *              @Bean
         *              public A bean()<span class="token punctuation">{</span>
         *                  return new A();
         *              <span class="token punctuation">}</span>
         *          <span class="token punctuation">}</span>
         *
         *          假设 A 比 B 先解析,也就是执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">#</span><span class="token function">processConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *          那么 bean 是属于 A配置类的，不是属于B配置类的
         *
         * */</span>
        <span class="token class-name">BeanDefinition</span> bd <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bd <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> bd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bd <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> bd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> bd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">parse</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;Failed to parse configuration class [&quot;</span> <span class="token operator">+</span> bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 开始解析 @Import(DeferredImportSelector 的实现类)
     * SpringBoot 的自动装配就是通过实现这个接口实现的，目的就是延时加载。因为很多 AutoConfigurationClass 会使用 @ConditionOnMissXx 来判断是否注入bean
     * 所以需要延时加载，才能正确的判断
     * */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectorHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfigurationClass</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_EXCLUSION_FILTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  			<span class="token comment">// 根据 @Conditional 确定是否应跳过。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ConfigurationPhase</span><span class="token punctuation">.</span><span class="token constant">PARSE_CONFIGURATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">ConfigurationClass</span> existingClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configurationClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 该配置类是通过@{@link Import}注册的，或者是由于嵌套在另一个配置类中而自动注册的(比如扫描到的成员内部类是配置类的情况)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isImported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 该配置类是通过@{@link Import}注册的，或者是由于嵌套在另一个配置类中而自动注册的(比如扫描到的成员内部类是配置类的情况)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>existingClass<span class="token punctuation">.</span><span class="token function">isImported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    existingClass<span class="token punctuation">.</span><span class="token function">mergeImportedBy</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 否则忽略新导入的配置类;现有的非导入类将覆盖它。</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 找到显式 Bean 定义，可能替换了导入。让我们删除旧的，然后使用新的。</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>configurationClasses<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>configClass<span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 递归处理配置类及其超类层次结构。</span>
        <span class="token class-name">SourceClass</span> sourceClass <span class="token operator">=</span> <span class="token function">asSourceClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            sourceClass <span class="token operator">=</span> <span class="token function">doProcessConfigurationClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sourceClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>configurationClasses<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>





   <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">configClass</span> 正在构建的配置类
     * <span class="token keyword">@param</span> <span class="token parameter">sourceClass</span> 一个源类
     * <span class="token keyword">@return</span> 超类，如果未找到或之前未处理，则为 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">SourceClass</span> <span class="token function">doProcessConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">,</span> <span class="token class-name">SourceClass</span> sourceClass<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 配置类有 @Component</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理内部类 是否有配置类</span>
            <span class="token comment">// Recursively process any member (nested) classes first</span>
            <span class="token function">processMemberClasses</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 就是拿到 @PropertySources、@PropertySource 注解</span>
        <span class="token comment">// Process any @PropertySource annotations</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> propertySource <span class="token operator">:</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">attributesForRepeatable</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PropertySources</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>PropertySource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 就是将注解对应的资源文件 构造成 PropertySource 类型的对象，并将对象存到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractEnvironment</span><span class="token punctuation">#</span><span class="token field">propertySources</span></span><span class="token punctuation">}</span> 属性中。
                 *
                 * 使用 \`context.getEnvironment().getProperty(&quot;name&quot;)\` 就能读到 资源文件 中定义的内容了
                 * */</span>
                <span class="token function">processPropertySource</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Ignoring @PropertySource annotation on [&quot;</span> <span class="token operator">+</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 会进行扫描，得到的 BeanDefinition会注册到 Spring容器中，并且会检查是不是配置类并进行解析</span>
        <span class="token comment">// Process any @ComponentScan annotations</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">&gt;</span></span> componentScans <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">attributesForRepeatable</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ComponentScans</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>componentScans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ConfigurationPhase</span><span class="token punctuation">.</span><span class="token constant">REGISTER_BEAN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> componentScan <span class="token operator">:</span> componentScans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里就会进行扫描，得到的 BeanDefinition会注册到 Spring容器中</span>
                <span class="token comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span>
                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> scannedBeanDefinitions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">,</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionHolder</span> holder <span class="token operator">:</span> scannedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">BeanDefinition</span> bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bdCand <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        bdCand <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token doc-comment comment">/**
                     * 扫描到的bean，只要有 @Configuration || @Component || @ComponentScan || @Import || @ImportResource || @Bean 方法
                     * 进进行配置类的解析
                     * */</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 扫描的结果是配置类，就按照解析配置类的规则解析</span>
                        <span class="token function">parse</span><span class="token punctuation">(</span>bdCand<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 处理 @Import
         *
         * getImports(sourceClass) 就是拿到类上所有的@Import注解(会递归找)
         * */</span>
        <span class="token comment">// Process any @Import annotations</span>
        <span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> <span class="token function">getImports</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Process any @ImportResource annotations</span>
        <span class="token class-name">AnnotationAttributes</span> importResource <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ImportResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>importResource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;locations&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">&gt;</span></span> readerClass <span class="token operator">=</span> importResource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">&quot;reader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> resolvedResource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                configClass<span class="token punctuation">.</span><span class="token function">addImportedResource</span><span class="token punctuation">(</span>resolvedResource<span class="token punctuation">,</span> readerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         *  【@Bean 第一步】处理附加的 @Bean 方法，在这里会把@Bean 标记的方法，先存起来
         * */</span>
        <span class="token comment">// Process individual @Bean methods</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodMetadata</span><span class="token punctuation">&gt;</span></span> beanMethods <span class="token operator">=</span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span>sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodMetadata</span> methodMetadata <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            configClass<span class="token punctuation">.</span><span class="token function">addBeanMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanMethod</span><span class="token punctuation">(</span>methodMetadata<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 就是将 sourceClass 的接口递归拿到 @Bean的方法，将方法信息记录到 configClass 中
         * */</span>
        <span class="token comment">// Process default methods on interfaces</span>
        <span class="token function">processInterfaces</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         *  【@Bean 第二步】针对父类里面有@Bean的方法，会把已经处理过的父类 存到 knownSuperclasses 这个Map中，避免重复处理
         *  所以但我们使用SpringBoot+SpringMVC的时，注册多个 WebMvcConfigurationSupport 子类时候 发现只有一个子类会生效。就是因为这个机制保证了父类里面的@Bean方法只会被注册一次
         * */</span>
        <span class="token comment">// Process superclass, if any</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">hasSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> superclass <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getSuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>superclass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>superclass<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>knownSuperclasses<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>superclass<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 返回父类 递归解析</span>
                <span class="token comment">// Superclass found, return its annotation metadata and recurse</span>
                <span class="token keyword">return</span> sourceClass<span class="token punctuation">.</span><span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// No superclass -&gt; processing is complete</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


 <span class="token doc-comment comment">/**
	 * 注册恰好是配置类本身的成员（嵌套）类。    
	 */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processMemberClasses</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">,</span> <span class="token class-name">SourceClass</span> sourceClass<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">&gt;</span></span> memberClasses <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMemberClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>memberClasses<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">&gt;</span></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>memberClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SourceClass</span> memberClass <span class="token operator">:</span> memberClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 内部类 是 配置类</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span>memberClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>memberClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 记录一下</span>
                    candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">OrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SourceClass</span> candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CircularImportProblem</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token doc-comment comment">/**
                         * 解析配置类。
                         * 记录信息：candidate 的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClass</span><span class="token punctuation">#</span><span class="token field">importedBy</span></span><span class="token punctuation">}</span> 是  configClass
                         * */</span>
                        <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">asConfigClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



 <span class="token doc-comment comment">/**
    * 处理给定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">的<span class="token annotation punctuation">@PropertySource</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>注释元数据。
     *
     * <span class="token keyword">@param</span> 找到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token annotation punctuation">@PropertySource</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>注释的 propertySource 元数据
     * 如果加载属性源失败，则@throws <span class="token reference"><span class="token class-name">IOException</span></span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPropertySource</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> propertySource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// name</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 编码</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            encoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 要加载的属性文件</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locations <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>locations<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;At least one @PropertySource(value) location is required&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 忽略资源找不到</span>
        <span class="token keyword">boolean</span> ignoreResourceNotFound <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;ignoreResourceNotFound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 拿到 PropertySourceFactory</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PropertySourceFactory</span><span class="token punctuation">&gt;</span></span> factoryClass <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">&quot;factory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 注：默认是 DefaultPropertySourceFactory ，否则就反射实例化得到 PropertySourceFactory 。
         *     DefaultPropertySourceFactory 不支持解析yml格式的内容，所以要想导入 yml 格式的内容需要自定义。
         *
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">YamlPropertiesFactoryBean</span><span class="token punctuation">#</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 这个是Spring提供的，可解析yml内容成Properties对象，有了Properties对象
         * 就可以构造出 PropertySource 对象
         * */</span>
        <span class="token class-name">PropertySourceFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>factoryClass
                <span class="token operator">==</span> <span class="token class-name">PropertySourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">?</span> <span class="token constant">DEFAULT_PROPERTY_SOURCE_FACTORY</span> <span class="token operator">:</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>factoryClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历 locations</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> location <span class="token operator">:</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 解析占位符，也就是说可以这么写 @PropertySource(&quot;$<span class="token punctuation">{</span>prop_file<span class="token punctuation">}</span>&quot;)
                 * */</span>
                <span class="token class-name">String</span> resolvedLocation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token doc-comment comment">/**
                 * 获取资源文件，这里会处理 classpath: 前缀
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">GenericApplicationContext</span><span class="token punctuation">#</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">#</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 * */</span>
                <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>resolvedLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token doc-comment comment">/**
                 * 一个 location 对应一个 PropertySource 然后记录到环境变量中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractEnvironment</span><span class="token punctuation">#</span><span class="token field">propertySources</span></span><span class="token punctuation">}</span>
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DefaultPropertySourceFactory</span><span class="token punctuation">#</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 *
                 * 注：
                 *  1. name是null，就会根据 EncodedResource 生成名字，默认就是资源文件的路径
                 *  2. 添加的特点是后添加会放到前面
                 * */</span>
                <span class="token function">addPropertySource</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> <span class="token class-name">FileNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">UnknownHostException</span> <span class="token operator">|</span> <span class="token class-name">SocketException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Placeholders not resolvable or resource not found when trying to open it</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreResourceNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Properties location [&quot;</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">&quot;] not resolvable: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addPropertySource</span><span class="token punctuation">(</span><span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propertySource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> propertySource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MutablePropertySources</span> propertySources <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 已经添加过了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 已经添加过了，那就对已有的属性值进行扩展</span>
            <span class="token comment">// We&#39;ve already added a version, we need to extend it</span>
            <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> existing <span class="token operator">=</span> propertySources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 拿到新加的 PropertySource</span>
                <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> newSource <span class="token operator">=</span> <span class="token punctuation">(</span>propertySource <span class="token keyword">instanceof</span> <span class="token class-name">ResourcePropertySource</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourcePropertySource</span><span class="token punctuation">)</span> propertySource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withResourceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token keyword">instanceof</span> <span class="token class-name">CompositePropertySource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token doc-comment comment">/**
                     * 将新添加的扩展到 现有的里面，newSource 放到集合的前面，从而保证优先使用
                     * */</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CompositePropertySource</span><span class="token punctuation">)</span> existing<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFirstPropertySource</span><span class="token punctuation">(</span>newSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 将现有的 换成 CompositePropertySource 类型的对象</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token keyword">instanceof</span> <span class="token class-name">ResourcePropertySource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        existing <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourcePropertySource</span><span class="token punctuation">)</span> existing<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withResourceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">CompositePropertySource</span> composite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositePropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// newSource 放到集合的前面，从而保证优先使用</span>
                    composite<span class="token punctuation">.</span><span class="token function">addPropertySource</span><span class="token punctuation">(</span>newSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    composite<span class="token punctuation">.</span><span class="token function">addPropertySource</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 替换掉</span>
                    propertySources<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> composite<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 结束</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 添加</span>
            propertySources<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 拿到最后一个</span>
            <span class="token class-name">String</span> firstProcessed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 放到最后一个之前。也就是说 新添加的的会放在前面</span>
            propertySources<span class="token punctuation">.</span><span class="token function">addBefore</span><span class="token punctuation">(</span>firstProcessed<span class="token punctuation">,</span> propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 记录</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



 <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processImports</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">,</span> <span class="token class-name">SourceClass</span> currentSourceClass<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">&gt;</span></span> importCandidates<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exclusionFilter<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkForCircularImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>importCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>checkForCircularImports <span class="token operator">&amp;&amp;</span> <span class="token function">isChainedImportOnStack</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CircularImportProblem</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 遍历所有 @Import的值</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SourceClass</span> candidate <span class="token operator">:</span> importCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span><span class="token class-name">ImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span>
                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> candidateClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">ImportSelector</span> selector <span class="token operator">=</span> <span class="token class-name">ParserStrategyUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>candidateClass<span class="token punctuation">,</span> <span class="token class-name">ImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> selectorFilter <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">getExclusionFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorFilter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            exclusionFilter <span class="token operator">=</span> exclusionFilter<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>selectorFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token keyword">instanceof</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectorHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">DeferredImportSelector</span><span class="token punctuation">)</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> importClassNames <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectImports</span><span class="token punctuation">(</span>currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SourceClass</span><span class="token punctuation">&gt;</span></span> importSourceClasses <span class="token operator">=</span> <span class="token function">asSourceClasses</span><span class="token punctuation">(</span>importClassNames<span class="token punctuation">,</span> exclusionFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">processImports</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> currentSourceClass<span class="token punctuation">,</span> importSourceClasses<span class="token punctuation">,</span> exclusionFilter<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span><span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span>
                        <span class="token comment">// delegate to it to register additional bean definitions</span>
                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> candidateClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">ImportBeanDefinitionRegistrar</span> registrar <span class="token operator">=</span> <span class="token class-name">ParserStrategyUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>candidateClass<span class="token punctuation">,</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        configClass<span class="token punctuation">.</span><span class="token function">addImportBeanDefinitionRegistrar</span><span class="token punctuation">(</span>registrar<span class="token punctuation">,</span> currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token doc-comment comment">/**
                         * 兜底，记录导入的类和其对应的元数据
                         * 这个元数据是在 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassPostProcessor</span><span class="token punctuation">.</span><span class="token class-name">ImportAwareBeanPostProcessor</span><span class="token punctuation">#</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 会用到
                         *
                         * 比如：@Import(A.class)，是给A.class作为key，value就是元数据
                         * */</span>
                        <span class="token comment">// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span>
                        <span class="token comment">// process it as an @Configuration class</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">registerImport</span><span class="token punctuation">(</span>currentSourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candidate<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token doc-comment comment">/**
                         * 解析配置类。
                         * 记录信息：candidate 的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClass</span><span class="token punctuation">#</span><span class="token field">importedBy</span></span><span class="token punctuation">}</span> 是  configClass
                         * */</span>
                        <span class="token function">processConfigurationClass</span><span class="token punctuation">(</span>candidate<span class="token punctuation">.</span><span class="token function">asConfigClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">,</span> exclusionFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;Failed to process import candidates for configuration class [&quot;</span> <span class="token operator">+</span> configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>importStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


 <span class="token doc-comment comment">/**
	* 检索所有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token annotation punctuation">@Bean</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>方法的元数据。
	*/</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodMetadata</span><span class="token punctuation">&gt;</span></span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span><span class="token class-name">SourceClass</span> sourceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationMetadata</span> original <span class="token operator">=</span> sourceClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodMetadata</span><span class="token punctuation">&gt;</span></span> beanMethods <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span><span class="token class-name">Bean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> original <span class="token keyword">instanceof</span> <span class="token class-name">StandardAnnotationMetadata</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Try reading the class file via ASM for deterministic declaration order...</span>
            <span class="token comment">// Unfortunately, the JVM&#39;s standard reflection returns methods in arbitrary</span>
            <span class="token comment">// order, even between different runs of the same application on the same JVM.</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">AnnotationMetadata</span> asm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodMetadata</span><span class="token punctuation">&gt;</span></span> asmMethods <span class="token operator">=</span> asm<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span><span class="token class-name">Bean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>asmMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodMetadata</span><span class="token punctuation">&gt;</span></span> selectedMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>asmMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodMetadata</span> asmMethod <span class="token operator">:</span> asmMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodMetadata</span> beanMethod <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>asmMethod<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                selectedMethods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> beanMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// All reflection-detected methods found in ASM method set -&gt; proceed</span>
                        beanMethods <span class="token operator">=</span> selectedMethods<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read class file via ASM for determining @Bean method order&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// No worries, let&#39;s continue with the reflection metadata we started with...</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> beanMethods<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
     * 在配置类实现的接口上注册默认方法。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processInterfaces</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">,</span> <span class="token class-name">SourceClass</span> sourceClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历接口</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SourceClass</span> ifc <span class="token operator">:</span> sourceClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 接口中有@Bean的方法</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodMetadata</span><span class="token punctuation">&gt;</span></span> beanMethods <span class="token operator">=</span> <span class="token function">retrieveBeanMethodMetadata</span><span class="token punctuation">(</span>ifc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodMetadata</span> methodMetadata <span class="token operator">:</span> beanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 不是抽象方法，才记录到 configClass 中</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>methodMetadata<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// A default method or other concrete method on a Java 8+ interface...</span>
                    configClass<span class="token punctuation">.</span><span class="token function">addBeanMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanMethod</span><span class="token punctuation">(</span>methodMetadata<span class="token punctuation">,</span> configClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 递归处理接口的接口</span>
            <span class="token function">processInterfaces</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> ifc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="componentscanannotationparser" tabindex="-1"><a class="header-anchor" href="#componentscanannotationparser" aria-hidden="true">#</a> ComponentScanAnnotationParser</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ComponentScanAnnotationParser</span><span class="token operator">:</span>

<span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> componentScan<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> declaringClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathBeanDefinitionScanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">,</span> componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;useDefaultFilters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token punctuation">&gt;</span></span> generatorClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">&quot;nameGenerator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> useInheritedGenerator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanNameGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> generatorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 默认为 AnnotationBeanNameGenerator</span>
    scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span>useInheritedGenerator <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">:</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>generatorClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ScopedProxyMode</span> scopedProxyMode <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">&quot;scopedProxy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedProxyMode <span class="token operator">!=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scanner<span class="token punctuation">.</span><span class="token function">setScopedProxyMode</span><span class="token punctuation">(</span>scopedProxyMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token punctuation">&gt;</span></span> resolverClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">&quot;scopeResolver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">setScopeMetadataResolver</span><span class="token punctuation">(</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>resolverClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    scanner<span class="token punctuation">.</span><span class="token function">setResourcePattern</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;resourcePattern&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">&quot;includeFilters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeFilter</span> typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">&quot;excludeFilters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeFilter</span> typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> lazyInit <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;lazyInit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scanner<span class="token punctuation">.</span><span class="token function">getBeanDefinitionDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> basePackagesArray <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;basePackages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> pkg <span class="token operator">:</span> basePackagesArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokenized <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span><span class="token constant">CONFIG_LOCATION_DELIMITERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> tokenized<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">&quot;basePackageClasses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>basePackages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractTypeHierarchyTraversingFilter</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">matchClassName</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> declaringClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


   <span class="token doc-comment comment">/**
     * 包扫描 BeanDefinition
     * 在指定的基础包中执行扫描，
     * 返回已注册的 Bean 定义。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>此方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>不<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>注册注解配置处理器
     * 而是将此留给调用方。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">basePackages</span> the packages to check for annotated classes
     * <span class="token keyword">@return</span> set of beans registered if any for tooling registration purposes (never <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>)
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> <span class="token function">doScan</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">&quot;At least one base package must be specified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建bean定义的 holder对象用于保存扫描后生成的bean定义对象</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 循环我们的包路径集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 查找符合条件的 bean</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取 @Scope 的信息</span>
                <span class="token class-name">ScopeMetadata</span> scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                candidate<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 设置beanName</span>
                <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理 @Autowired 相关的</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">postProcessBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 处理jsr250相关的组件</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 解析 @Lazy、@Primary、@DependsOn、@Role、@Description</span>
                    <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 检查 Spring 容器中是否已经存在该 beanName</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token doc-comment comment">/**
                     * 针对 @Scope 进行处理，只要不是 @Scope(proxyMode = ScopedProxyMode.NO | DEFAULT) 就做额外处理。
                     * 具体的处理逻辑是 额外注册一个 BeanDefinition 记录的是原始BeanDefinition，其beanName是 \`scopedTarget. + 当前beanName\`
                     * 然后返回的是 处理后的BeanDefinition，其实就是修改 beanClass 为 ScopedProxyFactoryBean 这个类型
                     *
                     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ScopedProxyUtils</span><span class="token punctuation">#</span><span class="token function">createScopedProxy</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                     * */</span>
                    definitionHolder <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    beanDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 注册到 IOC 容器中</span>
                    <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configurationclassbeandefinitionreader" tabindex="-1"><a class="header-anchor" href="#configurationclassbeandefinitionreader" aria-hidden="true">#</a> ConfigurationClassBeanDefinitionReader</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

<span class="token doc-comment comment">/**
 *读取 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">configurationModel</span></span><span class="token punctuation">}</span>，注册 Bean 定义
 * 根据注册表的内容。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurationClass</span><span class="token punctuation">&gt;</span></span> configurationModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TrackedConditionEvaluator</span> trackedConditionEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackedConditionEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass <span class="token operator">:</span> configurationModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">loadBeanDefinitionsForConfigurationClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> trackedConditionEvaluator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 读取特定的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClass</span></span><span class="token punctuation">}</span>，注册 Bean 定义
 * 用于类本身及其所有 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Bean</span></span><span class="token punctuation">}</span> 方法。
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitionsForConfigurationClass</span><span class="token punctuation">(</span>
        <span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">,</span> <span class="token class-name">TrackedConditionEvaluator</span> trackedConditionEvaluator<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 会进行 @Conditional 校验，应该跳过 就不注册到BeanDefinitionMap了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trackedConditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> configClass<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>importRegistry<span class="token punctuation">.</span><span class="token function">removeImportingClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 是通过 @Import 导入的类,或者是成员内部类是配置类的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isImported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 这些配置类比较特殊，还没有注册到BeanFactory中，所以这一步是将这种配置到注册到BeanFactory
         * */</span>
        <span class="token function">registerBeanDefinitionForImportedConfigurationClass</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanMethod</span> beanMethod <span class="token operator">:</span> configClass<span class="token punctuation">.</span><span class="token function">getBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         *  【@Bean 第四步】将配置类里面的@Bean方法，解析成beanDefinition，然后注册到 beanDefinitionMap 中
         * */</span>
        <span class="token function">loadBeanDefinitionsForBeanMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 加载 @ImportResource
     * 会使用  XmlBeanDefinitionReader 进行读取和解析
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">#</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">#</span><span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">InputSource</span><span class="token punctuation">,</span> <span class="token class-name">Resource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token function">loadBeanDefinitionsFromImportedResources</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getImportedResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     *  回调 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">#</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">,</span> <span class="token class-name">BeanNameGenerator</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *  ioc 容器已经作为入参传入了，你想做啥任你开心
     * */</span>
    <span class="token function">loadBeanDefinitionsFromRegistrars</span><span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">getImportBeanDefinitionRegistrars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



		<span class="token doc-comment comment">/**
     * 将 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Configuration</span></span><span class="token punctuation">}</span> 类本身注册为 Bean 定义。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitionForImportedConfigurationClass</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClass</span> configClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationMetadata</span> metadata <span class="token operator">=</span> configClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AnnotatedGenericBeanDefinition</span> configBeanDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 拿到 @Scope 信息</span>
        <span class="token class-name">ScopeMetadata</span> scopeMetadata <span class="token operator">=</span> scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>configBeanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
        configBeanDef<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> configBeanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>configBeanDef<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 就是将通用的注解值 设置到 BeanDefinition中</span>
        <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>configBeanDef<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>configBeanDef<span class="token punctuation">,</span> configBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 看看是否需要做 额外处理，和这里是一样的逻辑
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">#</span><span class="token function">doScan</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        definitionHolder <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configClass<span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>configBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Registered bean definition for imported class &#39;&quot;</span> <span class="token operator">+</span> configBeanName <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置类增强流程" tabindex="-1"><a class="header-anchor" href="#配置类增强流程" aria-hidden="true">#</a> 配置类增强流程</h3><p>如果一个配置类是Full模式，那么它就需要被CGLIB字节码增强。</p><p>增强动作委托给<code>enhanceConfigurationClasses(beanFactory)</code>去完成。</p><p>如果是full配置类会使用Cglib生成代理类，然后将代理类覆盖掉原来BeanDefinition记录的beanClass。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/11/30/QphOeo.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/11/30/VivE1G.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="configurationclasspostprocessor-2" tabindex="-1"><a class="header-anchor" href="#configurationclasspostprocessor-2" aria-hidden="true">#</a> ConfigurationClassPostProcessor</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 准备用于在运行时处理 Bean 请求的配置类
 * 将它们替换为 CGLIB 增强的子类。
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> factoryId <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 防止重复处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>factoriesPostProcessed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>factoryId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>factoriesPostProcessed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在执行postProcessBeanDefinitionRegistry方法的时就已经将</span>
    <span class="token comment">// 这个id添加到registriesPostProcessed集合中了</span>
    <span class="token comment">// 所以到这里就不会再重复执行配置类的解析了（解析@Import、@Bean等）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>registriesPostProcessed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>factoryId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// BeanDefinitionRegistryPostProcessor 钩子显然不受支持...此时只需延迟调用 processConfigurationClasses。</span>
        <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 增强配置类class
     */</span>
    <span class="token function">enhanceConfigurationClasses</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token doc-comment comment">/**
     * 添加一个后置处理器，用来处理 ImportAware接口、给full配置类设置属性
     * */</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImportAwareBeanPostProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



 <span class="token doc-comment comment">/**
	 * 这里就是区别 full配置类 和 lite配置类的地方了。如果是full配置类会使用Cglib生成代理类，然后将代理类覆盖掉原来BeanDefinition记录的beanClass
     * 对 BeanFactory 进行后处理以搜索配置类 BeanDefinitions;
     * 然后，任何候选项都会通过 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassEnhancer</span></span><span class="token punctuation">}</span> 进行增强。
     * 候选状态由 BeanDefinition 属性元数据确定。
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ConfigurationClassEnhancer</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enhanceConfigurationClasses</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StartupStep</span> enhanceConfigClasses <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&quot;spring.context.config-classes.enhance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录full配置类</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">&gt;</span></span> configBeanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">BeanDefinition</span> beanDef <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> configClassAttr <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token constant">CONFIGURATION_CLASS_ATTRIBUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">MethodMetadata</span> methodMetadata <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AnnotatedBeanDefinition</span> annotatedBeanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">;</span>
                annotationMetadata <span class="token operator">=</span> annotatedBeanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                methodMetadata <span class="token operator">=</span> annotatedBeanDefinition<span class="token punctuation">.</span><span class="token function">getFactoryMethodMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token doc-comment comment">/**
             * 在这里标记是full配置类还是lite配置类 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">#</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">,</span> <span class="token class-name">MetadataReaderFactory</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>configClassAttr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> methodMetadata <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Configuration class (full or lite) or a configuration-derived @Bean method</span>
                <span class="token comment">// -&gt; eagerly resolve bean class at this point, unless it&#39;s a &#39;lite&#39; configuration</span>
                <span class="token comment">// or component class without @Bean methods.</span>
                <span class="token class-name">AbstractBeanDefinition</span> abd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>abd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 是 lite配置类 但是没有 @Bean方法</span>
                    <span class="token keyword">boolean</span> liteConfigurationCandidateWithoutBeanMethods <span class="token operator">=</span> <span class="token punctuation">(</span>
                            <span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token constant">CONFIGURATION_CLASS_LITE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>configClassAttr<span class="token punctuation">)</span>
                                    <span class="token operator">&amp;&amp;</span> annotationMetadata <span class="token operator">!=</span> <span class="token keyword">null</span>
                                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token function">hasBeanMethods</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>liteConfigurationCandidateWithoutBeanMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 记录</span>
                            abd<span class="token punctuation">.</span><span class="token function">resolveBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                                    <span class="token string">&quot;Cannot load configuration class: &quot;</span> <span class="token operator">+</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 是 full 配置类</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationClassUtils</span><span class="token punctuation">.</span><span class="token constant">CONFIGURATION_CLASS_FULL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>configClassAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot enhance @Configuration bean definition &#39;&quot;</span> <span class="token operator">+</span> beanName
                            <span class="token operator">+</span> <span class="token string">&quot;&#39; since it is not stored in an AbstractBeanDefinition subclass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot enhance @Configuration bean definition &#39;&quot;</span> <span class="token operator">+</span> beanName
                            <span class="token operator">+</span> <span class="token string">&quot;&#39; since its singleton instance has been created too early. The typical cause &quot;</span>
                            <span class="token operator">+</span> <span class="token string">&quot;is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor &quot;</span>
                            <span class="token operator">+</span> <span class="token string">&quot;return type: Consider declaring such methods as &#39;static&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 记录</span>
                configBeanDefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configBeanDefs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">NativeDetector</span><span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// nothing to enhance -&gt; return immediately</span>
            enhanceConfigClasses<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 这里就是遍历所有的 full配置类，使用cglib生成代理类的class</span>
        <span class="token class-name">ConfigurationClassEnhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> configBeanDefs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AbstractBeanDefinition</span> beanDef <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// If a @Configuration class gets proxied, always proxy the target class</span>
            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">AutoProxyUtils</span><span class="token punctuation">.</span><span class="token constant">PRESERVE_TARGET_CLASS_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Set enhanced subclass of the user-specified bean class</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configClass <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * 这里就是使用cglib生成代理类
             * */</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> enhancedClass <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">enhance</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass <span class="token operator">!=</span> enhancedClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Replacing bean definition &#39;%s&#39; existing class &#39;%s&#39; with &quot;</span>
                            <span class="token operator">+</span> <span class="token string">&quot;enhanced class &#39;%s&#39;&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> enhancedClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 将cglib生成的class 设置到BeanDefinition中</span>
                beanDef<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>enhancedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        enhanceConfigClasses<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;classCount&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>configBeanDefs<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configurationclassenhancer" tabindex="-1"><a class="header-anchor" href="#configurationclassenhancer" aria-hidden="true">#</a> ConfigurationClassEnhancer</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// cglib生成的代理类就是会实现 EnhancedConfiguration ，所以这里的目的防止重复代理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">EnhancedConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Ignoring request to enhance %s as it has &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;already been enhanced. This usually indicates that more than one &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;ConfigurationClassPostProcessor has been registered (e.g. via &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;&lt;context:annotation-config&gt;). This is harmless, but you may &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;want check your configuration and remove one CCPP if possible&quot;</span><span class="token punctuation">,</span>
                    configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> configClass<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * cglib生成代理类class
     *
     *
     * CallbackFilter是ConditionalCallbackFilter
     *      逻辑很简单
     *          - 是@Bean标注的方法，生成的字节码使用的callback是 BeanMethodInterceptor
     *          - 方法是 setBeanFactory，生成的字节码使用的callback是 BeanFactoryAwareMethodInterceptor
     *
     * Callback是 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurationClassEnhancer</span><span class="token punctuation">#</span><span class="token field">CALLBACKS</span></span><span class="token punctuation">}</span>
     *      BeanMethodInterceptor
     *      BeanFactoryAwareMethodInterceptor
     *
     * @Bean方法的callback逻辑 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanMethodInterceptor</span><span class="token punctuation">#</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> enhancedClass <span class="token operator">=</span> <span class="token function">createClass</span><span class="token punctuation">(</span><span class="token function">newEnhancer</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Successfully enhanced %s; enhanced class name is: %s&quot;</span><span class="token punctuation">,</span>
                configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> enhancedClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> enhancedClass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Creates a new CGLIB <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Enhancer</span></span><span class="token punctuation">}</span> instance.
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Enhancer</span> <span class="token function">newEnhancer</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configSuperClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>configSuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 代理类要实现的接口</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">EnhancedConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setUseFactory</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span><span class="token class-name">SpringNamingPolicy</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanFactoryAwareGeneratorStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置 CallBackFilter，这个是在生成字节码的时候使用filter确定每个生成的方法内使用的callback</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token constant">CALLBACK_FILTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置 CallBack</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span><span class="token constant">CALLBACK_FILTER</span><span class="token punctuation">.</span><span class="token function">getCallbackTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> enhancer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Uses enhancer to generate a subclass of superclass,
 * ensuring that callbacks are registered for the new subclass.
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createClass</span><span class="token punctuation">(</span><span class="token class-name">Enhancer</span> enhancer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> subclass <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Registering callbacks statically (as opposed to thread-local)</span>
    <span class="token comment">// is critical for usage in an OSGi environment (SPR-5932)...</span>
    <span class="token class-name">Enhancer</span><span class="token punctuation">.</span><span class="token function">registerStaticCallbacks</span><span class="token punctuation">(</span>subclass<span class="token punctuation">,</span> <span class="token constant">CALLBACKS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> subclass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CALLBACKS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">BeanMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAwareMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">NoOp</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拦截器执行流程" tabindex="-1"><a class="header-anchor" href="#拦截器执行流程" aria-hidden="true">#</a> 拦截器执行流程</h3><p>什么是动态代理？用通俗的话理解就是：<strong>代理的核心逻辑就是依赖于拦截器实现的</strong>，可见拦截器（也叫增强）之于代理类是何等重要。</p><p>上面的三个拦截器中，<code>NoOp.INSTANCE</code>代表什么都没做，因此我们只需要关注前两个。他俩均是<code>MethodInterceptor</code>接口的实现类，均实现了<code>intercept()</code>方法来做具体的拦截操作（他俩均是私有静态内部类哟）。</p><h4 id="beanfactoryawaremethodinterceptor拦截流程" tabindex="-1"><a class="header-anchor" href="#beanfactoryawaremethodinterceptor拦截流程" aria-hidden="true">#</a> BeanFactoryAwareMethodInterceptor拦截流程</h4><p>拦截<code>setBeanFactory()</code>方法的执行</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/11/30/2fjEqY.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行时机决定了增强逻辑何时执行，毕竟一般来说都不可能是增强所有的嘛。</p><p>我们知道<code>setBeanFactory()</code>方法是由Spring容器在初始化Bean时回调调用的，而代理类实现了<code>EnhancedConfiguration</code>接口（间接实现了<code>BeanFactoryAware</code>接口），所以该拦截器的执行时机为：<strong>在Spring初始化代理类实例时执行拦截</strong>。</p><p>作为一个拦截器，增强逻辑才是它的核心。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryAwareMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> <span class="token class-name">ConditionalCallback</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token annotation punctuation">@Nullable</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token comment">// 找到本类（代理类）里名为\`$$beanFactory\`的字段</span>
            <span class="token comment">// 若没找到直接报错。若找到了此字段，就给此字段赋值</span>
            <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BEAN_FACTORY_FIELD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>field <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Unable to find generated BeanFactory field&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Does the actual (non-CGLIB) superclass implement BeanFactoryAware?</span>
            <span class="token comment">// If so, call its setBeanFactory() method. If not, just exit.</span>
            <span class="token comment">// 如果用户类（也就是你自己定义的类）自己实现了该接口，那么别担心，也会给你赋值上</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">Method</span> candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当执行到setBeanFactory(xxx)方法时匹配成功</span>
            <span class="token keyword">return</span> <span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">Method</span> candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;setBeanFactory&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    candidateMethod<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> candidateMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从执行时机知道了，它拦截的是<code>setBeanFactory()</code>方法的执行。所以这里的Method就代表的是<code>setBeanFactory()</code>方法，<code>Object[] args</code>的值是<strong>当前容器的BeanFactory工厂</strong>（注意理解这句话）实例。</p><h4 id="🔥beanmethodinterceptor拦截流程" tabindex="-1"><a class="header-anchor" href="#🔥beanmethodinterceptor拦截流程" aria-hidden="true">#</a> 🔥BeanMethodInterceptor拦截流程</h4><p>拦截任何标注有<code>@Bean</code>注解的方法的<strong>调用</strong>，以确保正确处理Bean语义，例如<strong>作用域</strong>（请别忽略它）和AOP代理。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/11/30/yEXdj7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">,</span> <span class="token class-name">ConditionalCallback</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Enhance a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Bean</span></span> @Bean<span class="token punctuation">}</span> method to check the supplied BeanFactory for the
     * existence of this bean object.
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> as a catch-all for any exception that may be thrown when invoking the
     * super implementation of the proxied method i.e., the actual <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Bean</span></span></span><span class="token punctuation">}</span> method
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> enhancedConfigInstance<span class="token punctuation">,</span> <span class="token class-name">Method</span> beanMethod<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>
                            <span class="token class-name">MethodProxy</span> cglibMethodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 拿到 BeanFactory</span>
        <span class="token class-name">ConfigurableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 拿到beanName：有@Bean就返回其属性值，是数组只会返回第一个  -&gt;  方法名
         *
         * @Bean(<span class="token punctuation">{</span>&quot;a&quot;, &quot;a2&quot;<span class="token punctuation">}</span>)
         * @Scope(proxyMode = ScopedProxyMode.NO)
         * public Test a() <span class="token punctuation">{</span>
         *     return null;
         * <span class="token punctuation">}</span>
         * */</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 只要不是 @Scope(proxyMode = ScopedProxyMode.NO) 就是true</span>
        <span class="token comment">// Determine whether this bean is a scoped-proxy</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">isScopedProxy</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 拼接上前缀 scopedTarget.</span>
            <span class="token class-name">String</span> scopedBeanName <span class="token operator">=</span> <span class="token class-name">ScopedProxyCreator</span><span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>scopedBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanName <span class="token operator">=</span> scopedBeanName<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// To handle the case of an inter-bean method reference, we must explicitly check the</span>
        <span class="token comment">// container for already cached instances.</span>

        <span class="token doc-comment comment">/**
         * beanName是FactoryBean 且 不是真正创建的bean
         * */</span>
        <span class="token comment">// First, check to see if the requested bean is a FactoryBean. If so, create a subclass</span>
        <span class="token comment">// proxy that intercepts calls to getObject() and returns any cached bean instance.</span>
        <span class="token comment">// This ensures that the semantics of calling a FactoryBean from within @Bean methods</span>
        <span class="token comment">// is the same as that of referring to a FactoryBean within XML. See SPR-6602.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用BeanFactory实例化工厂bean</span>
            <span class="token class-name">Object</span> factoryBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryBean <span class="token keyword">instanceof</span> <span class="token class-name">ScopedProxyFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//作用域代理工厂 Bean 是一种特例，不应进一步代理</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 使用JDk代理，拦截<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">FactoryBean</span><span class="token punctuation">#</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>方法
                 * */</span>
                <span class="token comment">//它是候选的 FactoryBean - 继续进行增强</span>
                <span class="token keyword">return</span> <span class="token function">enhanceFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 通过ThreadLocal来记录当前调用的方法，当循环调用@Bean 方法时，第一次是代理对象方法，再调第二次就是执行的父类方法(也就是被代理类的方法)
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The factory is calling the bean method in order to instantiate and register the bean</span>
            <span class="token comment">// (i.e. via a getBean() call) -&gt; invoke the super implementation of the method to actually</span>
            <span class="token comment">// create the bean instance.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;@Bean method %s.%s is non-static and returns an object &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;assignable to Spring&#39;s BeanFactoryPostProcessor interface. This will &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;result in a failure to process annotations such as @Autowired, &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;@Resource and @PostConstruct within the method&#39;s declaring &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;@Configuration class. Add the &#39;static&#39; modifier to this method to avoid &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;these container lifecycle issues; see @Bean javadoc for complete details.&quot;</span><span class="token punctuation">,</span>
                        beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token doc-comment comment">/**
             * enhancedConfigInstance 这个是代理对象
             * invokeSuper 就是反射执行代理对象父类的方法，也就是执行被代理对象方法
             * */</span>
            <span class="token keyword">return</span> cglibMethodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 解析bean引用。说白了就是从BeanFactory找Bean，单例池中没得就会实例化bean，实例化的时候就会往ThreadLocal记录一下，
         * 然后再执行代理对象的方法进行实例化，也就是会回调到当前方法 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanMethodInterceptor</span><span class="token punctuation">#</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * 因为实例化的时候记录了当前方法，所以回调到当前方法满足 isCurrentlyInvokedFactoryMethod 条件，所以就是 super.method 进行实例化
         * */</span>
        <span class="token keyword">return</span> <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span><span class="token class-name">Method</span> beanMethod<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>
                                        <span class="token class-name">ConfigurableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// The user (i.e. not the factory) is requesting this bean through a call to</span>
        <span class="token comment">// the bean method, direct or indirect. The bean may have already been marked</span>
        <span class="token comment">// as &#39;in creation&#39; in certain autowiring scenarios; if so, temporarily set</span>
        <span class="token comment">// the in-creation status to false in order to avoid an exception.</span>
        <span class="token keyword">boolean</span> alreadyInCreation <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyInCreation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">setCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">boolean</span> useArgs <span class="token operator">=</span> <span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>useArgs <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Stubbed null arguments just for reference purposes,</span>
                <span class="token comment">// expecting them to be autowired for regular singleton references?</span>
                <span class="token comment">// A safe assumption since @Bean singleton arguments cannot be optional...</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg <span class="token operator">:</span> beanMethodArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        useArgs <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token doc-comment comment">/**
             * 实例化的时候会标记
             * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">#</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token comment">// getBean</span>
            <span class="token class-name">Object</span> beanInstance <span class="token operator">=</span> <span class="token punctuation">(</span>useArgs <span class="token operator">?</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span> <span class="token operator">:</span>
                    beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// bean实例和方法返回值类型 不匹配</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isAssignableValue</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Detect package-protected NullBean instance through equals(null) check</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInstance<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;@Bean method %s.%s called as bean reference &quot;</span> <span class="token operator">+</span>
                                        <span class="token string">&quot;for type [%s] returned null bean; resolving to null value.&quot;</span><span class="token punctuation">,</span>
                                beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    beanInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;@Bean method %s.%s called as bean reference &quot;</span> <span class="token operator">+</span>
                                    <span class="token string">&quot;for type [%s] but overridden by non-compatible bean instance of type [%s].&quot;</span><span class="token punctuation">,</span>
                            beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        msg <span class="token operator">+=</span> <span class="token string">&quot; Overriding bean of same name declared in: &quot;</span> <span class="token operator">+</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Ignore - simply no detailed message then.</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 报错</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 是正在调用的方法，就是在调用@Bean方法</span>
            <span class="token class-name">Method</span> currentlyInvoked <span class="token operator">=</span> <span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span><span class="token function">getCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentlyInvoked <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> outerBeanName <span class="token operator">=</span> <span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>currentlyInvoked<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 注册依赖关系</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">registerDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> outerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 返回bean实例</span>
            <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyInCreation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">setCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">Method</span> candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span>
                <span class="token operator">!</span><span class="token class-name">BeanFactoryAwareMethodInterceptor</span><span class="token punctuation">.</span><span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">isBeanAnnotated</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ConfigurableBeanFactory</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> enhancedConfigInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 拿到字段</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BEAN_FACTORY_FIELD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>field <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Unable to find generated bean factory field&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拿到字段的值</span>
        <span class="token class-name">Object</span> beanFactory <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> enhancedConfigInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;BeanFactory has not been injected into @Configuration class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">,</span>
                <span class="token string">&quot;Injected BeanFactory is not a ConfigurableBeanFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Check the BeanFactory to see whether the bean named <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>var</span><span class="token punctuation">&gt;</span></span>beanName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>var</span><span class="token punctuation">&gt;</span></span> already
     * exists. Accounts for the fact that the requested bean may be &quot;in creation&quot;, i.e.:
     * we&#39;re in the middle of servicing the initial request for this bean. From an enhanced
     * factory method&#39;s perspective, this means that the bean does not actually yet exist,
     * and that it is now our job to create it for the first time by executing the logic
     * in the corresponding factory method.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Said another way, this check repurposes
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">#</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to determine whether
     * the container is calling this method or the user is calling this method.
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span> name of bean to check for
     * <span class="token keyword">@return</span> whether <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>var</span><span class="token punctuation">&gt;</span></span>beanName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>var</span><span class="token punctuation">&gt;</span></span> already exists in the factory
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">factoryContainsBean</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Check whether the given method corresponds to the container&#39;s currently invoked
     * factory method. Compares method name and parameter types only in order to work
     * around a potential problem with covariant return types (currently only known
     * to happen on Groovy classes).
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> currentlyInvoked <span class="token operator">=</span> <span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span><span class="token function">getCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>currentlyInvoked <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentlyInvoked<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentlyInvoked<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Create a subclass proxy that intercepts calls to getObject(), delegating to the current BeanFactory
     * instead of creating a new instance. These proxies are created only when calling a FactoryBean from
     * within a Bean method, allowing for proper scoping semantics even when working against the FactoryBean
     * instance directly. If a FactoryBean instance is fetched through the container via &amp;-dereferencing,
     * it will not be proxied. This too is aligned with the way XML configuration works.
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">enhanceFactoryBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> factoryBean<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exposedType<span class="token punctuation">,</span>
                                      <span class="token keyword">final</span> <span class="token class-name">ConfigurableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> factoryBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> finalClass <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isFinal</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> finalMethod <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isFinal</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getObject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 类是final 或者 getObject方法是final的</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>finalClass <span class="token operator">||</span> finalMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 返回值是接口类型才创建代理对象</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Creating interface proxy for FactoryBean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39; of type [&quot;</span> <span class="token operator">+</span>
                                clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] for use within another @Bean method because its &quot;</span> <span class="token operator">+</span>
                                <span class="token punctuation">(</span>finalClass <span class="token operator">?</span> <span class="token string">&quot;implementation class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;getObject() method&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                                <span class="token string">&quot; is final: Otherwise a getObject() call would not be routed to the factory.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 使用JDK代理</span>
                    <span class="token keyword">return</span> <span class="token function">createInterfaceProxyForFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> exposedType<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to proxy FactoryBean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39; of type [&quot;</span> <span class="token operator">+</span>
                                clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] for use within another @Bean method because its &quot;</span> <span class="token operator">+</span>
                                <span class="token punctuation">(</span>finalClass <span class="token operator">?</span> <span class="token string">&quot;implementation class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;getObject() method&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                                <span class="token string">&quot; is final: A getObject() call will NOT be routed to the factory. &quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;Consider declaring the return type as a FactoryBean interface.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> factoryBean<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//没有 getObject（） 方法 -&gt; 不应该发生，但只要没有人试图调用它......</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">createCglibProxyForFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">createInterfaceProxyForFactoryBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> factoryBean<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceType<span class="token punctuation">,</span>
                                                      <span class="token keyword">final</span> <span class="token class-name">ConfigurableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
                factoryBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>interfaceType<span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 只代理 getObject 方法</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;getObject&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> factoryBean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">createCglibProxyForFactoryBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> factoryBean<span class="token punctuation">,</span>
                                                  <span class="token keyword">final</span> <span class="token class-name">ConfigurableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span><span class="token class-name">SpringNamingPolicy</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackType</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Ideally create enhanced FactoryBean proxy without constructor side effects,</span>
        <span class="token comment">// analogous to AOP proxy creation in ObjenesisCglibAopProxy...</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> fbClass <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> fbProxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>objenesis<span class="token punctuation">.</span><span class="token function">isWorthTrying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                fbProxy <span class="token operator">=</span> objenesis<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>fbClass<span class="token punctuation">,</span> enhancer<span class="token punctuation">.</span><span class="token function">getUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ObjenesisException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to instantiate enhanced FactoryBean using Objenesis, &quot;</span> <span class="token operator">+</span>
                        <span class="token string">&quot;falling back to regular construction&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>fbProxy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                fbProxy <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>fbClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to instantiate enhanced FactoryBean using Objenesis, &quot;</span> <span class="token operator">+</span>
                        <span class="token string">&quot;and regular FactoryBean instantiation via default constructor fails as well&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Factory</span><span class="token punctuation">)</span> fbProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;getObject&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> fbProxy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行时机：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   			<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">Method</span> candidateMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>candidateMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token operator">!</span><span class="token class-name">BeanFactoryAwareMethodInterceptor</span><span class="token punctuation">.</span><span class="token function">isSetBeanFactory</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">isBeanAnnotated</span><span class="token punctuation">(</span>candidateMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三个条件：</p><ol><li>该方法不能是Object的方法（即使你Object的方法标注了@Bean，我也不认）。</li><li>不能是<code>setBeanFactory()</code>方法。这很容易理解，它交给上个拦截器搞定即可。</li><li><strong>方法必须标注标注有@Bean注解</strong>。</li></ol><p><strong>执行逻辑：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> enhancedConfigInstance<span class="token punctuation">,</span> <span class="token class-name">Method</span> beanMethod<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanMethodArgs<span class="token punctuation">,</span>
                        <span class="token class-name">MethodProxy</span> cglibMethodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到 BeanFactory</span>
    <span class="token class-name">ConfigurableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 拿到beanName：有@Bean就返回其属性值，是数组只会返回第一个  -&gt;  方法名
     *
     * @Bean(<span class="token punctuation">{</span>&quot;a&quot;, &quot;a2&quot;<span class="token punctuation">}</span>)
     * @Scope(proxyMode = ScopedProxyMode.NO)
     * public Test a() <span class="token punctuation">{</span>
     *     return null;
     * <span class="token punctuation">}</span>
     * */</span>
    <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">determineBeanNameFor</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 只要不是 @Scope(proxyMode = ScopedProxyMode.NO) 就是true</span>
    <span class="token comment">// Determine whether this bean is a scoped-proxy</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanAnnotationHelper</span><span class="token punctuation">.</span><span class="token function">isScopedProxy</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 拼接上前缀 scopedTarget.</span>
        <span class="token class-name">String</span> scopedBeanName <span class="token operator">=</span> <span class="token class-name">ScopedProxyCreator</span><span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>scopedBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanName <span class="token operator">=</span> scopedBeanName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// To handle the case of an inter-bean method reference, we must explicitly check the</span>
    <span class="token comment">// container for already cached instances.</span>

    <span class="token doc-comment comment">/**
     * beanName是FactoryBean 且 不是真正创建的bean
     * */</span>
    <span class="token comment">// First, check to see if the requested bean is a FactoryBean. If so, create a subclass</span>
    <span class="token comment">// proxy that intercepts calls to getObject() and returns any cached bean instance.</span>
    <span class="token comment">// This ensures that the semantics of calling a FactoryBean from within @Bean methods</span>
    <span class="token comment">// is the same as that of referring to a FactoryBean within XML. See SPR-6602.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">factoryContainsBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用BeanFactory实例化工厂bean</span>
        <span class="token class-name">Object</span> factoryBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryBean <span class="token keyword">instanceof</span> <span class="token class-name">ScopedProxyFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//作用域代理工厂 Bean 是一种特例，不应进一步代理</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 使用JDk代理，拦截<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">FactoryBean</span><span class="token punctuation">#</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>方法
             * */</span>
            <span class="token comment">//它是候选的 FactoryBean - 继续进行增强</span>
            <span class="token keyword">return</span> <span class="token function">enhanceFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通过ThreadLocal来记录当前调用的方法，当循环调用@Bean 方法时，第一次是代理对象方法，再调第二次就是执行的父类方法(也就是被代理类的方法)
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentlyInvokedFactoryMethod</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// The factory is calling the bean method in order to instantiate and register the bean</span>
        <span class="token comment">// (i.e. via a getBean() call) -&gt; invoke the super implementation of the method to actually</span>
        <span class="token comment">// create the bean instance.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;@Bean method %s.%s is non-static and returns an object &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;assignable to Spring&#39;s BeanFactoryPostProcessor interface. This will &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;result in a failure to process annotations such as @Autowired, &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;@Resource and @PostConstruct within the method&#39;s declaring &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;@Configuration class. Add the &#39;static&#39; modifier to this method to avoid &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;these container lifecycle issues; see @Bean javadoc for complete details.&quot;</span><span class="token punctuation">,</span>
                    beanMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * enhancedConfigInstance 这个是代理对象
         * invokeSuper 就是反射执行代理对象父类的方法，也就是执行被代理对象方法
         * */</span>
        <span class="token keyword">return</span> cglibMethodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>enhancedConfigInstance<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 解析bean引用。说白了就是从BeanFactory找Bean，单例池中没得就会实例化bean，实例化的时候就会往ThreadLocal记录一下，
     * 然后再执行代理对象的方法进行实例化，也就是会回调到当前方法 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanMethodInterceptor</span><span class="token punctuation">#</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * 因为实例化的时候记录了当前方法，所以回调到当前方法满足 isCurrentlyInvokedFactoryMethod 条件，所以就是 super.method 进行实例化
     * */</span>
    <span class="token keyword">return</span> <span class="token function">resolveBeanReference</span><span class="token punctuation">(</span>beanMethod<span class="token punctuation">,</span> beanMethodArgs<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment">// 创建一个子类代理，拦截对getObject()的调用，委托给当前的BeanFactory</span>
<span class="token comment">// 而不是创建一个新的实例。这些代理仅在调用FactoryBean时创建</span>
<span class="token comment">// factoryBean：从容器内拿出来的那个已经存在的工厂Bean实例（是工厂Bean实例）</span>
<span class="token comment">// exposedType：@Bean标注的方法的返回值类型</span>
<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">enhanceFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">Object</span> factoryBean<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exposedType<span class="token punctuation">,</span>
		<span class="token class-name">ConfigurableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token comment">// 看看Spring容器内已经存在的这个工厂Bean的情况，看看是否有final</span>
		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> factoryBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">boolean</span> finalClass <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isFinal</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">boolean</span> finalMethod <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isFinal</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getObject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 类和方法其中有一个是final，那就只能看看能不能走接口代理喽</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>finalClass <span class="token operator">||</span> finalMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// @Bean标注的方法返回值若是接口类型 尝试走基于接口的JDK动态代理</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>exposedType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 基于JDK的动态代理</span>
				<span class="token keyword">return</span> <span class="token function">createInterfaceProxyForFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> exposedType<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 类或方法存在final情况，但是呢返回类型又不是</span>
				<span class="token keyword">return</span> factoryBean<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 没有getObject()方法  很明显，一般不会走到这里</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 到这，说明以上条件不满足：存在final且还不是接口类型</span>
	<span class="token comment">// 类和方法都不是final，生成一个CGLIB的动态代理</span>
	<span class="token keyword">return</span> <span class="token function">createCglibProxyForFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>说明：无论是JDK动态代理还是CGLIB的代理实现均非常简单，就是把getObject()方法代理为使用<code>beanFactory.getBean(beanName)</code>去获取实例（要不代理掉的话，每次不就执行你getObject()里面的逻辑了麽，就又会创建新实例啦~）</p></blockquote><h3 id="lite模式和full模式的区别" tabindex="-1"><a class="header-anchor" href="#lite模式和full模式的区别" aria-hidden="true">#</a> lite模式和full模式的区别</h3><p><strong>lite模式：</strong></p><p>官方定义为：在没有标注<code>@Configuration</code>的类里面有<code>@Bean</code>方法就称为Lite模式的配置。透过源码再看这个定义是不完全正确的，而应该是有如下case均认为是Lite模式的配置类：</p><ol><li>类上标注有<code>@Component</code>注解</li><li>类上标注有<code>@ComponentScan</code>注解</li><li>类上标注有<code>@Import</code>注解</li><li>类上标注有<code>@ImportResource</code>注解</li><li><strong>若类上没有任何注解</strong>，但类内存在@Bean方法</li></ol><p>以上case的前提均是类上没有被标注<code>@Configuration</code>，在<strong>Spring 5.2之后</strong>新增了一种case也算作Lite模式：</p><p>标注有<code>@Configuration(proxyBeanMethods = false)</code>，注意：此值默认是true哦，需要显示改为false才算是Lite模式。</p><p><strong>优点</strong>：</p><ul><li>运行时不再需要给对应类生成CGLIB子类，提高了运行性能，降低了启动时间</li><li>可以该配置类当作一个普通类使用喽：也就是说@Bean方法 <strong>可以是private、可以是final</strong></li></ul><p><strong>缺点</strong>：</p><ul><li>不能声明@Bean之间的依赖，也就是说不能通过方法调用来依赖其它Bean</li><li>（其实这个缺点还好，很容易用其它方式“弥补”，比如：把依赖Bean放进方法入参里即可）</li></ul><p><strong>Full模式：</strong></p><p>标注有<code>@Configuration</code>注解的类被称为full模式的配置类。自Spring5.2后这句话改为下面这样我觉得更为精确些：</p><ul><li>标注有<code>@Configuration</code>或者<code>@Configuration(proxyBeanMethods = true)</code>的类被称为Full模式的配置类</li><li>（当然喽，proxyBeanMethods属性的默认值是true，所以一般需要Full模式我们只需要标个注解即可）</li></ul><p><strong>优点</strong>：</p><ul><li>可以支持通过常规Java调用相同类的@Bean方法而保证是容器内的Bean，这有效规避了在“Lite模式”下操作时难以跟踪的细微错误。特别对于萌新程序员，这个特点很有意义</li></ul><p><strong>缺点</strong>：</p><ul><li>运行时会给该类生成一个CGLIB子类放进容器，有一定的性能、时间开销（这个开销在Spring Boot这种拥有大量配置类的情况下是不容忽视的，这也是为何Spring 5.2新增了<code>proxyBeanMethods</code>属性的最直接原因）</li><li>正因为被代理了，所以@Bean方法 <strong>不可以是private、不可以是final</strong></li></ul>`,68),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","SpringConfig.html.vue"]]);export{k as default};
