import{_ as n,V as s,W as a,$ as e}from"./framework-8edddef6.js";const t={},p=e(`<h1 id="time" tabindex="-1"><a class="header-anchor" href="#time" aria-hidden="true">#</a> time</h1><p><code>time</code>包提供了时间和日历的相关的函数与方法。</p><p><code>time.Now()</code>函数可以获取当前时间</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Time 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>
<span class="token comment">//2022-11-17 10:00:18.6983438 +0800 CST m=+0.007095001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其返回的数据类型是<code>Time</code>结构体，其含有非常多的时间操作的方法。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">nsec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int32</span> <span class="token comment">//纳秒</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">sec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token comment">//秒</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">unixSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回 Unix时间格式的 秒</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">addSec</span><span class="token punctuation">(</span>d <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token comment">//增加秒</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">setLoc</span><span class="token punctuation">(</span>loc <span class="token operator">*</span>Location<span class="token punctuation">)</span> <span class="token comment">//设置地区</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Time<span class="token punctuation">)</span> <span class="token function">stripMono</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//去掉时间的单调时钟读数</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t Time<span class="token punctuation">)</span> <span class="token function">After</span><span class="token punctuation">(</span>u Time<span class="token punctuation">)</span> <span class="token comment">//判断一个时间是否在它之后</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t Time<span class="token punctuation">)</span> <span class="token function">Before</span><span class="token punctuation">(</span>u Time<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">//判断一个时间是否在它之前</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t Time<span class="token punctuation">)</span> <span class="token function">Equal</span><span class="token punctuation">(</span>u Time<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">//判断两个时间是否表示同一瞬间</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t Time<span class="token punctuation">)</span> <span class="token function">Sub</span><span class="token punctuation">(</span>u Time<span class="token punctuation">)</span> Duration <span class="token comment">//求两个时间的差值</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t Time<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> Time <span class="token comment">//增加一段时间间隔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间单位" tabindex="-1"><a class="header-anchor" href="#时间单位" aria-hidden="true">#</a> 时间单位</h2><p><code>time</code>包存放了基础的时间单位常量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	minDuration Duration <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">63</span>
	maxDuration Duration <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">63</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Nanosecond  Duration <span class="token operator">=</span> <span class="token number">1</span>
	Microsecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Nanosecond
	Millisecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Microsecond
	Second               <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Millisecond
	Minute               <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Second
	Hour                 <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Minute
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的类型是<code>time.Duration</code>，最小的单位是纳秒，最大的是小时。</p><h2 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h2><p>时间类型可以格式化输出，不过需要注意的是在Go中格式化模板不是常见的yyyy-mm-dd这类，而是以Go诞生时间为模板。Go的诞生的时间是 2006年1月2日下午15点04分。</p><p>例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>24小时格式化输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;2006-01-02 15:04:05 Monday Jan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//2022-11-17 10:44:48 Thursday Nov</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只输出日期</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;2006-01-02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//2022-11-17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只输入12小时制的时间</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;15:04:05 PM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//10:48:47 AM</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析时间" tabindex="-1"><a class="header-anchor" href="#解析时间" aria-hidden="true">#</a> 解析时间</h2><p>通常我们会有一个需求就是，将一个字符串时间按照一定格式转换为Go中的时间结构体，接下来我们要做的就是这件事。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   location<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>

   inLocation<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span><span class="token string">&quot;2006/01/02&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2012/10/12&quot;</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>inLocation<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2012-10-12 00:00:00 +0800 CST
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer</h2><p>Timer是一个计时器，对外暴露一个channel，当指定时间到了以后，channel就会收到消息并关闭。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewTimer</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">*</span>Timer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>time.NewTimer()</code>可以创建一个新的计时器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	timer :<span class="token operator">=</span> time.NewTimer<span class="token punctuation">(</span>time.Second<span class="token punctuation">)</span>
	defer timer.Stop<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> t :<span class="token operator">=</span> <span class="token operator">&lt;</span>-timer.C:
		fmt.Println<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-09-25 21:25:03.5696803 +0800 CST m=+1.007908001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用完timer以后，应及时的关闭。</p><h2 id="ticker" tabindex="-1"><a class="header-anchor" href="#ticker" aria-hidden="true">#</a> Ticker</h2><p>Ticker是一个定时器，与timer的区别在于，timer是一次性的，而Ticker是定时触发。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewTicker</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">*</span>Ticker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>time.NewTicker()</code>可以创建一个新的定时器</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-09-25 21:29:20.4429256 +0800 CST m=+1.009508401
2023-09-25 21:29:21.4512075 +0800 CST m=+2.017790301
2023-09-25 21:29:22.4501592 +0800 CST m=+3.016742001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，在使用完ticker后，也要及时关闭。</p><h2 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep" aria-hidden="true">#</a> sleep</h2><p><code>time.Sleep()</code>可以使用当前goroutine处于挂起状态一定的时间，在这期间goroutine将被阻塞，直到恢复运行状态。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	start :<span class="token operator">=</span> time.Now<span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt.Println<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
	time.Sleep<span class="token punctuation">(</span>time.Second * <span class="token number">2</span><span class="token punctuation">)</span>
	end :<span class="token operator">=</span> time.Now<span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt.Println<span class="token punctuation">(</span>end<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-09-25 21:36:35.7229057 +0800 CST m=+0.001627901
2023-09-25 21:36:37.7347742 +0800 CST m=+2.013496401
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段程序就会在输出完<code>start</code>后阻塞两秒，然后再输出<code>end</code>。</p>`,46),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","time.html.vue"]]);export{d as default};
