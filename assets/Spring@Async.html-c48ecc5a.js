import{_ as t,V as e,W as p,X as n,Y as s,Z as c,$ as o,F as l}from"./framework-8edddef6.js";const i={},u=n("h1",{id:"spring异步-async",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring异步-async","aria-hidden":"true"},"#"),s(" spring异步@Async")],-1),k=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),s(" 概述")],-1),r={href:"https://docs.spring.io/spring-framework/reference/integration/scheduling.html#scheduling-annotation-support-async",target:"_blank",rel:"noopener noreferrer"},d=o(`<p><code>@EnableAsync</code> 会创建用来解析<code>@Async</code>注解的Advisor。但是这个adcisor没有注入到容器，而是通过bean的后置处理器应用Advisor。</p><p>拦截的逻辑是类或者方法上有@Async的注解，增强的逻辑是使用指定或者默认的线程池执行方法。此时会为原来的bean<strong>创建代理对象</strong>。</p><ul><li><code>@Async</code> 标注在类上，类中所有的方法都会被代理</li><li><code>@Async</code> 标注在方法上，方法会被代理</li><li><code>@Async(&quot;beanName&quot;)</code> 通过注解值，指定方法要使用的的Executor</li></ul><p>注：equals、hashCode、toString 是不会代理的</p><h2 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> @Async</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AsyncConfigurationSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAsync</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 指示要在任一类中检测到的“异步”注释类型
     * 或方法级别。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>默认情况下，Spring 的 @<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Async</span></span><span class="token punctuation">}</span> 注解和 EJB 3.1
     * 将检测到 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@javax.ejb.Asynchronous</span></span></span><span class="token punctuation">}</span> 注解。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>此属性存在，以便开发人员可以提供自己的属性
     * 自定义注解类型，以指示一个方法（或所有方法
     * 给定的类）应异步调用。
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token function">annotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Annotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 指示是否要创建基于子类的 （CGLIB） 代理，而不是
     * 到基于标准 Java 接口的代理。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>仅当 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">mode</span></span><span class="token punctuation">}</span> 设置为 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AdviceMode</span><span class="token punctuation">#</span><span class="token field">PROXY</span></span><span class="token punctuation">}</span> 时才适用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>默认值为 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>请注意，将此属性设置为 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> 将影响<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>所有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>
     * Spring 管理的 Bean 需要代理，而不仅仅是那些标有 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Async</span></span></span><span class="token punctuation">}</span> 的 bean。
     * 例如，其他标有 Spring 的 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Transactional</span></span></span><span class="token punctuation">}</span> 注解的 bean
     * 将同时升级为子类代理。这种方法没有
     * 在实践中产生负面影响，除非人们明确期望一种类型的代理
     * 与另一个 — 例如，在测试中。
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Indicate how async advice should be applied.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>The default is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AdviceMode</span><span class="token punctuation">#</span><span class="token field">PROXY</span></span><span class="token punctuation">}</span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
     * Please note that proxy mode allows for interception of calls through the proxy
     * only. Local calls within the same class cannot get intercepted that way; an
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Async</span></span><span class="token punctuation">}</span> annotation on such a method within a local call will be ignored
     * since Spring&#39;s interceptor does not even kick in for such a runtime scenario.
     * For a more advanced mode of interception, consider switching this to
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AdviceMode</span><span class="token punctuation">#</span><span class="token field">ASPECTJ</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token class-name">AdviceMode</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token constant">PROXY</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Indicate the order in which the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AsyncAnnotationBeanPostProcessor</span></span><span class="token punctuation">}</span>
     * should be applied.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The default is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Ordered</span><span class="token punctuation">#</span><span class="token field">LOWEST_PRECEDENCE</span></span><span class="token punctuation">}</span> in order to run
     * after all other post-processors, so that it can add an advisor to
     * existing proxies rather than double-proxy.
     */</span>
    <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">LOWEST_PRECEDENCE</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="asyncconfigurationselector" tabindex="-1"><a class="header-anchor" href="#asyncconfigurationselector" aria-hidden="true">#</a> AsyncConfigurationSelector</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfigurationSelector</span> <span class="token keyword">extends</span> <span class="token class-name">AdviceModeImportSelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnableAsync</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME</span> <span class="token operator">=</span>
            <span class="token string">&quot;org.springframework.scheduling.aspectj.AspectJAsyncConfiguration&quot;</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * Returns <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ProxyAsyncConfiguration</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">AspectJAsyncConfiguration</span></span></span><span class="token punctuation">}</span>
     * for <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token constant">PROXY</span></span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token constant">ASPECTJ</span></span></span><span class="token punctuation">}</span> values of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EnableAsync</span><span class="token punctuation">#</span><span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>,
     * respectively.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AdviceMode</span> adviceMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>adviceMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">PROXY</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">ProxyAsyncConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">ASPECTJ</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token constant">ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxyasyncconfiguration" tabindex="-1"><a class="header-anchor" href="#proxyasyncconfiguration" aria-hidden="true">#</a> ProxyAsyncConfiguration</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Configuration</span></span></span><span class="token punctuation">}</span> 类，用于注册必要的 Spring 基础架构 Bean
 * 启用基于代理的异步方法执行。
 *
 * <span class="token keyword">@author</span> Chris Beams
 * <span class="token keyword">@author</span> Stephane Nicoll
 * <span class="token keyword">@author</span> Juergen Hoeller
 * <span class="token keyword">@since</span> 3.1
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">EnableAsync</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">AsyncConfigurationSelector</span></span>
 */</span>
<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyAsyncConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAsyncConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">TaskManagementConfigUtils</span><span class="token punctuation">.</span><span class="token constant">ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">AsyncAnnotationBeanPostProcessor</span> <span class="token function">asyncAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
        <span class="token doc-comment comment">/**
         * enableAsync 这个属性肯定，不是null，因为是 @Bean 所以创建之前会先创建其配置类，也就是创建 ProxyAsyncConfiguration
         *
         * 初始化ProxyAsyncConfiguration时，会进行依赖注入也就是会执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractAsyncConfiguration</span><span class="token punctuation">#</span><span class="token function">setConfigurers</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *  会从容器中拿到 AsyncConfigurer 类型的bean，给这两个属性赋值
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractAsyncConfiguration</span><span class="token punctuation">#</span><span class="token field">exceptionHandler</span></span><span class="token punctuation">}</span>
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractAsyncConfiguration</span><span class="token punctuation">#</span><span class="token field">executor</span></span><span class="token punctuation">}</span>
         *
         * 又因为 ProxyAsyncConfiguration 实现了 ImportAware 接口，所以 ImportAwareBeanPostProcessor 后置处理器
         * 会回调 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractAsyncConfiguration</span><span class="token punctuation">#</span><span class="token function">setImportMetadata</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> ，给 enableAsync 这个字段赋值。
         *
         * enableAsync 就是 @EnableAsync 注解的元数据信息
         * */</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableAsync<span class="token punctuation">,</span> <span class="token string">&quot;@EnableAsync annotation metadata was not injected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AsyncAnnotationBeanPostProcessor</span> bpp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 这两个参数的赋值，是在父类通过自动注入实现的
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractAsyncConfiguration</span><span class="token punctuation">#</span><span class="token function">setConfigurers</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        bpp<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注解的参数值</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> customAsyncAnnotation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableAsync<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">&quot;annotation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  有 customAsyncAnnotation 就设置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>customAsyncAnnotation <span class="token operator">!=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token class-name">EnableAsync</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;annotation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bpp<span class="token punctuation">.</span><span class="token function">setAsyncAnnotationType</span><span class="token punctuation">(</span>customAsyncAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bpp<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableAsync<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;proxyTargetClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bpp<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableAsync<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bpp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="asyncannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#asyncannotationbeanpostprocessor" aria-hidden="true">#</a> AsyncAnnotationBeanPostProcessor</h2><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2023/12/23/Zm3dOR.tif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncAnnotationBeanPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactoryAwareAdvisingPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * The default name of the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TaskExecutor</span></span><span class="token punctuation">}</span> bean to pick up: &quot;taskExecutor&quot;.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note that the initial lookup happens by type; this is just the fallback
     * in case of multiple executor beans found in the context.
     * <span class="token keyword">@since</span> 4.2
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">AnnotationAsyncExecutionInterceptor</span><span class="token punctuation">#</span><span class="token field">DEFAULT_TASK_EXECUTOR_BEAN_NAME</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_TASK_EXECUTOR_BEAN_NAME</span> <span class="token operator">=</span>
            <span class="token class-name">AnnotationAsyncExecutionInterceptor</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_TASK_EXECUTOR_BEAN_NAME</span><span class="token punctuation">;</span>


    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Executor</span><span class="token punctuation">&gt;</span></span> executor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncUncaughtExceptionHandler</span><span class="token punctuation">&gt;</span></span> exceptionHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> asyncAnnotationType<span class="token punctuation">;</span>



    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 实例化 AsyncAnnotationAdvisor，是这个类型的Advisor
         * */</span>
        <span class="token class-name">AsyncAnnotationAdvisor</span> advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncAnnotationAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>asyncAnnotationType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            advisor<span class="token punctuation">.</span><span class="token function">setAsyncAnnotationType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>asyncAnnotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        advisor<span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advisor <span class="token operator">=</span> advisor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="asyncannotationadvisor" tabindex="-1"><a class="header-anchor" href="#asyncannotationadvisor" aria-hidden="true">#</a> AsyncAnnotationAdvisor</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AsyncAnnotationAdvisor</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Executor</span><span class="token punctuation">&gt;</span></span> executor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncUncaughtExceptionHandler</span><span class="token punctuation">&gt;</span></span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Async 就是Pointcut匹配的时候会用到
     * */</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> asyncAnnotationTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    asyncAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Async</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        asyncAnnotationTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
                <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;javax.ejb.Asynchronous&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AsyncAnnotationAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// If EJB 3.1 API not present, simply ignore.</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>advice <span class="token operator">=</span> <span class="token function">buildAdvice</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pointcut <span class="token operator">=</span> <span class="token function">buildPointcut</span><span class="token punctuation">(</span>asyncAnnotationTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



 <span class="token keyword">protected</span> <span class="token class-name">Advice</span> <span class="token function">buildAdvice</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Executor</span><span class="token punctuation">&gt;</span></span> executor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncUncaughtExceptionHandler</span><span class="token punctuation">&gt;</span></span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">AnnotationAsyncExecutionInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationAsyncExecutionInterceptor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        interceptor<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> exceptionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token keyword">protected</span> <span class="token class-name">Pointcut</span> <span class="token function">buildPointcut</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> asyncAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ComposablePointcut</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 默认就一个 @Async
     * */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> asyncAnnotationType <span class="token operator">:</span> asyncAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 这个是匹配类的，就是 类有@Async就行
         * */</span>
        <span class="token class-name">Pointcut</span> cpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span>asyncAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 这个是匹配方法的，就是 方法有@Async就行
         * */</span>
        <span class="token class-name">Pointcut</span> mpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> asyncAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComposablePointcut</span><span class="token punctuation">(</span>cpc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * union 简单一点就是，一个满足就是true
             *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">MethodMatchers</span><span class="token punctuation">.</span><span class="token class-name">UnionMethodMatcher</span><span class="token punctuation">#</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">MethodMatchers</span><span class="token punctuation">.</span><span class="token class-name">UnionMethodMatcher</span><span class="token punctuation">#</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *
             *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ClassFilters</span><span class="token punctuation">.</span><span class="token class-name">UnionClassFilter</span><span class="token punctuation">#</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *
             *  在这里用的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AopUtils</span><span class="token punctuation">#</span><span class="token function">canApply</span><span class="token punctuation">(</span><span class="token class-name">Pointcut</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *  就是 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">MethodMatchers</span><span class="token punctuation">.</span><span class="token class-name">UnionMethodMatcher</span><span class="token punctuation">#</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span><span class="token punctuation">}</span>
             *
             * 所以union的结果就是 类有@Async或者方法有@Async就行
             * */</span>
            result<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>cpc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>mpc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token class-name">Pointcut</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asyncexecutioninterceptor" tabindex="-1"><a class="header-anchor" href="#asyncexecutioninterceptor" aria-hidden="true">#</a> AsyncExecutionInterceptor</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AsyncExecutionInterceptor</span><span class="token operator">:</span>

<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Method</span> specificMethod <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Method</span> userDeclaredMethod <span class="token operator">=</span> <span class="token class-name">BridgeMethodResolver</span><span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 拿到方法对应的Executor。
     *
     * @Async的查找顺序：方法 -&gt; 方法声明的类
     *
     *  有注解@Async(&quot;beanName&quot;)，就通过beanName从容器中获取Executor，拿不到直接报错
     * \`@Async\` 没有指定beanName，就使用默认的Executor <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AsyncExecutionAspectSupport</span><span class="token punctuation">#</span><span class="token field">defaultExecutor</span></span><span class="token punctuation">}</span>，会在构造器设置这个属性
     *
     * 构造器 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AsyncExecutionAspectSupport</span><span class="token punctuation">#</span><span class="token function">AsyncExecutionAspectSupport</span><span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *     defaultExecutor 是 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AbstractAsyncConfiguration</span><span class="token punctuation">#</span><span class="token function">setConfigurers</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 设置的
     *    \`this.defaultExecutor = new SingletonSupplier&lt;&gt;(defaultExecutor, () -&gt; getDefaultExecutor(this.beanFactory));\`
     *          没有 defaultExecutor 也会执行<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AsyncExecutionInterceptor</span><span class="token punctuation">#</span><span class="token function">getDefaultExecutor</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 拿到一个
     *          从BeanFactory中找 先找TaskExecutor，没有在找Executor 类型的bean
     *          找不到就 \`new SimpleAsyncTaskExecutor()\`
     *
     * Tips：方法的Executor，可以通过 @Async(&quot;beanName&quot;) 注解的值拿到，在BeanFactory中找，找不到就报错。没有设置注解值，就找默认的，
     *      默认查找顺序：AsyncConfigurer -&gt; TaskExecutor -&gt; Executor -&gt; \`new SimpleAsyncTaskExecutor()\`
     * */</span>
    <span class="token class-name">AsyncTaskExecutor</span> executor <span class="token operator">=</span> <span class="token function">determineAsyncExecutor</span><span class="token punctuation">(</span>userDeclaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 没得 Executor 就直接报错咯</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;No executor specified and no default executor set on AsyncExecutionInterceptor either&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行方法</span>
            <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Future</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异常处理</span>
            <span class="token function">handleError</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDeclaredMethod<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异常处理</span>
            <span class="token function">handleError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> userDeclaredMethod<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 提交异步任务，就是使用Executor执行任务
     * 支持三种特殊的返回值类型 CompletableFuture、ListenableFuture、Future 会有返回值，其他的返回null
     * */</span>
    <span class="token keyword">return</span> <span class="token function">doSubmit</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postprocessafterinitialization" tabindex="-1"><a class="header-anchor" href="#postprocessafterinitialization" aria-hidden="true">#</a> postProcessAfterInitialization</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 忽略诸如作用域代理之类的 AOP 基础设施</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AopInfrastructureBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Ignore AOP infrastructure such as scoped proxies.</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * Advised 类型，扩展当前 advisor 给他
     *
     * 因为Spring使用Cglib、JDK 创建的代理对象都会添加 Advised 接口，所以这里的目的是 看看被代理类是否符合Pointcut的规则
     *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CglibAopProxy</span><span class="token punctuation">#</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AopProxyUtils</span><span class="token punctuation">#</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *
     *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">#</span><span class="token function">JdkDynamicAopProxy</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AopProxyUtils</span><span class="token punctuation">#</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Advised</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Advised</span> advised <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Advised</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * \`!advised.isFrozen()\` 不是冻结的，表示还可以扩展 Advisor，因为如果是冻结的会在创建代理Cglib代理对象的时候就解析Advisor设置CallBack
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CglibAopProxy</span><span class="token punctuation">#</span><span class="token function">getCallbacks</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>,而不是冻结的 则是在 调用代理对象的方法时才会解析Advisor
         *
         * \`opUtils.getTargetClass(bean)\` 拿到被代理对象，如果是cglib代理就是拿到父类咯
         *
         * isEligible 是符合条件的，就是 类有@Async 或者 方法有@Async 才会是true
         *
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEligible</span><span class="token punctuation">(</span><span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 将 @Async 的增强逻辑，添加到 被代理类中，也就是扩展被代理类的Advisor
             * */</span>
            <span class="token comment">// Add our local Advisor to the existing proxy&#39;s Advisor chain...</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beforeExistingAdvisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                advised<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                advised<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * isEligible 是符合条件的。
     * 不是原始类 且  (类有@Async 或者 方法有@Async 才会是true)
     *
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractBeanFactoryAwareAdvisingPostProcessor</span><span class="token punctuation">#</span><span class="token function">isEligible</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEligible</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProxyFactory</span> proxyFactory <span class="token operator">=</span> <span class="token function">prepareProxyFactory</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 设置Advisor
         * 用的这个 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationAsyncExecutionInterceptor</span></span><span class="token punctuation">}</span>
         * */</span>
        proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Use original ClassLoader if bean class not locally loaded in overriding class loader</span>
        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token keyword">instanceof</span> <span class="token class-name">SmartClassLoader</span> <span class="token operator">&amp;&amp;</span> classLoader <span class="token operator">!=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            classLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartClassLoader</span><span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginalClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建代理对象</span>
        <span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// No proxy needed.</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function v(m,b){const a=l("ExternalLinkIcon");return e(),p("div",null,[u,k,n("p",null,[n("a",r,[s("文档"),c(a)])]),d])}const g=t(i,[["render",v],["__file","Spring@Async.html.vue"]]);export{g as default};
