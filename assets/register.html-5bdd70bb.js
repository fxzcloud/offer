import{_ as p,V as e,W as c,X as s,Y as n,Z as o,$ as a,F as i}from"./framework-8edddef6.js";const l={},u=a('<h1 id="nacos服务注册" tabindex="-1"><a class="header-anchor" href="#nacos服务注册" aria-hidden="true">#</a> nacos服务注册</h1><blockquote><p>基于nacos2.x版本分析</p></blockquote><h2 id="nacos架构概述" tabindex="-1"><a class="header-anchor" href="#nacos架构概述" aria-hidden="true">#</a> nacos架构概述</h2><h3 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型" aria-hidden="true">#</a> 数据模型</h3><h4 id="服务和服务实例" tabindex="-1"><a class="header-anchor" href="#服务和服务实例" aria-hidden="true">#</a> 服务和服务实例</h4><p>在服务发现领域中，服务指的是由应用程序提供的一个或一组软件功能的一种抽象概念。它和应用有所不同，应用的范围更广，和服务属于包含关系，即一个应用可能会提供多个服务。为了能够更细粒度地区分和控制服务，Nacos 选择服务作为注册中心的最基本概念。</p><p>而服务实例（以下简称<code>实例</code>）是某个服务的具体提供能力的节点，一个实例仅从属于一个服务，而一个服务可以包含一个或多个实例。在许多场景下，实例又被称为服务提供者（Provider），而使用该服务的实例被称为服务消费者（Consumer）。</p><h4 id="定义服务" tabindex="-1"><a class="header-anchor" href="#定义服务" aria-hidden="true">#</a> 定义服务</h4><p>在 Nacos 中，服务的定义包括以下几个内容：</p><ul><li>命名空间（Namespace）：Nacos 数据模型中最顶层、也是包含范围最广的概念，用于在类似环境或租户等需要强制隔离的场景中定义。Nacos 的服务也需要使用命名空间来进行隔离。</li><li>分组（Group）：Nacos 数据模型中次于命名空间的一种隔离概念，区别于命名空间的强制隔离属性，分组属于一个弱隔离概念，主要用于逻辑区分一些服务使用场景或不同应用的同名服务，最常用的情况主要是同一个服务的测试分组和生产分组、或者将应用名作为分组以防止不同应用提供的服务重名。</li><li>服务名（Name）：该服务实际的名字，一般用于描述该服务提供了某种功能或能力。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/24/flxrFb.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>之所以 Nacos 将服务的定义拆分为<code>命名空间</code>、<code>分组</code>和<code>服务名</code>，除了方便隔离使用场景外，还有方便用户发现唯一服务的优点。在注册中心的实际使用场景上，同个公司的不同开发者可能会开发出类似作用的服务，如果仅仅使用服务名来做服务的定义和表示，容易在一些通用服务上出现冲突，比如登陆服务等。</p><p>通常推荐使用由运行环境作为<code>命名空间</code>、应用名作为<code>分组</code>和服务功能作为<code>服务名</code>的组合来确保该服务的天然唯一性，当然使用者可以忽略命名空间和分组，仅使用服务名作为服务唯一标示，这就需要使用者在定义服务名时额外增加自己的规则来确保在使用中能够唯一定位到该服务而不会发现到错误的服务上。</p><h4 id="服务元数据" tabindex="-1"><a class="header-anchor" href="#服务元数据" aria-hidden="true">#</a> 服务元数据</h4><p>服务的定义只是为服务设置了一些基本的信息，用于描述服务以及方便快速的找到服务，而服务的元数据是进一步定义了 Nacos 中服务的细节属性和描述信息。主要包含：</p><ul><li>健康保护阈值（ProtectThreshold）：为了防止因过多实例故障，导致所有流量全部流入剩余实例，继而造成流量压力将剩余实例被压垮形成的雪崩效应。应将健康保护阈值定义为一个 0 到 1 之间的浮点数。<strong>当域名健康实例数占总服务实例数的比例小于该值时，无论实例是否健康，都会将这个实例返回给客户端</strong>。这样做虽然损失了一部分流量，但是保证了集群中剩余健康实例能正常工作。</li><li>实例选择器（Selector）：用于在获取服务下的实例列表时，过滤和筛选实例。该选择器也被称为路由器，目前Nacos支持通过将实例的部分信息存储在外部元数据管理 CMDB 中，并在发现服务时使用 CMDB 中存储的元数据标签来进行筛选的能力。</li><li>拓展数据(extendData)：用于用户在注册实例时自定义扩展的元数据内容，形式为 K-V 。可以在服务中拓展服务的元数据信息，方便用户实现自己的自定义逻辑。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/24/2LR3Nb.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="定义实例" tabindex="-1"><a class="header-anchor" href="#定义实例" aria-hidden="true">#</a> 定义实例</h4><p>由于服务实例是具体提供服务的节点，因此 Nacos 在设计实例的定义时，主要需要存储该实例的一些网络相关的基础信息，主要包含以下内容：</p><ul><li>网络IP地址：该实例的 IP 地址，在 Nacos2.0 版本后支持设置为域名。</li><li>网络端口：该实例的端口信息。</li><li>健康状态（Healthy）：用于表示该实例是否为健康状态，会在 Nacos 中通过健康检查的手段进行维护，具体内容将在<code>Nacos 健康检查机制</code>章节中详细说明。</li><li>集群（Cluster）：用于标示该实例归属于哪个逻辑集群。</li><li>拓展数据(extendData)：用于用户自定义扩展的元数据内容，形式为K-V。可以在实例中拓展该实例的元数据信息，方便用户实现自己的自定义逻辑和标示该实例。</li></ul><h4 id="实例元数据" tabindex="-1"><a class="header-anchor" href="#实例元数据" aria-hidden="true">#</a> 实例元数据</h4><p>和服务元数据不同，实例的元数据主要作用于实例运维相关的数据信息。主要包含：</p><ul><li>权重（Weight）：实例级别的配置。权重为浮点数，范围为 0-10000。权重越大，分配给该实例的流量越大。</li><li>上线状态（Enabled）：标记该实例是否接受流量，优先级大于权重和健康状态。用于运维人员在不变动实例本身的情况下，快速地手动将某个实例从服务中移除。</li><li>拓展数据(extendData)：不同于实例定义中的拓展数据，这个拓展数据是给予运维人员在不变动实例本身的情况下，快速地修改和新增实例的扩展数据，从而达到运维实例的作用。</li></ul><p>在 Nacos2.0 版本中，实例数据被拆分为实例定义和实例元数据，主要是因为这两类数据其实是同一个实例的两种不同场景：开发运行场景及运维场景。对于上下线及权重这种属性，一般认为在实例已经在运行时，需要运维人员手动修改和维护的数据，而 IP，端口和集群等信息，一般情况下在实例启动并注册后，则不会在进行变更。将这两部分数据合并后，就能够得到实例的完整信息，也是 Nacos1.0 版本中的实例数据结构。</p><p>同时在 Nacos2.0 版本中，定义实例的这部分数据，会受到持久化属性的的影响，而实例元数据部分，则一定会进行持久化；这是因为运维操作需要保证操作的原子性，不能够因为外部环境的影响而导致操作被重置，例如在Nacos1.0 版本中，运维人员因为实例所处的网络存在问题，操作一个实例下线以此摘除流量，但是同样因为网络问题，该实例与 Nacos 的通信也受到影响，导致实例注销后重新注册，这可能导致上线状态被重新注册而覆盖，失去了运维人员操作的优先级。</p><p>当然，这部分元数据也不应该无限制的存储下去，如果实例确实已经移除，元数据也应该移除，为此，在 Nacos 2.0 版本后，通过该接口更新的元数据会在对应实例删除后，依旧存在一段时间，如果在此期间实例重新注册，该元数据依旧生效；您可以通过 nacos.naming.clean.expired-metadata.expired-time 及nacos.naming.clean.expired-metadata.interval 对记忆时间进行修改。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/24/ymhNkD.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="持久化属性" tabindex="-1"><a class="header-anchor" href="#持久化属性" aria-hidden="true">#</a> 持久化属性</h4><p>Nacos 提供两种类型的服务：<strong>持久化服务和非持久化服务</strong>，<strong>分别给类DNS 的基础的服务组件场景和上层实际业务服务场景使用</strong>。为了标示该服务是哪种类型的服务，需要在创建服务时选择服务的持久化属性。考虑到目前大多数使用动态服务发现的场景为非持久化服务的类型（如Spring Cloud，Dubbo，Service Mesh等），Nacos 将缺省值设置为了非持久化服务。</p><p>在 Nacos2.0 版本后，持久化属性的定义被抽象到服务中，一个服务只能被定义成持久化服务或非持久化服务，一旦定义完成，在服务生命周期结束之前，无法更改其持久化属性。</p><p>持久化属性将会影响服务及实例的数据是否会被 Nacos 进行持久化存储，设置为持久化之后，实例将不会再被自动移除，需要使用者手动移除实例。</p><blockquote><p>集群是 Nacos 中一组服务实例的一个逻辑抽象的概念，它介于服务和实例之间，是一部分服务属性的下沉和实例属性的抽象。</p></blockquote><h4 id="定义集群" tabindex="-1"><a class="header-anchor" href="#定义集群" aria-hidden="true">#</a> 定义集群</h4><p>在 Nacos 中，集群中主要保存了有关健康检查的一些信息和数据：</p><ul><li>健康检查类型（HealthCheckType）：使用哪种类型的健康检查方式，目前支持：TCP，HTTP，MySQL；设置为NONE可以关闭健康检查。</li><li>健康检查端口（HealthCheckPort）：设置用于健康检查的端口。</li><li>是否使用实例端口进行健康检查（UseInstancePort）：如果使用实例端口进行健康检查，将会使用实例定义中的网络端口进行健康检查，而不再使用上述设置的健康检查端口进行。</li><li>拓展数据(extendData)：用于用户自定义扩展的元数据内容，形式为 K-V 。可以自定义扩展该集群的元数据信息，方便用户实现自己的自定义逻辑和标示该集群。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/24/mX7Hot.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><p>在注册中心中，实例数据都和服务实例的状态绑定，因此服务实例的状态直接决定了注册中心中实例数据的生命周期。而服务作为实例的聚合抽象，生命周期也会由服务实例的状态来决定。</p><h4 id="服务的生命周期" tabindex="-1"><a class="header-anchor" href="#服务的生命周期" aria-hidden="true">#</a> 服务的生命周期</h4><p>服务的生命周期相对比较简单，是从用户向注册中心发起服务注册的请求开始。在Nacos中，发起服务注册有两种方式，一种是直接创建服务，一种是注册实例时自动创建服务；前者可以让发起者在创建时期就制定一部分服务的元数据信息，而后者只会使用默认的元数据创建服务。</p><p>在生命周期期间，用户可以向服务中新增，删除服务实例，同时也能够对服务的元数据进行修改。</p><p>当用户主动发起删除服务的请求或一定时间内服务下没有实例（无论健康与否）后，服务才结束其生命周期，等待下一次的创建。</p><h4 id="实例的生命周期" tabindex="-1"><a class="header-anchor" href="#实例的生命周期" aria-hidden="true">#</a> 实例的生命周期</h4><p>实例的生命周期开始于注册实例的请求。但是根据不同的持久化属性，实例后续的生命周期有一定的不同。</p><p>持久化的实例，会通过健康检查的状态维护健康状态，但是不会自动的终止该实例的生命周期；在生命周期结束之前，持久化实例均可以被修改数据，甚至主动修改其健康状态。唯一终止持久化实例生命周期的方式就是注销实例的请求。</p><p>而非持久化的实例，会根据版本的不同，采用不同的方式维持健康状态：如果是 Nacos1.0 的版本，会通过定时的心跳请求来进行续约，当超过一定时间内没有心跳进行续约时，该非持久化实例则终止生命周期；如果是Nacos2.0 的版本，会通过 gRPC 的长连接来维持状态，当连接发生中断时，该非持久化实例则终止生命周期。当然，非持久化实例也可以通过注销实例的请求，主动终止其生命周期，但是由于长连接和心跳续约的存在，可能导致前一个实例数据的生命周期刚被终止移除，立刻又因为心跳和长连接的补偿请求，再次开启实例的生命周期，给人一种注销失败的假象。</p><h4 id="集群的生命周期" tabindex="-1"><a class="header-anchor" href="#集群的生命周期" aria-hidden="true">#</a> 集群的生命周期</h4><p>集群的生命周期则相对复杂，由于集群作为服务和实例的一个中间层，因此集群的生命周期与实例和服务的生命周期均有关。</p><p>集群的生命周期开始与该集群第一个实例的生命周期同时开始，因为一个实例必定归属于一个集群，哪怕是默认的集群，因此当第一个实例的生命周期开始时，也就是集群生命周期的开始；</p><p>当一个集群下不存在实例时，集群的生命周期也不会立刻结束，而是会等到这个服务的生命周期结束时，才会一起结束生命周期。</p><h4 id="元数据的生命周期" tabindex="-1"><a class="header-anchor" href="#元数据的生命周期" aria-hidden="true">#</a> 元数据的生命周期</h4><p>由于元数据的其对应的数据模型是紧密关联的，所以元数据的生命周期基本和对应的数据模型保持一致。但是也如前文所说，元数据通常为运维人员的主动操作的数据，会被 Nacos 进行一段时间内的记忆，因此元数据的生命周期的终止相比对应的数据要滞后；若这滞后期间内，对应的数据又重新开始生命周期，则该元数据的生命周期将被立刻重置，不再终止。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/24/rN7XlB.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="客户端服务注册" tabindex="-1"><a class="header-anchor" href="#客户端服务注册" aria-hidden="true">#</a> 客户端服务注册</h2>',54),k={href:"https://note.youdao.com/s/cqEWhzqy",target:"_blank",rel:"noopener noreferrer"},r=a(`<h3 id="nacosnamingservice" tabindex="-1"><a class="header-anchor" href="#nacosnamingservice" aria-hidden="true">#</a> NacosNamingService</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosNamingService</span> <span class="token keyword">implements</span> <span class="token class-name">NamingService</span> <span class="token punctuation">{</span>
    
   	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    

  	<span class="token comment">// 一般使用这个构造 参数是注册中心等相关信息</span>
    <span class="token keyword">public</span> <span class="token class-name">NacosNamingService</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token function">init</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
  	<span class="token comment">// 初始化一些必要的参数</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 先异步加载一些耗时组件</span>
        <span class="token class-name">PreInitUtils</span><span class="token punctuation">.</span><span class="token function">asyncPreLoadCostComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">NacosClientProperties</span> nacosClientProperties <span class="token operator">=</span> <span class="token class-name">NacosClientProperties</span><span class="token punctuation">.</span><span class="token constant">PROTOTYPE</span><span class="token punctuation">.</span><span class="token function">derive</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ValidatorUtils</span><span class="token punctuation">.</span><span class="token function">checkInitParam</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> <span class="token class-name">InitUtils</span><span class="token punctuation">.</span><span class="token function">initNamespaceForNaming</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InitUtils</span><span class="token punctuation">.</span><span class="token function">initSerialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InitUtils</span><span class="token punctuation">.</span><span class="token function">initWebRootContext</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">initLogName</span><span class="token punctuation">(</span>nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">this</span><span class="token punctuation">.</span>notifierEventScope <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>changeNotifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstancesChangeNotifier</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notifierEventScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
				
      	<span class="token comment">// 会注册一个事件类型和事件发布者的映射</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerToPublisher</span><span class="token punctuation">(</span><span class="token class-name">InstancesChangeEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// 会注册一个事件订阅者</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerSubscriber</span><span class="token punctuation">(</span>changeNotifier<span class="token punctuation">)</span><span class="token punctuation">;</span>

      	<span class="token comment">// 本地服务信息的缓存</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>serviceInfoHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceInfoHolder</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notifierEventScope<span class="token punctuation">,</span> nacosClientProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// clientProxy</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>clientProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingClientProxyDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namespace<span class="token punctuation">,</span> serviceInfoHolder<span class="token punctuation">,</span> nacosClientProperties<span class="token punctuation">,</span>
                changeNotifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
 
    <span class="token comment">// 注册一个实例</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
			<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 批量注册服务实例</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchRegisterInstance</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
  	<span class="token comment">// 批量注销服务实例</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchDeregisterInstance</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
     	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 注销服务实例</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregisterInstance</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取全部符合条件的服务实例</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllInstances</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
     	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
   	<span class="token comment">// 查询健康实例</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectInstances</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

   	<span class="token comment">// 选择一个健康的实例</span>
    <span class="token keyword">public</span> <span class="token class-name">Instance</span> <span class="token function">selectOneHealthyInstance</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 订阅</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
     
    <span class="token comment">// 取消订阅</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    
    <span class="token comment">//获取所有（或指定）服务名称</span>
    <span class="token keyword">public</span> <span class="token class-name">ListView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getServicesOfServer</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取所有订阅的服务 </span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSubscribeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到NacosNamingService中重载了很多方法，其中注册都会走到下面的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查一些参数是否合法</span>
    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkInstanceIsLegal</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkAndStripGroupNamePrefix</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 注册服务</span>
    clientProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>clientProxy是在init方法中初始化的，类型为NamingClientProxyDelegate。</p><h3 id="namingclientproxy" tabindex="-1"><a class="header-anchor" href="#namingclientproxy" aria-hidden="true">#</a> NamingClientProxy</h3><p>NamingClientProxy的作用就是向服务端进行请求。NamingClientProxyDelegate会根据实例的类型选择clientProxy执行注册。对于实例来讲，默认都是临时实例，nacos2.0以后临时实例使用grpc的通信方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">NamingClientProxyDelegate</span><span class="token operator">:</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据实例的类型选择clientProxy执行注册</span>
  	<span class="token function">getExecuteClientProxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 <span class="token keyword">private</span> <span class="token class-name">NamingClientProxy</span> <span class="token function">getExecuteClientProxy</span><span class="token punctuation">(</span><span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   			<span class="token comment">// nacos2.0以后临时实例使用grpc的通信方式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> grpcClientProxy<span class="token punctuation">.</span><span class="token function">isAbilitySupportedByServer</span><span class="token punctuation">(</span><span class="token class-name">AbilityKey</span><span class="token punctuation">.</span><span class="token constant">SERVER_SUPPORT_PERSISTENT_INSTANCE_BY_GRPC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> grpcClientProxy<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
   
        <span class="token keyword">return</span> httpClientProxy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看一下grpc的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">NamingGrpcClientProxy</span><span class="token operator">:</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[REGISTER-SERVICE] {} registering service {} with instance {}&quot;</span><span class="token punctuation">,</span> namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span>
            instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 注册临时实例</span>
        <span class="token function">registerServiceForEphemeral</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 注册持久化实例</span>
        <span class="token function">doRegisterServiceForPersistent</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

     <span class="token comment">// 注册临时实例</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceForEphemeral</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓存redo信息</span>
        redoService<span class="token punctuation">.</span><span class="token function">cacheInstanceForRedo</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 执行注册</span>
        <span class="token function">doRegisterService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	 <span class="token comment">// 执行注册请求</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRegisterService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行注册请求</span>
        <span class="token class-name">InstanceRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceRequest</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span>
                <span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">REGISTER_INSTANCE</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">requestToServer</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 记录实例已经注册到redo信息中</span>
        redoService<span class="token punctuation">.</span><span class="token function">instanceRegistered</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token comment">// 注册持久化实例</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRegisterServiceForPersistent</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token class-name">PersistentInstanceRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersistentInstanceRequest</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span>
                <span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">REGISTER_INSTANCE</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">requestToServer</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到根据实例是否是临时实例走了两个方法，其实这两个方法最大的区别就是就是持久化实例没有使用redo机制。</p><h4 id="redo机制" tabindex="-1"><a class="header-anchor" href="#redo机制" aria-hidden="true">#</a> redo机制</h4><p>NamingGrpcRedoService封装了重做逻辑，但是它首先是一个监听器，他实现了nacos的ConnectionEventListener，会分别在链接连接和取消连接时回调相关方法来设置链接的状态。其次，NamingGrpcRedoService中构造了一个线程池，会定时执行redo相关逻辑，也就是链接存在，没有注册成功会重新注册，或者取消注册的逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NamingGrpcRedoService</span><span class="token punctuation">(</span><span class="token class-name">NamingGrpcClientProxy</span> clientProxy<span class="token punctuation">,</span> <span class="token class-name">NacosClientProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>redoExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>redoThreadCount<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NameThreadFactory</span><span class="token punctuation">(</span><span class="token constant">REDO_THREAD_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 执行RedoScheduledTask的逻辑进行重做</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>redoExecutor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedoScheduledTask</span><span class="token punctuation">(</span>clientProxy<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> redoDelayTime<span class="token punctuation">,</span> redoDelayTime<span class="token punctuation">,</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedoScheduledTask中封装了redo的逻辑，会根据NamingGrpcRedoService获取需要制定重做的服务，然后执行相关逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RedoScheduledTask</span>：
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 链接断开了 不执行下面逻辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redoService<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LogUtils</span><span class="token punctuation">.</span><span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Grpc Connection is disconnect, skip current redo task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">redoForInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">redoForSubscribes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LogUtils</span><span class="token punctuation">.</span><span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Redo task run with unexpected exception: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

		<span class="token comment">// 实例重做</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">redoForInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历需要重试的实例</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InstanceRedoData</span> each <span class="token operator">:</span> redoService<span class="token punctuation">.</span><span class="token function">findInstanceRedoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 重试实例</span>
                <span class="token function">redoForInstance</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LogUtils</span><span class="token punctuation">.</span><span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Redo instance operation {} for {}@@{} failed. &quot;</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getRedoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        each<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">redoForInstance</span><span class="token punctuation">(</span><span class="token class-name">InstanceRedoData</span> redoData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取重试类型</span>
        <span class="token class-name">RedoData<span class="token punctuation">.</span>RedoType</span> redoType <span class="token operator">=</span> redoData<span class="token punctuation">.</span><span class="token function">getRedoType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取服务名</span>
        <span class="token class-name">String</span> serviceName <span class="token operator">=</span> redoData<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取分组名</span>
        <span class="token class-name">String</span> groupName <span class="token operator">=</span> redoData<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LogUtils</span><span class="token punctuation">.</span><span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Redo instance operation {} for {}@@{}&quot;</span><span class="token punctuation">,</span> redoType<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>redoType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">REGISTER</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClientDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 执行注册</span>
                <span class="token function">processRegisterRedoType</span><span class="token punctuation">(</span>redoData<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">UNREGISTER</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClientDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 执行注销</span>
                clientProxy<span class="token punctuation">.</span><span class="token function">doDeregisterService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> redoData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">REMOVE</span><span class="token operator">:</span>
                <span class="token comment">// 移除重试实例</span>
                redoService<span class="token punctuation">.</span><span class="token function">removeInstanceForRedo</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有个问题，NamingGrpcRedoService是事件监听器，那么是哪里回调的呢？</p><p>在上面NamingGrpcClientProxy创建的时候，会在构造中调用到rpcClient的start方法，其中执行链接相关的回调逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// cas设置客户端状态为： 初始化 -&gt; 启动中</span>
    <span class="token keyword">boolean</span> success <span class="token operator">=</span> rpcClientStatus<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">INITIALIZED</span><span class="token punctuation">,</span> <span class="token class-name">RpcClientStatus</span><span class="token punctuation">.</span><span class="token constant">STARTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 客户端事件执行器，周期调度线程池</span>
    clientEventExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;com.alibaba.nacos.client.remote.worker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 链接、断开链接事件处理</span>
    clientEventExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>clientEventExecutor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>clientEventExecutor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConnectionEvent</span> take<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                take <span class="token operator">=</span> eventLinkedBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>take<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  	<span class="token comment">// 通知链接事件</span>
                    <span class="token function">notifyConnected</span><span class="token punctuation">(</span>take<span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>take<span class="token punctuation">.</span><span class="token function">isDisConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  	<span class="token comment">// 通知链接关闭事件</span>
                    <span class="token function">notifyDisConnected</span><span class="token punctuation">(</span>take<span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Do nothing</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

		<span class="token comment">// 回调所有的监听器</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">notifyConnected</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connectionEventListeners<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">LoggerUtils</span><span class="token punctuation">.</span><span class="token function">printIfInfoEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span> <span class="token string">&quot;[{}] Notify connected event to listeners.&quot;</span><span class="token punctuation">,</span> rpcClientConfig<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConnectionEventListener</span> connectionEventListener <span class="token operator">:</span> connectionEventListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                connectionEventListener<span class="token punctuation">.</span><span class="token function">onConnected</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LoggerUtils</span><span class="token punctuation">.</span><span class="token function">printIfErrorEnabled</span><span class="token punctuation">(</span><span class="token constant">LOGGER</span><span class="token punctuation">,</span> <span class="token string">&quot;[{}] Notify connect listener error, listener = {}&quot;</span><span class="token punctuation">,</span>
                        rpcClientConfig<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> connectionEventListener<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例注册" tabindex="-1"><a class="header-anchor" href="#实例注册" aria-hidden="true">#</a> 实例注册</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRegisterService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行注册请求</span>
    <span class="token class-name">InstanceRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceRequest</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span>
            <span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">REGISTER_INSTANCE</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">requestToServer</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 记录实例已经注册到redo信息中 逻辑很简单 就是标识之前缓存的信息为已注册 这些task就不执行redo</span>
    redoService<span class="token punctuation">.</span><span class="token function">instanceRegistered</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面会向服务端发送注册请求进行注册。关于grpc封装的详细细节在后面的文章分析，本文仅分析服务注册相关内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Response</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">requestToServer</span><span class="token punctuation">(</span><span class="token class-name">AbstractNamingRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseClass<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        request<span class="token punctuation">.</span><span class="token function">putAllHeader</span><span class="token punctuation">(</span>
                <span class="token function">getSecurityHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response <span class="token operator">=</span> requestTimeout <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> rpcClient<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">:</span> rpcClient<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> requestTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> response<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Server return unexpected response &#39;{}&#39;, expected response should be &#39;{}&#39;&quot;</span><span class="token punctuation">,</span>
                response<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> responseClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Server return invalid response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">recordRequestFailedMetrics</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> e<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">recordRequestFailedMetrics</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> e<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Request nacos server failed: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务端服务注册" tabindex="-1"><a class="header-anchor" href="#服务端服务注册" aria-hidden="true">#</a> 服务端服务注册</h2><p>上述我们知道，nacos2.0以后对于临时实例的注册，采用的是grpc。那么服务端注册的入口在哪里？</p><p>相关代码在InstanceRequestHandler：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceRequestHandler</span> <span class="token keyword">extends</span> <span class="token class-name">RequestHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstanceRequest</span><span class="token punctuation">,</span> <span class="token class-name">InstanceResponse</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EphemeralClientOperationServiceImpl</span> clientOperationService<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">InstanceRequestHandler</span><span class="token punctuation">(</span><span class="token class-name">EphemeralClientOperationServiceImpl</span> clientOperationService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>clientOperationService <span class="token operator">=</span> clientOperationService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@TpsControl</span><span class="token punctuation">(</span>pointName <span class="token operator">=</span> <span class="token string">&quot;RemoteNamingInstanceRegisterDeregister&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;RemoteNamingInstanceRegisterDeregister&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span>action <span class="token operator">=</span> <span class="token class-name">ActionTypes</span><span class="token punctuation">.</span><span class="token constant">WRITE</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ExtractorManager.Extractor</span><span class="token punctuation">(</span>rpcExtractor <span class="token operator">=</span> <span class="token class-name">InstanceRequestParamExtractor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">InstanceResponse</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">InstanceRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">RequestMeta</span> meta<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token class-name">Service</span>
                <span class="token punctuation">.</span><span class="token function">newService</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InstanceUtil</span><span class="token punctuation">.</span><span class="token function">setInstanceIdIfEmpty</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getGroupedServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">REGISTER_INSTANCE</span><span class="token operator">:</span>
                <span class="token comment">// 注册实例</span>
                <span class="token keyword">return</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> request<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">DE_REGISTER_INSTANCE</span><span class="token operator">:</span>
                <span class="token comment">// 注销实例</span>
                <span class="token keyword">return</span> <span class="token function">deregisterInstance</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> request<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">INVALID_PARAM</span><span class="token punctuation">,</span>
                        <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported request type %s&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">InstanceResponse</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">InstanceRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">RequestMeta</span> meta<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注册实例</span>
        clientOperationService<span class="token punctuation">.</span><span class="token function">registerInstance</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> meta<span class="token punctuation">.</span><span class="token function">getConnectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 发布RegisterInstanceTraceEvent</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterInstanceTraceEvent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                meta<span class="token punctuation">.</span><span class="token function">getClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstanceResponse</span><span class="token punctuation">(</span><span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">REGISTER_INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">InstanceResponse</span> <span class="token function">deregisterInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">InstanceRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">RequestMeta</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注销实例</span>
        clientOperationService<span class="token punctuation">.</span><span class="token function">deregisterInstance</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> meta<span class="token punctuation">.</span><span class="token function">getConnectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 发布DeregisterInstanceTraceEvent</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeregisterInstanceTraceEvent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                meta<span class="token punctuation">.</span><span class="token function">getClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">DeregisterInstanceReason</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                service<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstanceResponse</span><span class="token punctuation">(</span><span class="token class-name">NamingRemoteConstants</span><span class="token punctuation">.</span><span class="token constant">DE_REGISTER_INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clientoperationservice" tabindex="-1"><a class="header-anchor" href="#clientoperationservice" aria-hidden="true">#</a> ClientOperationService</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">,</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token comment">// check if instance is legal</span>
    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkInstanceIsLegal</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取单例的Service</span>
    <span class="token class-name">Service</span> singleton <span class="token operator">=</span> <span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleton<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span><span class="token constant">INVALID_PARAM</span><span class="token punctuation">,</span>
                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Current service %s is persistent service, can&#39;t register ephemeral instance.&quot;</span><span class="token punctuation">,</span>
                        singleton<span class="token punctuation">.</span><span class="token function">getGroupedServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取Client</span>
    <span class="token class-name">Client</span> client <span class="token operator">=</span> clientManager<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">clientIsLegal</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取InstancePublishInfo</span>
    <span class="token class-name">InstancePublishInfo</span> instanceInfo <span class="token operator">=</span> <span class="token function">getPublishInfo</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 保存实例和服务信息</span>
    client<span class="token punctuation">.</span><span class="token function">addServiceInstance</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> instanceInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">setLastUpdatedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">recalculateRevision</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发布客户端注册事件 会触发客户端和服务索引的创建</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientRegisterServiceEvent</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NotifyCenter</span>
            <span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MetadataEvent<span class="token punctuation">.</span>InstanceMetadataEvent</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> instanceInfo<span class="token punctuation">.</span><span class="token function">getMetadataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="servicemanager" tabindex="-1"><a class="header-anchor" href="#servicemanager" aria-hidden="true">#</a> ServiceManager</h3><p>获取服务信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">,</span> <span class="token class-name">Service</span><span class="token punctuation">&gt;</span></span> singletonRepository<span class="token punctuation">;</span>
    
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> namespaceSingletonMaps<span class="token punctuation">;</span>
    
<span class="token keyword">public</span> <span class="token class-name">Service</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保存服务信息</span>
    singletonRepository<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MetadataEvent<span class="token punctuation">.</span>ServiceMetadataEvent</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> service<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Service</span> result <span class="token operator">=</span> singletonRepository<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 保存服务和命名空间信息</span>
    namespaceSingletonMaps<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> namespace <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    namespaceSingletonMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ephemeralipportclientmanager" tabindex="-1"><a class="header-anchor" href="#ephemeralipportclientmanager" aria-hidden="true">#</a> EphemeralIpPortClientManager</h3><p>获取客户端信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IpPortBasedClient</span><span class="token punctuation">&gt;</span></span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	 <span class="token comment">// 客户端连接</span>
   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">clientConnected</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Client</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        clients<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">SRV_LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Client connection {} connect&quot;</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IpPortBasedClient</span> ipPortBasedClient <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IpPortBasedClient</span><span class="token punctuation">)</span> client<span class="token punctuation">;</span>
            ipPortBasedClient<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ipPortBasedClient<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

		<span class="token comment">// 客户端取消连接</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">clientDisconnected</span><span class="token punctuation">(</span><span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">SRV_LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Client connection {} disconnect, remove instances and subscribers&quot;</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IpPortBasedClient</span> client <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">boolean</span> isResponsible <span class="token operator">=</span> <span class="token function">isResponsibleClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientEvent<span class="token punctuation">.</span>ClientDisconnectEvent</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> isResponsible<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientReleaseEvent</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> isResponsible<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

		<span class="token comment">// 获取客户端</span>
  	<span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstractclient" tabindex="-1"><a class="header-anchor" href="#abstractclient" aria-hidden="true">#</a> AbstractClient</h3><p>Nacos2.0以后新增<strong>Client模型</strong>。<strong>一个客户端gRPC长连接对应一个Client，每个Client有自己唯一的id（clientId）</strong>。Client负责管理一个客户端的服务实例注册Publish和服务订阅Subscribe。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">,</span> <span class="token class-name">InstancePublishInfo</span><span class="token punctuation">&gt;</span></span> publishers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存服务实例</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addServiceInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">InstancePublishInfo</span> instancePublishInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instancePublishInfo <span class="token keyword">instanceof</span> <span class="token class-name">BatchInstancePublishInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InstancePublishInfo</span> old <span class="token operator">=</span> publishers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> instancePublishInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MetricsMonitor</span><span class="token punctuation">.</span><span class="token function">incrementIpCountWithBatchRegister</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">BatchInstancePublishInfo</span><span class="token punctuation">)</span> instancePublishInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> publishers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> instancePublishInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">MetricsMonitor</span><span class="token punctuation">.</span><span class="token function">incrementInstanceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientEvent<span class="token punctuation">.</span>ClientChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">SRV_LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Client change for service {}, {}&quot;</span><span class="token punctuation">,</span> service<span class="token punctuation">,</span> <span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，一个客户端仅能注册服务对应的一个实例。<strong>同时客户端注册发布的ClientChangedEvent会触发集群同步</strong>。集群同步相关内容在后续数据一致性相关文章分析。</p><h3 id="clientserviceindexesmanager" tabindex="-1"><a class="header-anchor" href="#clientserviceindexesmanager" aria-hidden="true">#</a> ClientServiceIndexesManager</h3><p>上述保存了服务信息、服务和命名空间的关系映射，服务和实例的关系映射。那么如何通过客户端快速检索服务呢？在上面发布的ClientRegisterServiceEvent会触发客户端金额服务索引的创建。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> 	 <span class="token class-name">ClientServiceIndexesManager</span><span class="token operator">:</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> publisherIndexes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 监听的事件类型：</span>
		<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">subscribeTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientRegisterServiceEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientDeregisterServiceEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientSubscribeServiceEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientUnsubscribeServiceEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientReleaseEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    

		<span class="token comment">// 回调方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientReleaseEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">handleClientDisconnect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientReleaseEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientOperationEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">handleClientOperation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

		<span class="token comment">// 处理客户端操作事件</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleClientOperation</span><span class="token punctuation">(</span><span class="token class-name">ClientOperationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Service</span> service <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> clientId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// 处理客户端注册事件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientRegisterServiceEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addPublisherIndexes</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientDeregisterServiceEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">removePublisherIndexes</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientSubscribeServiceEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addSubscriberIndexes</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientUnsubscribeServiceEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">removeSubscriberIndexes</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
		<span class="token comment">// 添加客户端和服务的索引</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addPublisherIndexes</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
        publisherIndexes<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        publisherIndexes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      	<span class="token comment">// ServiceChangedEvent会触发订阅的推送 相关内容在服务发现和订阅文章中分析。</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServiceEvent<span class="token punctuation">.</span>ServiceChangedEvent</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>nacos2.0以后，临时实例的注册方式采用grpc。</p><p>客户端注册时会使用redo机制进行注册、注销操作。</p><p>服务端一个client只能注册一个服务实例。保存了服务和命名空间、服务和实例、客户端和服务相关的映射关系。</p><p>注册过程会触发nacos集群数据同步、订阅客户端推送等动作。</p>`,47);function d(v,m){const t=i("ExternalLinkIcon");return e(),c("div",null,[u,s("p",null,[n("nacos client提供了NacosNamingService进行服务注册，由"),s("a",k,[n("spring cloud服务注册和发现"),o(t)]),n(" 也可以发现，客户端进行服务注册使用的都是NacosNamingService。")]),r])}const g=p(l,[["render",d],["__file","register.html.vue"]]);export{g as default};
