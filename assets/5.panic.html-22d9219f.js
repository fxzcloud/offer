import{_ as n,V as s,W as a,$ as e}from"./framework-8edddef6.js";const p={},t=e(`<h1 id="panic" tabindex="-1"><a class="header-anchor" href="#panic" aria-hidden="true">#</a> panic</h1><p><code>panic</code>是go的内置函数，当遇到不可恢复的错误时，程序往往就会抛出<code>panic</code>，比如常见的空指针访问</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span>
	<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面这段代码，程序就会抛出如下的<code>panic</code>，然后程序就会停止。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>panic: runtime error: invalid memory address or nil pointer dereference
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在一些情况下，我们也会手动调用<code>panic</code>函数来让程序退出，从而避免更严重的后果。平时也会用另一个内置函数<code>recover</code>来捕获<code>panic</code>，并配合<code>defer</code>使用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span>
	<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么<code>recover</code>函数一定要在<code>defer</code>里面使用，<code>recover</code>做了些什么工作，这些问题都会在下面的内容得到解答。</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p><code>panic</code>在运行时也有对应的结构进行表示，那就是<code>runtime._panic</code>，其结构并不复杂，如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _panic <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	argp      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// pointer to arguments of deferred call run during panic; cannot move - known to liblink</span>
	arg       any            <span class="token comment">// argument to panic</span>
	link      <span class="token operator">*</span>_panic        <span class="token comment">// link to earlier panic</span>
	pc        <span class="token builtin">uintptr</span>        <span class="token comment">// where to return to in runtime if this panic is bypassed</span>
	sp        unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// where to return to in runtime if this panic is bypassed</span>
	recovered <span class="token builtin">bool</span>           <span class="token comment">// whether this panic is over</span>
	aborted   <span class="token builtin">bool</span>           <span class="token comment">// the panic was aborted</span>
	goexit    <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的结构与<code>defer</code>非常类似，</p><ul><li><code>link</code>指向下一个<code>_panic</code>结构，</li><li><code>pc</code>和<code>sp</code>指向调用函数的执行现场便于日后恢复，</li><li><code>arg</code>就是<code>panic</code>函数的参数，</li><li><code>argp</code>指向<code>defer</code>的参数，<code>panic</code>发生后便会触发<code>defer</code>的执行</li><li><code>aborted</code>表示其是否被强制停止</li></ul><p><code>panic</code>跟<code>defer</code>一样，也是以链表的形式存在于协程中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> g <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	_panic    <span class="token operator">*</span>_panic <span class="token comment">// innermost panic - offset known to liblink</span>
	_defer    <span class="token operator">*</span>_defer <span class="token comment">// innermost defer</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202401292031377.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="恐慌" tabindex="-1"><a class="header-anchor" href="#恐慌" aria-hidden="true">#</a> 恐慌</h2><p>无论是我们主动调用<code>panic</code>函数，抑或是程序发生的<code>panic</code>，最终都会走入<code>runtime.gopanic</code>函数中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gopanic</span><span class="token punctuation">(</span>e any<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在开始时，首先会检测参数是否为<code>nil</code>，如果是<code>nil</code>的话就会new一个<code>runtime.PanicNilError</code>类型的错误</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> e <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> debug<span class="token punctuation">.</span>panicnil<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        e <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>PanicNilError<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        panicnil<span class="token punctuation">.</span><span class="token function">IncNonDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将当前的<code>panic</code>加入协程的链表头部</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p _panic
p<span class="token punctuation">.</span>arg <span class="token operator">=</span> e
p<span class="token punctuation">.</span>link <span class="token operator">=</span> gp<span class="token punctuation">.</span>_panic
gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_panic<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后进入<code>for</code>循环开始逐个处理当前协程的<code>defer</code>链表</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token punctuation">{</span>
		d <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_defer
		<span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> d<span class="token punctuation">.</span>started <span class="token punctuation">{</span>
			<span class="token keyword">if</span> d<span class="token punctuation">.</span>_panic <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				d<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>aborted <span class="token operator">=</span> <span class="token boolean">true</span>
			<span class="token punctuation">}</span>
			d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		d<span class="token punctuation">.</span>started <span class="token operator">=</span> <span class="token boolean">true</span>
        d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>_panic<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">noescape</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前的<code>defer</code>已经被其它的<code>panic</code>触发了，即<code>_defer.started == true</code>，那么较早的<code>panic</code>将不会执行。然后再执行<code>defer</code>对应的函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p<span class="token punctuation">.</span>argp <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">getargp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>argp <span class="token operator">=</span> <span class="token boolean">nil</span>
d<span class="token punctuation">.</span>_panic <span class="token operator">=</span> <span class="token boolean">nil</span>

d<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token boolean">nil</span>
gp<span class="token punctuation">.</span>_defer <span class="token operator">=</span> d<span class="token punctuation">.</span>link
<span class="token function">freedefer</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完后回收当前的<code>defer</code>结构，继续执行下一个<code>defer</code>，当执行完全部的<code>defer</code>结构后且期间没有被恢复，就会进入<code>runtime.fatalpanic</code>函数，该函数是<code>unrecoverable</code>即不可恢复的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fatalpanic</span><span class="token punctuation">(</span>msgs <span class="token operator">*</span>_panic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pc <span class="token operator">:=</span> <span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	sp <span class="token operator">:=</span> <span class="token function">getcallersp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> docrash <span class="token builtin">bool</span>
	<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">startpanic_m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> msgs <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			runningPanicDefers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token function">printpanics</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		docrash <span class="token operator">=</span> <span class="token function">dopanic_m</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> sp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> docrash <span class="token punctuation">{</span>
		<span class="token function">crash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">systemstack</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// not reached</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这期间会让<code>printpanics</code>打印<code>panic</code>的信息，我们通常看到的调用栈信息就是由它输出的，最后由<code>runtime.exit</code>函数通过系统调用<code>_ExitProcess</code>退出程序。</p><h2 id="恢复" tabindex="-1"><a class="header-anchor" href="#恢复" aria-hidden="true">#</a> 恢复</h2><p>通过调用内置函数<code>recover</code>，编译期间会变为对<code>runtime.gorecover</code>函数的调用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">gorecover</span><span class="token punctuation">(</span>argp <span class="token builtin">uintptr</span><span class="token punctuation">)</span> any <span class="token punctuation">{</span>
	gp <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	p <span class="token operator">:=</span> gp<span class="token punctuation">.</span>_panic
	<span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>goexit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>recovered <span class="token operator">&amp;&amp;</span> argp <span class="token operator">==</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>argp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p<span class="token punctuation">.</span>recovered <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token keyword">return</span> p<span class="token punctuation">.</span>arg
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的实现非常简单，只干了<code>p.recovered = true</code>这么一件事，而真正负责处理恢复逻辑的代码实际上在<code>gopanic</code>函数里</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
    	d<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	<span class="token operator">...</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>recovered <span class="token punctuation">{</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>恢复的逻辑在<code>defer</code>执行后，到这里也就明白了为什么<code>recover</code>函数只能在<code>defer</code>中使用，如果在<code>defer</code>之外使用<code>recover</code>函数的话<code>gp._panic</code>就等于<code>nil</code>，自然<code>p.recovered</code>就不会被设置为<code>true</code>，那么在<code>gopanic</code>函数中也就不会走到恢复这部分逻辑里面来。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> p<span class="token punctuation">.</span>recovered <span class="token punctuation">{</span>
    gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> p<span class="token punctuation">.</span>link
    <span class="token keyword">for</span> gp<span class="token punctuation">.</span>_panic <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> gp<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>aborted <span class="token punctuation">{</span>
    	gp<span class="token punctuation">.</span>_panic <span class="token operator">=</span> gp<span class="token punctuation">.</span>_panic<span class="token punctuation">.</span>link
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> gp<span class="token punctuation">.</span>_panic <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    	gp<span class="token punctuation">.</span>sig <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>

    gp<span class="token punctuation">.</span>sigcode0 <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span>
    gp<span class="token punctuation">.</span>sigcode1 <span class="token operator">=</span> pc
    <span class="token function">mcall</span><span class="token punctuation">(</span>recovery<span class="token punctuation">)</span>
    <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;recovery failed&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>恢复时会清理链表中那些已经被强制停止的<code>panic</code>，然后进入<code>runtime.recovery</code>函数中，由<code>runtime.gogo</code>回到用户函数的正常逻辑流程中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">recovery</span><span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Info about defer passed in G struct.</span>
	sp <span class="token operator">:=</span> gp<span class="token punctuation">.</span>sigcode0
	pc <span class="token operator">:=</span> gp<span class="token punctuation">.</span>sigcode1
    
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>sp <span class="token operator">=</span> sp
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>pc <span class="token operator">=</span> pc
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>lr <span class="token operator">=</span> <span class="token number">0</span>
	gp<span class="token punctuation">.</span>sched<span class="token punctuation">.</span>ret <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token function">gogo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gp<span class="token punctuation">.</span>sched<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后有一个重点需要注意的是这行代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gp.sched.ret = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它将<code>ret</code>值设置成为了1，从<code>runtime.deferproc</code>的函数注释中可以看代码下面这些内容</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferproc</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	<span class="token comment">// deferproc returns 0 normally.</span>
	<span class="token comment">// a deferred func that stops a panic</span>
	<span class="token comment">// makes the deferproc return 1.</span>
	<span class="token comment">// the code the compiler generates always</span>
	<span class="token comment">// checks the return value and jumps to the</span>
	<span class="token comment">// end of the function if deferproc returns != 0.</span>
	<span class="token function">return0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器生成的中间代码会检查该值是否为1，如果是的话就会直接执行<code>runtime.deferreturn</code>函数，通常该函数只有在函数返回之前才会执行，这也说明了为什么<code>recover</code>过后函数会直接返回。</p>`,44),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","5.panic.html.vue"]]);export{d as default};
