import{_ as o,V as p,W as i,X as n,Y as s,Z as e,$ as t,F as c}from"./framework-8edddef6.js";const l={},u=n("h1",{id:"viper",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#viper","aria-hidden":"true"},"#"),s(" Viper")],-1),r={href:"https://github.com/spf13/viper",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/spf13/viper#readme",target:"_blank",rel:"noopener noreferrer"},k={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),m=n("code",null,"Viper2",-1),g={href:"https://forms.gle/R6faU74qPRPAzchZ9",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get github.com/spf13/viper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><code>Viper</code>，直译为眼镜蛇，是一个针对go应用程序的完整的配置文件解决方案，可以处理几乎所有类型的配置需求和格式，方便管理项目的配置文件，并且具有以下特色：</p><ul><li>默认值设置</li><li>支持格式 JSON, TOML, YAML, HCL, envfile，Java properties</li><li>支持实时监测和重载配置文件</li><li>支持环境变量中读取</li><li>支持远程配置系统读取配置并监测变化</li><li>支持读取命令行标记</li><li>支持缓冲区读取</li><li>支持显示设置值</li></ul><p>官方称<code>Viper</code>可以满足所有应用程序配置需求，开发者只需要专注于构建应用程序，让<code>Viper</code>来负责配置管理，许多知名的项目都使用<code>Viper</code></p>`,6),h={href:"http://gohugo.io/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://rexray.readthedocs.org/en/stable/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/Imgur/incus",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/nanobox-io/nanobox",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/nanopack",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/docker/Notary",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.bloomapi.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/digitalocean/doctl",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/jgsqware/clairctl",target:"_blank",rel:"noopener noreferrer"},V={href:"https://mercure.rocks/",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="hint-container danger"><p class="hint-container-title">警告</p><p><code>Viper</code>并不负责配置文件的加密与解密，也就是不会对配置文件做任何的安全处理。</p></div><h2 id="读取顺序" tabindex="-1"><a class="header-anchor" href="#读取顺序" aria-hidden="true">#</a> 读取顺序</h2><p>Viper使用如下的优先级来读取配置：</p><ol><li>显示的值设置</li><li>命令行标记标记</li><li>环境变量</li><li>配置文件</li><li>键值存储</li><li>默认值</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Viper配置中的键是不区分大小写的，后续讨论可能会将其置为可选项。</p></div><h2 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h2><p>一个良好的配置系统应当支持默认值设置，虽然有时候并不一定需要，但在没有设置配置文件的时候将会非常有用，下方是一个例子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>viper<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">&quot;filePath&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;./dir/img/usr&quot;</span><span class="token punctuation">)</span>
viper<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取配置文件" tabindex="-1"><a class="header-anchor" href="#读取配置文件" aria-hidden="true">#</a> 读取配置文件</h2><p>Viper 只需要很少的配置，就知道在哪里查找配置文件。Viper 支持 JSON、 TOML、 YAML、 HCL、 INI、 envfile 和 JavaProperties 文件。Viper 可以同时搜索多个路径，但目前单个 Viper 实例只支持单个配置文件。Viper 不会默认配置搜索路径，将默认决策留给应用程序。</p><p>下面是使用Viper读取配置文件的一个示例，不需要指定一个完整路径，但在使用时至少应当提供一个配置文件。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestReadConfigFile</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   viper<span class="token punctuation">.</span><span class="token function">SetConfigName</span><span class="token punctuation">(</span><span class="token string">&quot;config.yml&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 读取名为config的配置文件，没有设置特定的文件后缀名</span>
   viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">)</span>       <span class="token comment">// 当没有设置特定的文件后缀名时，必须要指定文件类型</span>
   viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span>         <span class="token comment">// 在当前文件夹下寻找</span>
   viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;$HOME/&quot;</span><span class="token punctuation">)</span>     <span class="token comment">// 使用变量</span>
   viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>          <span class="token comment">// 在工作目录下查找</span>
   err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//读取配置</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以单独处理配置文件未找到的情况</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span>ConfigFileNotFoundError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token comment">// 配置文件未找到</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 其他类型的错误</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是访问配置的全部函数</p><ul><li><code>Get(key string) : interface{}</code></li><li><code>GetBool(key string) : bool</code></li><li><code>GetFloat64(key string) : float64</code></li><li><code>GetInt(key string) : int</code></li><li><code>GetIntSlice(key string) : []int</code></li><li><code>GetString(key string) : string</code></li><li><code>GetStringMap(key string) : map[string]interface{}</code></li><li><code>GetStringMapString(key string) : map[string]string</code></li><li><code>GetStringSlice(key string) : []string</code></li><li><code>GetTime(key string) : time.Time</code></li><li><code>GetDuration(key string) : time.Duration</code></li><li><code>IsSet(key string) : bool</code></li><li><code>AllSettings() : map[string]interface{}</code></li></ul><p>当访问嵌套配置的时候通过<code>.</code>分隔符进行访问，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
	&quot;server&quot;:{
		&quot;database&quot;:{
			&quot;url&quot;: &quot;mysql....&quot;
		}
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过<code>GetString(&quot;server.database.url&quot;)</code>来进行嵌套访问</p><h2 id="写入配置文件" tabindex="-1"><a class="header-anchor" href="#写入配置文件" aria-hidden="true">#</a> 写入配置文件</h2><p>Viper提供了一系列函数来方便开发者将运行时存储的配置写入配置文件中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// WriteConfig 将配置写入原配置文件中，不存在会报错，存在的话会覆盖</span>
<span class="token keyword">func</span> <span class="token function">WriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">WriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// SafeWriteConfig 将配置安全的写入原配置文件中，不存在时会写入，存在的话则不会覆盖</span>
<span class="token keyword">func</span> <span class="token function">SafeWriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">SafeWriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// WriteConfigAs 将当前的配置写入指定文件，文件不存在时会返回错误，存在时会覆盖原有配置</span>
<span class="token keyword">func</span> <span class="token function">WriteConfigAs</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">WriteConfigAs</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// SafeWriteConfigAs 如果指定的文件存在的话，将不会覆盖原配置文件，文件存在的话会返回错误</span>
<span class="token keyword">func</span> <span class="token function">SafeWriteConfigAs</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">SafeWriteConfigAs</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下方是一些示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestWritingConfig</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   viper<span class="token punctuation">.</span><span class="token function">WriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将配置写入原配置文件，这些配置文件应当提前被 &#39;viper.AddConfigPath()&#39; 和 &#39;viper.SetConfigName&#39; 定义好</span>
   viper<span class="token punctuation">.</span><span class="token function">SafeWriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   viper<span class="token punctuation">.</span><span class="token function">WriteConfigAs</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/my/.config&quot;</span><span class="token punctuation">)</span>
   viper<span class="token punctuation">.</span><span class="token function">SafeWriteConfigAs</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/my/.config&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 因为指定文件存在，将会返回错误</span>
   viper<span class="token punctuation">.</span><span class="token function">SafeWriteConfigAs</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/my/.other_config&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监测和重载配置" tabindex="-1"><a class="header-anchor" href="#监测和重载配置" aria-hidden="true">#</a> 监测和重载配置</h2><p>Viper允许应用程序在运行时动态读取一个配置文件，即不需要重新启动应用程序也可以使更新的配置生效，且不会放过每一个变化的细节。只需要简单地告诉Viper实例去监视配置变化，或者可以提供一个函数给viper以便每次发生变化时运行该函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestWatchingConfig</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	viper<span class="token punctuation">.</span><span class="token function">OnConfigChange</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>e fsnotify<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;配置文件已更改:&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	viper<span class="token punctuation">.</span><span class="token function">WatchConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestAliases</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   viper<span class="token punctuation">.</span><span class="token function">RegisterAlias</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
   viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
   viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//将会覆盖掉a的配置</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提取子结构" tabindex="-1"><a class="header-anchor" href="#提取子结构" aria-hidden="true">#</a> 提取子结构</h2><p>前面提到了通过<code>.</code>分隔符来访问嵌套配置，其实还可以通过<code>viper.Sub()</code>函数来提取子结构，其返回值是一个Viper实例，如下示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">cache</span><span class="token punctuation">:</span>
  <span class="token key atrule">cache1</span><span class="token punctuation">:</span>
    <span class="token key atrule">max-items</span><span class="token punctuation">:</span> <span class="token number">100</span>
    <span class="token key atrule">item-size</span><span class="token punctuation">:</span> <span class="token number">64</span>
  <span class="token key atrule">cache2</span><span class="token punctuation">:</span>
    <span class="token key atrule">max-items</span><span class="token punctuation">:</span> <span class="token number">200</span>
    <span class="token key atrule">item-size</span><span class="token punctuation">:</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>cache1Config <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span><span class="token string">&quot;cache.cache1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> cache1Config <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 如果不存在返回nil</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;cache1配置不存在&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置嵌套分隔符" tabindex="-1"><a class="header-anchor" href="#设置嵌套分隔符" aria-hidden="true">#</a> 设置嵌套分隔符</h2><p>当想要指定的key中包含<code>.</code>时，就必须要手动指定一个其他的分隔符，以防出现误解析，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>viper<span class="token punctuation">.</span><span class="token function">KeyDelimiter</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token comment">//将分隔符设置为 /</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h2><p>Viper提供了两个函数可以将配置反序列化到一个结构体或者map，同样支持嵌套结构：</p><ul><li><code>Unmarshal(rawVal interface{}) : error</code></li><li><code>UnmarshalKey(key string, rawVal interface{}) : error</code></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Port <span class="token builtin">int</span>
	Name <span class="token builtin">string</span>
	PathMap <span class="token builtin">string</span> <span class="token string">\`mapstructure:&quot;path_map&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> C config

err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;无法反序列化为结构体, %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h2><p>将当前配置按照特定的格式序列化成字符串以便存入配置文件，通常情况支持JSON, TOML, YAML, HCL, envfile，Java properties，</p>`,42),W={class:"hint-container tip"},N=n("p",{class:"hint-container-title"},"提示",-1),G={href:"https://sagikazarmark.hu/blog/decoding-custom-formats-with-viper/",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	yaml <span class="token string">&quot;gopkg.in/yaml.v2&quot;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">yamlStringSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">AllSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	bs<span class="token punctuation">,</span> err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;无法将配置序列化为YAML: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多个实例" tabindex="-1"><a class="header-anchor" href="#多个实例" aria-hidden="true">#</a> 多个实例</h2><p>通常情况下使用Viper提供的全局实例足够使用，但是由于一个实例只能映射一个配置文件，可以自行创建多个实例以实现更多的操作，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>x <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
y <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

x<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">&quot;ContentDir&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span>
y<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">&quot;ContentDir&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foobar&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function T(I,L){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[s("仓库地址："),n("a",r,[s("spf13/viper: Go configuration with fangs (github.com)"),e(a)])]),n("p",null,[s("文档地址："),n("a",d,[s("spf13/viper: Go configuration with fangs (github.com)"),e(a)])]),n("div",k,[v,n("p",null,[s("官方正在讨论向"),m,s("过渡，感兴趣可以了解："),n("a",g,[s("Viper2"),e(a)])])]),b,n("ul",null,[n("li",null,[n("a",h,[s("Hugo"),e(a)])]),n("li",null,[n("a",f,[s("EMC RexRay"),e(a)])]),n("li",null,[n("a",_,[s("Imgur’s Incus"),e(a)])]),n("li",null,[n("a",q,[s("Nanobox"),e(a)]),s("/"),n("a",y,[s("Nanopack"),e(a)])]),n("li",null,[n("a",x,[s("Docker Notary"),e(a)])]),n("li",null,[n("a",C,[s("BloomApi"),e(a)])]),n("li",null,[n("a",w,[s("doctl"),e(a)])]),n("li",null,[n("a",S,[s("Clairctl"),e(a)])]),n("li",null,[n("a",V,[s("Mercure"),e(a)])])]),A,n("div",W,[N,n("p",null,[s("Viper同样支持自定义序列化格式，"),n("a",G,[s("Decoding custom formats with Viper - Márk Sági-Kazár (sagikazarmark.hu)"),e(a)])])]),M])}const D=o(l,[["render",T],["__file","Viper.html.vue"]]);export{D as default};
