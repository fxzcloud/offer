import{_ as n,V as s,W as a,$ as t}from"./framework-8edddef6.js";const p={},e=t(`<h1 id="延时加载" tabindex="-1"><a class="header-anchor" href="#延时加载" aria-hidden="true">#</a> 延时加载</h1><blockquote><p>当出现嵌套查询的时候，第一层返回值BeanA存在属性BeanB，而第二层返回值BeanB存在属性BeanA，这个时候就可能出现死循环，也就是循环依赖问题。</p><p>Mybatis解决嵌套查询的循环依赖采用的是延迟加载+缓存占位符（一级缓存） 。</p></blockquote><figure><img src="https://minio.pigx.vip/oss/2022/09/8BOQRF.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://minio.pigx.vip/oss/2022/09/rLiXOo.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>嵌套查询源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">DefaultResultSetHandler</span><span class="token punctuation">.</span>java
<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getNestedQueryMappingValue</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">MetaObject</span> metaResultObject<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> propertyMapping<span class="token punctuation">,</span> <span class="token class-name">ResultLoaderMap</span> lazyLoader<span class="token punctuation">,</span> <span class="token class-name">String</span> columnPrefix<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获得内嵌查询的编号</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> nestedQueryId <span class="token operator">=</span> propertyMapping<span class="token punctuation">.</span><span class="token function">getNestedQueryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获得属性名</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> property <span class="token operator">=</span> propertyMapping<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获得内嵌查询的 MappedStatement 对象</span>
        <span class="token keyword">final</span> <span class="token class-name">MappedStatement</span> nestedQuery <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>nestedQueryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获得内嵌查询的参数类型</span>
        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> nestedQueryParameterType <span class="token operator">=</span> nestedQuery<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获得内嵌查询的参数对象</span>
        <span class="token keyword">final</span> <span class="token class-name">Object</span> nestedQueryParameterObject <span class="token operator">=</span> <span class="token function">prepareParameterForNestedQuery</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> propertyMapping<span class="token punctuation">,</span> nestedQueryParameterType<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nestedQueryParameterObject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获得 BoundSql 对象</span>
            <span class="token keyword">final</span> <span class="token class-name">BoundSql</span> nestedBoundSql <span class="token operator">=</span> nestedQuery<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>nestedQueryParameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获得 CacheKey 对象</span>
            <span class="token keyword">final</span> <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">createCacheKey</span><span class="token punctuation">(</span>nestedQuery<span class="token punctuation">,</span> nestedQueryParameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">,</span> nestedBoundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetType <span class="token operator">=</span> propertyMapping<span class="token punctuation">.</span><span class="token function">getJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 检查缓存中已存在</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">isCached</span><span class="token punctuation">(</span>nestedQuery<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建 DeferredLoad 对象，并通过该 DeferredLoad 对象从缓存中加载结采对象</span>
                executor<span class="token punctuation">.</span><span class="token function">deferLoad</span><span class="token punctuation">(</span>nestedQuery<span class="token punctuation">,</span> metaResultObject<span class="token punctuation">,</span> property<span class="token punctuation">,</span> key<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 返回已定义</span>
                value <span class="token operator">=</span> <span class="token constant">DEFERED</span><span class="token punctuation">;</span>
                <span class="token comment">// 检查缓存中不存在</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建 ResultLoader 对象</span>
                <span class="token keyword">final</span> <span class="token class-name">ResultLoader</span> resultLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultLoader</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> nestedQuery<span class="token punctuation">,</span> nestedQueryParameterObject<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> key<span class="token punctuation">,</span> nestedBoundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果要求延迟加载，则延迟加载</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyMapping<span class="token punctuation">.</span><span class="token function">isLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果该属性配置了延迟加载，则将其添加到 \`ResultLoader.loaderMap\` 中，等待真正使用时再执行嵌套查询并得到结果对象。</span>
                    lazyLoader<span class="token punctuation">.</span><span class="token function">addLoader</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> metaResultObject<span class="token punctuation">,</span> resultLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 返回已定义</span>
                    value <span class="token operator">=</span> <span class="token constant">DEFERED</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果不要求延迟加载，则直接执行加载对应的值</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    value <span class="token operator">=</span> resultLoader<span class="token punctuation">.</span><span class="token function">loadResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在BaseExecutor中实现延迟加载，可以看到当可以加载的时候，才能加载，否则加入到队列中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   # <span class="token class-name">BaseExecutor</span><span class="token punctuation">.</span>java
   <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deferLoad</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">MetaObject</span> resultObject<span class="token punctuation">,</span> <span class="token class-name">String</span> property<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果执行器已关闭，抛出 ExecutorException 异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">&quot;Executor was closed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建 DeferredLoad 对象</span>
        <span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeferredLoad</span><span class="token punctuation">(</span>resultObject<span class="token punctuation">,</span> property<span class="token punctuation">,</span> key<span class="token punctuation">,</span> localCache<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果可加载，则执行加载</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredLoad<span class="token punctuation">.</span><span class="token function">canLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果不可加载，则添加到 deferredLoads 中</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            deferredLoads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeferredLoad</span><span class="token punctuation">(</span>resultObject<span class="token punctuation">,</span> property<span class="token punctuation">,</span> key<span class="token punctuation">,</span> localCache<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EXECUTION_PLACEHOLDER</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 从缓存 localCache 中获取</span>
           <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// 解析结果</span>
           <span class="token class-name">Object</span> value <span class="token operator">=</span> resultExtractor<span class="token punctuation">.</span><span class="token function">extractObjectFromList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// 设置到 resultObject 中</span>
           resultObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在调用查询的时候，可以看到有一个queryStack，它是记录了嵌套查询的层数，当等于0的时候，也就是最后的查询，把全部延迟加载队列中的数据进行加载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">&quot;executing a query&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 已经关闭，则抛出 ExecutorException 异常</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">&quot;Executor was closed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清空本地缓存，如果 queryStack 为零，并且要求清空本地缓存。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// queryStack + 1</span>
        queryStack<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 从一级缓存中，获取查询结果</span>
        list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取到，则进行处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获得不到，则从数据库中查询</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// queryStack - 1</span>
        queryStack<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行延迟加载</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// issue #601</span>
        <span class="token comment">// 清空 deferredLoads</span>
        deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果缓存级别是 LocalCacheScope.STATEMENT ，则进行清理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span><span class="token constant">STATEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// issue #482</span>
            <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第一层查询的时候，用占位符进行站位进行缓存：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/a8CsxB.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在解析第一层的结果的时候，会触发第二层的SQL查询：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/DJXaYv.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这时候queryStack变为2：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/TEYdvr.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在解析第二层的数据的时候，因为Blog评论里面有博客对象，博客对象在上一层查询中进行了缓存，所以触发到的缓存，进行延迟加载：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/xT3jhO.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>又因为第一层缓存的value是占位符，所以放入延迟队列中：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/DRSzJl.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当queryStack为0的时候，把所有延迟加载队列中的数据全部加载</p><figure><img src="https://minio.pigx.vip/oss/2022/09/WSfRNq.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，在最后一层的时候，对缓存进行清空，说明了之前说的所谓的一级缓存关闭，只是减小了作用域，同时可以看出，一级缓存在嵌套子查询中起到很大的作用。</p><h2 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h2><blockquote><p>懒加载的意思就是只用调用某个属性的get方法的时候，采去加载数据，这样保证只有使用的时候数据才进行加载不使用不去加载，在一定程度上提高了效率。在Mybatis中，手动映射结果集的时候才会存在懒加载。</p></blockquote><figure><img src="https://minio.pigx.vip/oss/2022/09/uz89xq.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>懒加载主要采用动态代理实现的，就是在原始的Bean做一层代理，这样在调用get方法的时候，可以操作自己想操作的。</p><p>代理完之后的对象，存在一个handler，指向一个执行器，进行数据的查询。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/jEDwcw.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当调用set之后再调用get的时候，get请求是不会覆盖set请求的数据的。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/CFRsC8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当期望序列化、反序列化也触发懒加载的时候，需要满足两个条件：</p><p>① 必须使用jdk原生的序列化方式</p><p>② 必须实现一个配置工厂类，同时在setting中注册这个类，并不需要实现上面业务逻辑。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/py3I0q.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单说明一下上述结构的功能：</p><p>① MethodHandler：处理个个属性get方法，就是对get方法进行增强。</p><p>② ResultLoaderMap：存放还未进行懒加载的属性，当进行完懒加载的时候，就进行移除。</p><p>③ LoadPair：执行序列化、反序列化操作。</p><p>④ ResultLoader：最终执行查询数据库操作。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/cWCZLx.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JavassistProxyFactory的invoke方法中对代理对象进行增强，首先判断是否开启懒加载，然后判断是方法是触发了全部懒加载，然后再判断是否调用了set方法，最后才是进行懒加载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   # <span class="token class-name">JavassistProxyFactory</span><span class="token punctuation">.</span>java
   <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> enhanced<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Method</span> methodProxy<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lazyLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 忽略 WRITE_REPLACE_METHOD ，和序列化相关</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">WRITE_REPLACE_METHOD</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Object</span> original<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>constructorArgTypes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        original <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        original <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">PropertyCopier</span><span class="token punctuation">.</span><span class="token function">copyBeanProperties</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> enhanced<span class="token punctuation">,</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyLoader<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavassistSerialStateHolder</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> lazyLoader<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> objectFactory<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> original<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyLoader<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">FINALIZE_METHOD</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 加载所有延迟加载的属性</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>aggressive <span class="token operator">||</span> lazyLoadTriggerMethods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            lazyLoader<span class="token punctuation">.</span><span class="token function">loadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 如果调用了 setting 方法，则不在使用延迟加载</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PropertyNamer</span><span class="token punctuation">.</span><span class="token function">isSetter</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">final</span> <span class="token class-name">String</span> property <span class="token operator">=</span> <span class="token class-name">PropertyNamer</span><span class="token punctuation">.</span><span class="token function">methodToProperty</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            lazyLoader<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除</span>
                        <span class="token comment">// 如果调用了 getting 方法，则执行延迟加载</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PropertyNamer</span><span class="token punctuation">.</span><span class="token function">isGetter</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">final</span> <span class="token class-name">String</span> property <span class="token operator">=</span> <span class="token class-name">PropertyNamer</span><span class="token punctuation">.</span><span class="token function">methodToProperty</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyLoader<span class="token punctuation">.</span><span class="token function">hasLoader</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                lazyLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 继续执行原方法</span>
            <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>enhanced<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">ResultLoaderMap</span><span class="token punctuation">.</span>java
<span class="token doc-comment comment">/**
 * 执行指定属性的加载
 *
 * <span class="token keyword">@param</span> <span class="token parameter">property</span> 属性
 * <span class="token keyword">@return</span> 加载是否成功
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> property<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获得 LoadPair 对象，并移除</span>
    <span class="token class-name">LoadPair</span> pair <span class="token operator">=</span> loaderMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行加载</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pair<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 加载成功</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 加载失败</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个逻辑分为2部分，第一部分是判断是否是通过metaResultObject和resultLoader两个属性是否为空判断是否是序列化，第二部分是直接查询数据库设置数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> # <span class="token class-name">LoadPair</span><span class="token punctuation">.</span>java
				<span class="token doc-comment comment">/**
         * Meta object which sets loaded properties.
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">MetaObject</span> metaResultObject<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Result loader which loads unread properties.
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ResultLoader</span> resultLoader<span class="token punctuation">;</span> 

 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> userObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metaResultObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resultLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedParameter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">&quot;Property [&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">+</span> <span class="token string">&quot;] cannot be loaded because &quot;</span>
                            <span class="token operator">+</span> <span class="token string">&quot;required parameter of mapped statement [&quot;</span>
                            <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedStatement <span class="token operator">+</span> <span class="token string">&quot;] is not serializable.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 获得 Configuration 对象</span>
                <span class="token keyword">final</span> <span class="token class-name">Configuration</span> config <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获得 MappedStatement 对象</span>
                <span class="token keyword">final</span> <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ms <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot lazy load property [&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property
                            <span class="token operator">+</span> <span class="token string">&quot;] of deserialized object [&quot;</span> <span class="token operator">+</span> userObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token operator">+</span> <span class="token string">&quot;] because configuration does not contain statement [&quot;</span>
                            <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedStatement <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 获得对应的 MetaObject 对象</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>metaResultObject <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>userObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 创建 ResultLoader 对象</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resultLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultLoader</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClosedExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedParameter<span class="token punctuation">,</span>
                        metaResultObject<span class="token punctuation">.</span><span class="token function">getSetterType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">/* We are using a new executor because we may be (and likely are) on a new thread
             * and executors aren&#39;t thread safe. (Is this sufficient?)
             *
             * A better approach would be making executors thread safe. */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serializationCheck <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token class-name">ResultLoader</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resultLoader<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resultLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultLoader</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClosedExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>mappedStatement<span class="token punctuation">,</span>
                        old<span class="token punctuation">.</span>parameterObject<span class="token punctuation">,</span> old<span class="token punctuation">.</span>targetType<span class="token punctuation">,</span> old<span class="token punctuation">.</span>cacheKey<span class="token punctuation">,</span> old<span class="token punctuation">.</span>boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>metaResultObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resultLoader<span class="token punctuation">.</span><span class="token function">loadResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时在初始化resultLoader的时候，传入一个ClosedExecutor，证明这个执行器执行完毕后就关闭了。</p><p><strong>触发懒加载位置</strong></p><p>在DefaultResultSetHandler创建结果集的时候，判断有子查询同时懒加载就进行代理对象的创建：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/WsJShU.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>wirteReplace和readResolve</strong></p><p>主要用于在序列化和反序列化之前，对bean的操作，可以更改属性值，甚至更改bean的类型。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/G1EGWh.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,53),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","(五) 延时加载_懒加载.html.vue"]]);export{k as default};
