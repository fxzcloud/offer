import{_ as n,V as s,W as a,$ as p}from"./framework-8edddef6.js";const t={},e=p(`<h1 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>阅读本文需要<code>unsafe</code>标准库的知识。</p></div><p>切片应该是go语言中最最常用的数据结构，没有之一（实际上内置的数据结构也没几个），几乎在任何地方都能看到它的身影。关于它的基本用法在语言入门中已经阐述过了，下面来看看它的内部长什么样，以及它内部是如何运作的。</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p>有关切片的实现，其源代码位于<code>runtime/slice.go</code>文件中。在运行时，切片以一个结构体的形式而存在，其类型为<code>runtime.slice</code>，如下所示。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	array unsafe<span class="token punctuation">.</span>Pointer
	<span class="token builtin">len</span>   <span class="token builtin">int</span>
	<span class="token builtin">cap</span>   <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体只有三个字段</p><ul><li><code>array</code>，指向底层数组的指针</li><li><code>len</code>，切片的长度，指的是数组中已有的元素数量</li><li><code>cap</code>，切片的容量，指的是数组能容纳元素的总数</li></ul><p>从上面的信息可以得知，切片的底层实现还是依赖于数组，在平时它只是一个结构体，只持有对数组的引用，以及容量和长度的记录。这样一来传递切片的成本就会非常低，只需要复制其数据的引用，并不用复制所有数据，并且在使用<code>len</code>和<code>cap</code>获取切片的长度和容量时，就等于是在获取其字段值，不需要去遍历数组。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310092226995.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过这同样也会带来一些不容易发现的问题，看下面的一个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[2 2 3 4 5]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码中，<code>s1</code>通过切割的方式创建了一个新的切片，但它和源切片所引用的都是同一个底层数组，修改<code>s1</code>中的数据也会导致<code>s</code>发生变化。所以复制切片的时候应该使用<code>copy</code>函数，后者复制的切片与前者毫不相干。再来看个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[1 2 3 4 5]
[10 2 3 4 5 1 2 3 4 5 6 7 8 9 10]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样是使用切割方式复制切片，但这一次不会对源切片造成影响。最初<code>s1</code>和<code>s</code>确实指向的同一个数组，但是后续对<code>s1</code>添加了过多的元素超过了数组所能容纳的数量，于是便分配了一个更大的新数组来盛放元素，所以最后它们两个指向的就是不同的数组了。是不是觉得已经没问题了，那就再来看一个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token function">appendData</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> appendData<span class="token punctuation">[</span>T comparable<span class="token punctuation">]</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> data <span class="token operator">...</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> data<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>明明已经添加了元素，但是打印出来的确是空切片，实际上数据确实是已经添加到了切片中，只不过是写入到了底层数组。go中的函数参数是传值传递，所以参数<code>s</code>实际上源切片结构体的一个拷贝，而<code>append</code>操作在添加元素后会返回一个更新了长度的切片结构体，只不过赋值的是参数<code>s</code>而非源切片<code>s</code>，两者并其实没有什么联系。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310101557857.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于一个切片而言，它能访问和修改的起始位置取决于对数组的引用位置，偏移量取决于结构体中记录的长度。结构体中的指针除了可以指向开头，也可以数组的中间，就像下面这张图一样。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310101611990.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个底层数组可以被很多个切片所引用，且引用的位置和范围可以不同，就像上图一样，这种情况一般出现在对切片进行切割的时候，类似下面的代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
s2 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>
s3 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在切割时，生成的新切片的容量等于数组长度减去新切片引用的起始位置。例如<code>s[4:6]</code>生成的新切片容量就是<code>6 = 10 - 4</code>。当然，切片引用的范围也不一定非得相邻，也可以相互交错，不过这会产生非常大的麻烦，可能当前切片的数据在不知情的情况下就被别的切片修改了，比如上图中的紫色切片，如果在后续过程中使用<code>append</code>添加元素，就有可能会把绿色切片和蓝色切片的数据覆盖。为了避免这种情况，go允许在切割时设置容量范围，语法如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s4 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种情况下，它的容量就被限制到了2，那么添加元素就会触发扩容，扩容后就是一个新数组了，与源数组就没有关系了，就不会有影响。你以为关于切片的问题到这里就结束了吗，其实并没有，再来看一个例子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token comment">// 添加的元素数量刚好大于容量</span>
	<span class="token function">appendData</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> appendData<span class="token punctuation">[</span>T comparable<span class="token punctuation">]</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> data <span class="token operator">...</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> data<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码跟上一个例子没有区别，只是修改了一下入参，让添加的元素数量刚好大于切片的容量，这样在添加时就会触发扩容，这样一来，数据不仅没有添加到源切片<code>s</code>，甚至连其指向的底层数组也没有被写入数据，我们可以通过<code>unsafe</code>指针来证实一下，代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;unsafe&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	<span class="token comment">// 添加的元素数量刚好大于容量</span>
	<span class="token function">appendData</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ori slice&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">unsafeIterator</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> appendData<span class="token punctuation">[</span>T comparable<span class="token punctuation">]</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> data <span class="token operator">...</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> data<span class="token operator">...</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;new slice&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">unsafeIterator</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">unsafeIterator</span><span class="token punctuation">(</span>ptr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> offset <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> ptr<span class="token punctuation">,</span> i <span class="token operator">:=</span> ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> offset<span class="token punctuation">;</span> ptr<span class="token punctuation">,</span> i <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">{</span>
		elem <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d, &quot;</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>new slice 0xc0000200a0
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
ori slice 0xc000018190                                        
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到的是，源切片的底层数组空空如也，一点东西也没有，数据全都被写入新数组中了，不过跟源切片没什么关系，因为即便<code>append</code>返回了新的引用，修改的也只是形参<code>s</code>的值，影响不到源切片<code>s</code>。切片作为结构体确实可以让其非常轻量，但是上面的问题同样不可忽视，尤其是在实际的代码中这些问题通常藏的很深，很难被发现。</p><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><p>在运行时，使用<code>make</code>函数创建切片的工作由<code>runtime.makeslice</code>，来完成，它的逻辑比较简单，该函数签名如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接收三个参数，元素类型，长度，容量，完成后返回一个指向底层数组的指针，它的代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
    <span class="token comment">// 计算需要的总内存，如果太大会导致数值溢出</span>
    <span class="token comment">// mem = sizeof(et) * cap</span>
	mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>Size_<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
        <span class="token comment">// mem = sizeof(et) * len</span>
		mem<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>Size_<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> overflow <span class="token operator">||</span> mem <span class="token operator">&gt;</span> maxAlloc <span class="token operator">||</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">panicmakeslicecap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	
    <span class="token comment">// 没问题的话就分配内存</span>
	<span class="token keyword">return</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> et<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到逻辑非常简单，总共就做了两件事</p><ul><li>计算所需内存</li><li>分配内存空间</li></ul><p>如果条件检查失败了，就会直接<code>panic</code></p><ul><li>内存计算时数值溢出了</li><li>计算结果大于可分配的最大内存</li><li>长度与容量不合法</li></ul><p>如果计算得到内存大于<code>32KB</code>，就会将其分配到堆上，完事之后就会返回一个指向底层数组的指针，构建<code>runtime.slice</code>结构体的工作并不由<code>makeslice</code>函数来完成。实际上，构建结构体的工作是编译期间完成的，运行时的<code>makeslice</code>函数只负责分配内存，类似如下的代码。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> s runtime<span class="token punctuation">.</span>slice
s<span class="token punctuation">.</span>array <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">makeslice</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token builtin">len</span>
s<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token builtin">cap</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>感兴趣的话可以去看看生成的中间代码，跟这个类似。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>name s<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v11
name s<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v7
name s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是使用数组来创建切片的话，比如下面这种</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个过程就类似下面的代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token keyword">var</span> s runtime<span class="token punctuation">.</span>slice
s<span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token operator">&amp;</span>arr
s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token builtin">len</span>
s<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token builtin">cap</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>go会直接将该数组作为切片的底层数组，所以修改切片中的数据也会影响到数组的数据。在使用数组创建切片时，长度大小等于<code>hight-low</code>，容量等于<code>max-low</code>，其中<code>max</code>默认为数组长度，或者也可以在切割的时候手动指定容量，例如。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310101017354.png" style="zoom:50%;"><h2 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h2><p>访问切片就跟访问数组一样使用下标索引</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>elem <span class="token operator">:=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切片的访问操作是在编译期间就已经完成了，通过生成中间代码的方式来访问，最终生成的代码可以理解为下面的伪代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> s<span class="token punctuation">.</span>ptr
e <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上是通过移动指针操作来访问对应下标元素的，对应<code>cmd/compile/internal/ssagen.exprCheckPtr</code>函数中的如下部分代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> ir<span class="token punctuation">.</span>OINDEX<span class="token punctuation">:</span>
    n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>IndexExpr<span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> n<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">// 偏移指针</span>
        p <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在通过<code>len</code>和<code>cap</code>函数访问切片的长度和容量时，也是同样的道理，也是对应<code>cmd/compile/internal/ssagen.exprCheckPtr</code>函数中的部分代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> ir<span class="token punctuation">.</span>OLEN<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>OCAP<span class="token punctuation">:</span>
    n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>UnaryExpr<span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> n<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        op <span class="token operator">:=</span> ssa<span class="token punctuation">.</span>OpSliceLen
        <span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ir<span class="token punctuation">.</span>OCAP <span class="token punctuation">{</span>
            op <span class="token operator">=</span> ssa<span class="token punctuation">.</span>OpSliceCap
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">newValue1</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>types<span class="token punctuation">.</span>TINT<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际生成的代码中，通过移动指针来访问切片结构体中的<code>len</code>字段，可以理解为下面的伪代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> <span class="token operator">&amp;</span>s
<span class="token builtin">len</span> <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token builtin">cap</span> <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如现在有如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">lenAndCap</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	c <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> l<span class="token punctuation">,</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在生成中的某个阶段的中间代码大概率长这样</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v9 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> ArgIntReg <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> BX <span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
v10 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> ArgIntReg <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> CX <span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
v1 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> InitMem <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span>
v3 <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> Copy <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> v9 <span class="token punctuation">:</span> AX
v4 <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> Copy <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> v10 <span class="token punctuation">:</span> BX
v11 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> MakeResult <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">,</span>mem<span class="token operator">&gt;</span> v3 v4 v1 <span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
Ret v11 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span>
name l<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v9
name c<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v10
name s<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v10
name s<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面大致就能看出来，一个加8，一个加16，很显然是通过指针偏移来访问的切片字段。</p><p>倘若能在编译期间推断出它的长度和容量，就不会在运行时偏移指针来获取值，比如下面这种情况就不需要移动指针。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
c <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 <code>l</code>和<code>s</code>的值会被直接替换成<code>10</code>和<code>20</code>。</p><h2 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h2><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过索引下标修改切片的值时，在编译期间会通过<code>OpStore</code>操作生成类似如下的伪代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> <span class="token operator">&amp;</span>s
l <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">IsInBounds</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
ptr <span class="token operator">:=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>ptr <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
<span class="token operator">*</span>ptr <span class="token operator">=</span> val
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生成中的某个阶段的中间代码大概率长这样</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v1 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> InitMem <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span>
v5 <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> Arg <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token punctuation">}</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
v6 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Const64 <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
v7 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Const64 <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
v8 <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> SliceLen <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> v5
v9 <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> IsInBounds <span class="token operator">&lt;</span><span class="token builtin">bool</span><span class="token operator">&gt;</span> v7 v8
v14 <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token operator">=</span> Const64 <span class="token operator">&lt;</span><span class="token builtin">int64</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
v12 <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> SlicePtr <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token operator">&gt;</span> v5
v15 <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> Store <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token builtin">int</span><span class="token punctuation">}</span> v12 v6 v1
v11 <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> PanicBounds <span class="token operator">&lt;</span>mem<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> v7 v7 v1
Exit v11 <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>

name s<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span> v5
name s<span class="token punctuation">[</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
name s<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到代码访问切片长度以检查下标是否合法，最后通过移动指针来存储元素。</p><h3 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h3><p>通过<code>append</code>函数可以向切片添加元素</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加元素后，它会返回一个新的切片结构体，如果没有扩容的话相较于源切片只是更新了长度，否则会的话会指向一个新的数组。有关于<code>append</code>的使用问题在<a href="#%E7%BB%93%E6%9E%84">结构</a>这部分已经讲的很详细了，不再过多阐述，下面会关注于<code>append</code>是如何工作的。</p><p>在运行时，并没有类似<code>runtime.appendslice</code>这样的函数与之对应，添加元素的工作实际上在编译期就已经做好了，<code>append</code>函数会被展开对应的中间代码,判断的代码在<code>cmd/compile/internal/walk/assign.go walkassign</code>函数中，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> ir<span class="token punctuation">.</span>OAPPEND<span class="token punctuation">:</span>
    <span class="token comment">// x = append(...)</span>
    call <span class="token operator">:=</span> as<span class="token punctuation">.</span>Y<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ir<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> call<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotInHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       base<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%v can&#39;t be allocated in Go; it is incomplete (or unallocatable)&quot;</span><span class="token punctuation">,</span> call<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> r ir<span class="token punctuation">.</span>Node
    <span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token function">isAppendOfMake</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token comment">// x = append(y, make([]T, y)...)</span>
       r <span class="token operator">=</span> <span class="token function">extendSlice</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
    <span class="token keyword">case</span> call<span class="token punctuation">.</span>IsDDD<span class="token punctuation">:</span>
       r <span class="token operator">=</span> <span class="token function">appendSlice</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> init<span class="token punctuation">)</span> <span class="token comment">// also works for append(slice, string).</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
       r <span class="token operator">=</span> <span class="token function">walkAppend</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> init<span class="token punctuation">,</span> as<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到分成三种情况</p><ul><li>添加若干个元素</li><li>添加一个切片</li><li>添加一个临时创建的切片</li></ul><p>下面会讲一讲生成的代码长什么样，这样明白<code>append</code>实际上是怎么工作的，代码生成的过程如果感兴趣可以自己去了解下。</p><p><strong>添加元素</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果只是添加有限个元素，会由<code>walkAppend</code>函数展开成以下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 待添加元素数量</span>
<span class="token keyword">const</span> argc <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
newLen <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+</span> argc

<span class="token comment">// 是否需要扩容</span>
<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">uint</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>newLen<span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">,</span> argc<span class="token punctuation">,</span> elemType<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> argc<span class="token punctuation">]</span> <span class="token operator">=</span> x
s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> argc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y
s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-</span> argc <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先计算出待添加元素数量，然后判断是否需要扩容，最后再一个个赋值。</p><p><strong>添加切片</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s1<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是直接添加一个切片，会由<code>appendSlice</code>函数展开成以下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>newLen <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token builtin">len</span>
<span class="token comment">// Compare as uint so growslice can panic on overflow.</span>
<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">uint</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>newLen<span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">,</span> T<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是跟之前一样，计算新长度，判断是否需要扩容，不同的是go并不会一个个去添加源切片的元素，而是选择直接复制内存。</p><p><strong>添加临时切片</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是添加一个临时创建的切片，会由<code>extendslice</code>函数展开成以下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> l2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span> 
<span class="token comment">// Empty if block here for more meaningful node.SetLikely(true)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token function">panicmakeslicelen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
s <span class="token operator">:=</span> l1
n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> l2

<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> <span class="token function">growslice</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> s<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token builtin">cap</span><span class="token punctuation">,</span> l2<span class="token punctuation">,</span> T<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// clear the new portion of the underlying array.</span>
hp <span class="token operator">:=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span>l2<span class="token punctuation">]</span>
hn <span class="token operator">:=</span> l2 <span class="token operator">*</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
<span class="token function">memclr</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于临时添加的切片，go会获取临时切片的长度，如果当前切片的容量不足以足以容纳，就会尝试扩容，完事后还会清除对应部分的内存。</p><h2 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h2><p>由结构部分的内容可以得知，切片的底层依旧是一个数组，数组是一个长度固定的数据结构，但切片长度是可变的。切片在数组容量不足时，会申请一片更大的内存空间来存放数据，也就是一个新的数组，再将旧数据拷贝过去，然后切片的引用就会指向新数组，这个过程就被称为扩容。扩容的工作在运行时由<code>runtime.growslice</code>函数来完成，其函数签名如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>oldPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> oldCap<span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">,</span> et <span class="token operator">*</span>_type<span class="token punctuation">)</span> slice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数的简单解释</p><ul><li><code>oldPtr</code>，指向旧数组的指针</li><li><code>newLen</code>，新数组的长度，<code>newLen = oldLen + num</code></li><li><code>oldCap</code>，旧切片的容量，也就等于旧数组的长度</li><li><code>et</code>，元素类型</li></ul><p>它的返回值返回了一个新的切片，新切片跟原来的切片毫不相干，唯一共同点就是保存的数据是一样的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> elems<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用<code>append</code>添加元素时，会要求将其返回值覆盖原切片，如果发生了扩容的话，返回的就是一个新切片了。</p><p>在扩容时，首先需要确定新的长度和容量，对应下面的代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>oldLen <span class="token operator">:=</span> newLen <span class="token operator">-</span> num
<span class="token keyword">if</span> newLen <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">errorString</span><span class="token punctuation">(</span><span class="token string">&quot;growslice: len out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> et<span class="token punctuation">.</span>Size_ <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> slice<span class="token punctuation">{</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zerobase<span class="token punctuation">)</span><span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> newLen<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

newcap <span class="token operator">:=</span> oldCap
<span class="token comment">// 双倍容量</span>
doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
<span class="token keyword">if</span> newLen <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>
    newcap <span class="token operator">=</span> newLen
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span>
    <span class="token keyword">if</span> oldCap <span class="token operator">&lt;</span> threshold <span class="token punctuation">{</span>
        newcap <span class="token operator">=</span> doublecap
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> newLen <span class="token punctuation">{</span>
            <span class="token comment">// newcap += 0.25 * newcap + 192</span>
            newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 数值溢出了</span>
        <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            newcap <span class="token operator">=</span> newLen
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上面的代码可知，对于容量小于256的切片，容量增长一倍，而容量大于等于256的切片，则至少会是原容量的1.25倍，当前切片较小时，每次都直接增大一倍，可以避免频繁的扩容，当切片较大时，扩容的倍率就会减小，避免申请过多的内存而造成浪费。</p><p>得到新长度和容量后，再计算所需内存，对应如下代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> overflow <span class="token builtin">bool</span>
<span class="token keyword">var</span> lenmem<span class="token punctuation">,</span> newlenmem<span class="token punctuation">,</span> capmem <span class="token builtin">uintptr</span>
<span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token operator">...</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>oldLen<span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>Size_
		newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>Size_
		capmem<span class="token punctuation">,</span> overflow <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>Size_<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>
		<span class="token comment">// 最终的容量</span>
		newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> et<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span>
		capmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>Size_
<span class="token punctuation">}</span>

<span class="token keyword">if</span> overflow <span class="token operator">||</span> capmem <span class="token operator">&gt;</span> maxAlloc <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">errorString</span><span class="token punctuation">(</span><span class="token string">&quot;growslice: len out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存计算公式就是<code>mem = cap * sizeof(et)</code>，为了方便内存对齐，过程中会将计算得到的内存向上取整为2的整数次方，并再次计算新容量。如果说新容量太大导致计算时数值溢出，或者说新内存超过了可以分配的最大内存，就会<code>panic</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p unsafe<span class="token punctuation">.</span>Pointer
<span class="token comment">// 分配内存</span>
p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>capmem<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> newlenmem<span class="token punctuation">)</span><span class="token punctuation">,</span> capmem<span class="token operator">-</span>newlenmem<span class="token punctuation">)</span>

<span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> oldPtr<span class="token punctuation">,</span> lenmem<span class="token punctuation">)</span>
<span class="token keyword">return</span> slice<span class="token punctuation">{</span>p<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> newcap<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算出所需结果后，就分配指定大小的内存，再将<code>newLen</code>到<code>newCap</code>这个区间的内存清空，然后将旧数组的数据拷贝到新切片中，最后构建切片结构体。</p><h2 id="拷贝" tabindex="-1"><a class="header-anchor" href="#拷贝" aria-hidden="true">#</a> 拷贝</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>src <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
dst <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">copy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用<code>copy</code>函数拷贝切片时，会由<code>cmd/compile/internal/walk.walkcopy</code>在编译期间生成的代码决定以何种方式拷贝，如果是在运行时调用，就会用到函数<code>runtime.slicecopy</code>，该函数负责拷贝切片，函数签名如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicecopy</span><span class="token punctuation">(</span>toPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> toLen <span class="token builtin">int</span><span class="token punctuation">,</span> fromPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> fromLen <span class="token builtin">int</span><span class="token punctuation">,</span> width <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">int</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接收源切片和目的切片的指针和长度，以及要拷贝的长度<code>width</code>。这个函数的逻辑十分简单，如下所示</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicecopy</span><span class="token punctuation">(</span>toPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> toLen <span class="token builtin">int</span><span class="token punctuation">,</span> fromPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> fromLen <span class="token builtin">int</span><span class="token punctuation">,</span> width <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> fromLen <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> toLen <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>

	n <span class="token operator">:=</span> fromLen
	<span class="token keyword">if</span> toLen <span class="token operator">&lt;</span> n <span class="token punctuation">{</span>
		n <span class="token operator">=</span> toLen
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> width <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 计算要复制的字节数</span>
	size <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> width

	<span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fromPtr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">memmove</span><span class="token punctuation">(</span>toPtr<span class="token punctuation">,</span> fromPtr<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>width</code>的取值，取决于两个切片的长度最小值。可以看到的是，在复制切片的时候并不是一个个遍历元素去复制的，而是选择了直接把底层数组的内存整块复制过去，当切片很大时拷贝内存带来性能的影响并不小。</p><p>倘若不是在运行时调用，就会展开成如下形式的代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
<span class="token keyword">if</span> a<span class="token punctuation">.</span>ptr <span class="token operator">!=</span> b<span class="token punctuation">.</span>ptr <span class="token punctuation">{</span> 
	<span class="token function">memmove</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> b<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> n<span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式的原理都是一样的，都是通过拷贝内存的方式拷贝切片。<code>memmove</code>函数是由汇编实现的，感兴趣可以去<code>runtime/memmove_amd64.s</code> 浏览细节。</p><h2 id="清空" tabindex="-1"><a class="header-anchor" href="#清空" aria-hidden="true">#</a> 清空</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	<span class="token function">clear</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在版本<code>go1.21</code>中，新增了内置函数<code>clear</code>函数可以用于清空切片的内容，或者说是将所有元素都置为零值。当<code>clear</code>函数作用于切片时，编译器会在编译期间由<code>cmd/compile/internal/walk.arrayClear</code>函数展开成下面这种形式</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
	hp <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	hn <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">elem</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memclrHasPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先判断切片长度是否为0，然后计算需要清理的字节数，再根据元素是否是指针分成两种情况来处理，但最终都会用到<code>memclrNoHeapPointers</code>函数，其签名如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>ptr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> n <span class="token builtin">uintptr</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接收两个参数，一个是指向起始地址的真，另一个就是偏移量，也就是要清理的字节数。内存起始地址为切片所持有的引用的地址，偏移量<code>n = sizeof(et) * len</code>，该函数是由汇编实现，感兴趣可以去<code>runtime/memclr_amd64.s</code>查看细节。</p><p>值得一提的是，如果源代码中尝试使用遍历来清空数组，例如这种</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
	s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ZERO_val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有<code>clear</code>函数之前，通常都是这样来清空切片。在编译时，现在这段代码会被<code>cmd/compile/internal/walk.arrayRangeClear</code>函数优化成这种形式</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        hp <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        hn <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token function">elem</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">memclrHasPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 停止循环</span>
        i <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑还是跟上面的一模一样，其中多了一行<code>i = len(s)-1</code>，其作用是为了在内存清除以后停止循环。</p><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用<code>for range</code>遍历切片时，会由<code>cmd/compile/internal/walk/range.go</code>中的<code>walkRange</code>函数展开成如下形式</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 拷贝结构体</span>
hs <span class="token operator">:=</span> s
<span class="token comment">// 获取底层数组指针</span>
hu <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>
v1 <span class="token operator">:=</span> <span class="token number">0</span>
v2 <span class="token operator">:=</span> zero
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hs<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    hp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>hu<span class="token punctuation">)</span><span class="token punctuation">)</span>
    v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>hp
    <span class="token operator">...</span> body of loop <span class="token operator">...</span>
    hu <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> elemsize
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到的是，<code>for range</code>的实现依旧是通过移动指针来遍历元素的。为了避免在遍历时切片被更新，事先拷贝了一份结构体<code>hs</code>，为了避免遍历结束后指针指向越界的内存，<code>hu</code>使用的<code>uinptr</code>类型来存放地址，在需要访问元素的时候才转换成<code>unsafe.Pointer</code>。</p><p>变量<code>v2</code>也就是<code>for range</code>中的<code>e</code>，在整个遍历过程中从始至终都是一个变量，它只会被覆盖，不会重新创建。这一点引发了困扰go开发者十年的循环变量问题，到了版本<code>go.1.21</code>官方才终于决定要打算解决，预计在后面版本的更新中，<code>v2</code>的创建方式可能会变成下面这样。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v2 <span class="token operator">:=</span> <span class="token operator">*</span>hp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构造中间代码过程这里省略了，这并不属于切片范围的知识，感兴趣可以自己去了解下。</p>`,151),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","0.slice.html.vue"]]);export{k as default};
