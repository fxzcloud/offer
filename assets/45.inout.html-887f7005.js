import{_ as n,V as s,W as a,$ as t}from"./framework-8edddef6.js";const e={},o=t(`<h1 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出" aria-hidden="true">#</a> 输入输出</h1><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello 世界!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个入门的案例就是输出这样一个字符串<code>&quot;Hello 世界!&quot;</code>，这一节就来讲一下在Go中如何进行输入输出。</p><h2 id="标准" tabindex="-1"><a class="header-anchor" href="#标准" aria-hidden="true">#</a> 标准</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
   Stdin  <span class="token operator">=</span> <span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/dev/stdin&quot;</span><span class="token punctuation">)</span>
   Stdout <span class="token operator">=</span> <span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/dev/stdout&quot;</span><span class="token punctuation">)</span>
   Stderr <span class="token operator">=</span> <span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/dev/stderr&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>os</code>包下有三个外暴露的文件描述符，其类型都是<code>*File</code>，分别是：</p><ul><li><code>Stdin</code> - 标准输入</li><li><code>Stdout</code> - 标准输出</li><li><code>Stderr</code> - 标准错误</li></ul><p>Go中的控制台输入输出都离不开它们。</p><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h2><p>输出一句<code>Hello 世界!</code>，比较常用的有三种方法，第一种是调用<code>os.Stdout</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;Hello 世界!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种是使用内置函数<code>println</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello 世界!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三种也是最推荐的一种就是调用<code>fmt</code>包下的<code>Println</code>函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello 世界!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>fmt.Println</code>会用到反射，因此输出的内容通常更容易使人阅读，不过性能很差强人意。</p><h2 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h2><table><thead><tr><th>0</th><th>格式化</th><th>描述</th><th>接收类型</th></tr></thead><tbody><tr><td>1</td><td><strong><code>%%</code></strong></td><td>输出百分号<code>%</code></td><td><code>任意类型</code></td></tr><tr><td>2</td><td><strong><code>%s</code></strong></td><td>输出<code>string</code>/<code>[] byte</code>值</td><td><code>string</code>,<code>[] byte</code></td></tr><tr><td>3</td><td><strong><code>%q</code></strong></td><td>格式化字符串，输出的字符串两端有双引号<code>&quot;&quot;</code></td><td><code>string</code>,<code>[] byte</code></td></tr><tr><td>4</td><td><strong><code>%d</code></strong></td><td>输出十进制整型值</td><td><code>整型类型</code></td></tr><tr><td>5</td><td><strong><code>%f</code></strong></td><td>输出浮点数</td><td><code>浮点类型</code></td></tr><tr><td>6</td><td><strong><code>%e</code></strong></td><td>输出科学计数法形式 ,也可以用于复数</td><td><code>浮点类型</code></td></tr><tr><td>7</td><td><strong><code>%E</code></strong></td><td>与<code>%e</code>相同</td><td><code>浮点类型</code></td></tr><tr><td>8</td><td><strong><code>%g</code></strong></td><td>根据实际情况判断输出<code>%f</code>或者<code>%e</code>,会去掉多余的0</td><td><code>浮点类型</code></td></tr><tr><td>9</td><td><strong><code>%b</code></strong></td><td>输出整型的二进制表现形式</td><td><code>数字类型</code></td></tr><tr><td>10</td><td><strong><code>%#b</code></strong></td><td>输出二进制完整的表现形式</td><td><code>数字类型</code></td></tr><tr><td>11</td><td><strong><code>%o</code></strong></td><td>输出整型的八进制表示</td><td><code>整型</code></td></tr><tr><td>12</td><td><strong><code>%#o</code></strong></td><td>输出整型的完整八进制表示</td><td><code>整型</code></td></tr><tr><td>13</td><td><strong><code>%x</code></strong></td><td>输出整型的小写十六进制表示</td><td><code>数字类型</code></td></tr><tr><td>14</td><td><strong><code>%#x</code></strong></td><td>输出整型的完整小写十六进制表示</td><td><code>数字类型</code></td></tr><tr><td>15</td><td><strong><code>%X</code></strong></td><td>输出整型的大写十六进制表示</td><td><code>数字类型</code></td></tr><tr><td>16</td><td><strong><code>%#X</code></strong></td><td>输出整型的完整大写十六进制表示</td><td><code>数字类型</code></td></tr><tr><td>17</td><td><strong><code>%v</code></strong></td><td>输出值原本的形式，多用于数据结构的输出</td><td><code>任意类型</code></td></tr><tr><td>18</td><td><strong><code>%+v</code></strong></td><td>输出结构体时将加上字段名</td><td><code>任意类型</code></td></tr><tr><td>19</td><td><strong><code>%#v</code></strong></td><td>输出完整Go语法格式的值</td><td><code>任意类型</code></td></tr><tr><td>20</td><td><strong><code>%t</code></strong></td><td>输出布尔值</td><td><code>布尔类型</code></td></tr><tr><td>21</td><td><strong><code>%T</code></strong></td><td>输出值对应的Go语言类型值</td><td><code>任意类型</code></td></tr><tr><td>22</td><td><strong><code>%c</code></strong></td><td>输出Unicode码对应的字符</td><td><code>int32</code></td></tr><tr><td>23</td><td><strong><code>%U</code></strong></td><td>输出字符对应的Unicode码</td><td><code>rune</code>,<code>byte</code></td></tr><tr><td>24</td><td><strong><code>%p</code></strong></td><td>输出指针所指向的地址</td><td><code>指针类型</code></td></tr></tbody></table><p>使用<code>fmt.Sprintf</code>或者<code>fmt.Printf</code>来格式化字符串或者输出格式化字符串，看几个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%%%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
 
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span> 
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span> 
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">1e2</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%e\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">1e2</span><span class="token punctuation">)</span>				
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%E\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">1e2</span><span class="token punctuation">)</span>				
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%g\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">1e2</span><span class="token punctuation">)</span>				

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%b\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#b\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#o\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#x\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%X\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#X\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>			

<span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    name    <span class="token builtin">string</span>
    age     <span class="token builtin">int</span>
    address <span class="token builtin">string</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v\\n&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">{</span><span class="token string">&quot;lihua&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&quot;beijing&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">{</span><span class="token string">&quot;lihua&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&quot;beijing&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#v\\n&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">{</span><span class="token string">&quot;lihua&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&quot;beijing&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%t\\n&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>							
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>						
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c%c\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">20050</span><span class="token punctuation">,</span> <span class="token number">20051</span><span class="token punctuation">)</span>					
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%U\\n&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;码&#39;</span><span class="token punctuation">)</span>							   
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>						

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用其它进制时，在<code>%</code>与格式化动词之间加上一个空格便可以达到分隔符的效果，例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;abcdefg&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;% x\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该例输出的结果为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>61626364656667
61 62 63 64 65 66 67
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用数字时，还可以自动补零。比如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%09d&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 000000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二进制同理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%09b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// 000001000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误情况</strong></p><p>格式化字符数量 &lt; 参数列表数量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">//%!(EXTRA string=)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>格式化字符数量 &gt; 参数列表数量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">//%!s(MISSING)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型不匹配</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//%!s(int=1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>缺少格式化动词</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// %!(NOVERB)%!(EXTRA int=1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="输入" tabindex="-1"><a class="header-anchor" href="#输入" aria-hidden="true">#</a> 输入</h2><p>输入的话是通常使用<code>fmt</code>包下提供的三个函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 扫描从os.Stdin读入的文本，根据空格分隔，换行也被当作空格</span>
<span class="token keyword">func</span> <span class="token function">Scan</span><span class="token punctuation">(</span>a <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 

<span class="token comment">// 与Scan类似，但是遇到换行停止扫描</span>
<span class="token keyword">func</span> <span class="token function">Scanln</span><span class="token punctuation">(</span>a <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// 根据格式化的字符串扫描</span>
<span class="token keyword">func</span> <span class="token function">Scanf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，Go中输入的默认分隔符号是空格，下面看几个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> s<span class="token punctuation">,</span> s2 <span class="token builtin">string</span>
   fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a
b
a b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>fmt.Scanln</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s<span class="token punctuation">,</span> s2 <span class="token builtin">string</span>
	fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a b
a b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>fmt.Scanf</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> s<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3 <span class="token builtin">string</span>
   scanf<span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s \\n %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>scanf<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>aa bb
cc
aa
bb
cc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓冲" tabindex="-1"><a class="header-anchor" href="#缓冲" aria-hidden="true">#</a> 缓冲</h2><p>当对性能有要求时可以使用<code>bufio</code>包进行读取，例如下面这个输入的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 读</span>
   scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
   scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abcedfg
abcedfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 写</span>
   writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>
   writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!\\n&quot;</span><span class="token punctuation">)</span>
   writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token function">Buffered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hello world!
0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,56),p=[o];function c(i,u){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","45.inout.html.vue"]]);export{d as default};
