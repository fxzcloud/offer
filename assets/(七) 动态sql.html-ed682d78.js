import{_ as s,V as a,W as e,$ as t,X as n}from"./framework-8edddef6.js";const p={},i=t(`<h1 id="sqlnode-动态sql脚本" tabindex="-1"><a class="header-anchor" href="#sqlnode-动态sql脚本" aria-hidden="true">#</a> SqlNode (动态SQL脚本)</h1><p>动态SQL xml元素最终都会被解成一个可执行的脚本。而MyBatis 正是通过为这个脚本传递参数，并执行脚本计算来生成动态SQL。脚本在MyBatis中体现即<strong>SqlNode</strong>。首先Mybatis中使用了OGNL表达式对条件进行判断，然后采用解释器模式，对整个动态sql的语法树进行处理，最后形成了需要执行的BoundSql对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 一次可执行的 SQL 封装
 *
 * <span class="token keyword">@author</span> Clinton Begin
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoundSql</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 可执行的 SQL 语句
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 参数映射
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 原始参数对象
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 对动态参数运算后的新参数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalParameters<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 操作原始参数的MetaObject
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> metaParameters<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sql <span class="token operator">=</span> sql<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parameterMappings <span class="token operator">=</span> parameterMappings<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parameterObject <span class="token operator">=</span> parameterObject<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>additionalParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>metaParameters <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>additionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sql<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> <span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> parameterMappings<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> parameterObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasAdditionalParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> paramName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyTokenizer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> additionalParameters<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAdditionalParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        metaParameters<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getAdditionalParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> metaParameters<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://minio.pigx.vip/oss/2022/09/S7cKLR.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每个动态元素都会有一个与之对应的脚本类。 SqlNode主要使用解释器模式，对每隔标签进行实现：如<code>if</code> 对应<code>ifSqlNode</code>、<code>forEarch</code>对应<code>ForEachSqlNode</code> 以此类推下去。这里要注意下面三个脚本。</p><ul><li><code>StaticTextSqlNode</code> 表示一段纯静态文本如： <code>select * from user</code></li><li><code>TextSqlNode</code> 表示一个通过参数拼装的文本如：<code>select * from \${user}</code></li><li><code>MixedSqlNode</code> 表示多个节点的集合</li></ul><figure><img src="https://minio.pigx.vip/oss/2022/09/JwicDJ.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>脚本之间是呈现嵌套关系的。比如<code>if</code>元素中会包含一个<code>MixedSqlNode</code> ，而<code>MixedSqlNode</code>下又会包含1至1至多个其它节点。最后组成一课脚本语法树。如下面左边的SQL元素组成右边的语法树。在节点最底层一定是一个<code>StaticTextNode</code>或 <code>TextNode</code></p><figure><img src="https://minio.pigx.vip/oss/2022/09/H0WQB5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>SqlNode的接口非常简单，就只有一个apply方法，方法的作用就是执行当前脚本节点逻辑，并把结果应用到<code>DynamicContext</code>当中去。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如<code>IfSqlNode</code>当中执行 apply时先计算If逻辑，如果通过就会继续去访问它的子节点。直到最后访问到<code>TextNode</code> 时把SQL文本添加至<strong>DynamicContext</strong>。 通过这种类似递归方式Context就会访问到所有的的节点，并把最后最终符合条件的的SQL文本追加到 Context中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//IfSqlNode</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//计算if表达示</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluator<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    contents<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//StaticTextSqlNode</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span><span class="token function">appendSql</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://minio.pigx.vip/oss/2022/09/i18VRb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问完所有节点之后，就会生成一个SQL字符串，但这个并不是可直接执行的SQL,因为里面的参数还是表达式的形式<code>#{name=name}</code> 就需要通过<code>SqlSourceBuilder</code> 来构建可执行的SQL和参数映射<code>ParameterMapping</code> 。然后才能生成BoundSql。下图表示了在上下文中执行所有节点之后，最生成BoundSql。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/Ya6SNq.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="sqlsource-sql数据源" tabindex="-1"><a class="header-anchor" href="#sqlsource-sql数据源" aria-hidden="true">#</a> SqlSource（SQL数据源）</h2><p><strong>在上层定义上每个Sql映射（MappedStatement）中都会包含一个SqlSource 用来获取可执行Sql（<code>BoundSql</code>）。SqlSource又分为原生SQL源与动态SQL源，以及第三方源。脚本的解析流程：把XML -&gt; SqlSource -&gt; BoundSql 的过程。</strong></p><figure><img src="https://minio.pigx.vip/oss/2022/09/63Wp3N.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>ProviderSqlSource ：第三方法SQL源，每次获取SQL都会基于参数动态创建静态数据源，然后在创建BoundSql</li><li>DynamicSqlSource：动态SQL源包含了SQL脚本，每次获取SQL都会基于参数又及脚本，动态创建创建BoundSql</li><li>RawSqlSource：不包含任何动态元素，原生文本的SQL。但这个SQL是不能直接执行的，需要转换成BoundSql</li><li>StaticSqlSource：包含可执行的SQL，以及参数映射，可直接生成BoundSql。前面三个数据源都要先创建StaticSqlSource然后才创建BoundSql。</li></ul><p>SqlSource 是基于XML解析而来，解析的底层是使用Dom4j 把XML解析成一个个子节点，在通过 <strong>XMLScriptBuilder</strong> 遍历这些子节点最后生成对应的Sql源。其解析流程如下图：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/PZ8lTk.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从图中可以看出这是一种递归式的访问 所有节点，如果是文本节点就会直接创建TextNode 或StaticSqlNode。否则就会创建动态脚本节点如IfSqlNode等。这里每种动态节点都会对应的处理器(<code>NodeHandler</code>)来创建。创建好之后又会继续访问子节点，让递归继续下去。当然子节点所创建的SqNode 也会作为当前所创建的元素的子节点而存在。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/7sCuHF.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>OGNL表达式简单使用：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/zFDQWM.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>IF和Where节点的执行：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/8Hc7s2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://minio.pigx.vip/oss/2022/09/Q4hKd2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其实就是数据简单的字符串拼装 ，通过where看到，是继承 TrimSqlNode：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span> <span class="token punctuation">/&gt;</span></span>\` 标签的 SqlNode 实现类
 *
 * <span class="token keyword">@author</span> Clinton Begin
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhereSqlNode</span> <span class="token keyword">extends</span> <span class="token class-name">TrimSqlNode</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prefixList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;AND &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AND\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AND\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AND\\t&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OR\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WhereSqlNode</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> contents<span class="token punctuation">,</span> <span class="token string">&quot;WHERE&quot;</span><span class="token punctuation">,</span> prefixList<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TrimSqlNode的源码，就是遍历where里面的相关节点，然后截取或者增加相关内容，然后放入一个自有的上下文中，然后进行相关拼装，最后放入整体上下文。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/xFXKrC.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到buffer中是修剪完毕的sql，同时applyAll之后，就是把buffer中的数据，追加到context中：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/Y820T6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>foreach操作：先根据传入是list还是map，因为循环的时候，需要根据集合内部的数据拼装成参数</p>`,37),o=n("p",{item_key2:""},"#{item_1},#{item_2}，如果是map这拼接成#{item_key1},#",-1),c=n("figure",null,[n("img",{src:"https://minio.pigx.vip/oss/2022/09/QreVba.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),l=n("figure",null,[n("img",{src:"https://minio.pigx.vip/oss/2022/09/qk784p.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),u=n("p",null,"XML的解析过程（xml->SqlSource）：",-1),d=n("figure",null,[n("img",{src:"https://minio.pigx.vip/oss/2022/09/eDmS48.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),r=n("figure",null,[n("img",{src:"https://minio.pigx.vip/oss/2022/09/gjCwpW.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),k=[i,o,c,l,u,d,r];function m(v,g){return a(),e("div",null,k)}const f=s(p,[["render",m],["__file","(七) 动态sql.html.vue"]]);export{f as default};
