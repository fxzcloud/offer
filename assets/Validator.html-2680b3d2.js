import{_ as o,V as p,W as c,X as n,Y as s,Z as t,$ as e,F as i}from"./framework-8edddef6.js";const l={},d=n("h1",{id:"validator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#validator","aria-hidden":"true"},"#"),s(" Validator")],-1),u={href:"https://github.com/go-playground/validator",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/go-playground/validator/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/go-playground/validator/tree/master/_examples",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/go-playground/validator#benchmarks",target:"_blank",rel:"noopener noreferrer"},m=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><code>go-playground/validator</code>实现了一款基于结构体标签的值验证器，它有着以下独一无二的特性：</p><ul><li><p>可使用验证标签和自定义验证器来进行跨字段和跨结构体验证</p></li><li><p>切片，数组，map，或者任何多维域都可以被验证</p></li><li><p>可以深入验证map的key和value</p></li><li><p>在验证之前，通过其基本类型来确定如何进行处理</p></li><li><p>可以处理自定义字段类型</p></li><li><p>支持别名标签，它将允许多个验证映射到单个标签上，以便更容易的定义对于结构体的验证</p></li><li><p>可以提取自定义的字段名，例如可以在验证时提取JSON名称以便在错误信息中显示</p></li><li><p>自定义多语言错误信息</p></li><li><p><code>gin</code>框架的标准默认验证组件</p></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>go get github<span class="token punctuation">.</span>com/go-playground/validator/v10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="导入" tabindex="-1"><a class="header-anchor" href="#导入" aria-hidden="true">#</a> 导入</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/go-playground/validator/v10&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h2><p>验证器有着非常多的基础验证标签，所有标签对应的验证函数都可以在<code>baked_in.go</code>文件中找到，验证器的结构体Tag是<code>valiadte</code>，</p><p>例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token punctuation">{</span>
	age <span class="token builtin">int</span> <span class="token string">\`validate:&quot;gte=18&quot;\`</span> <span class="token comment">//表示大于等于18岁</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过<code>setTagName</code>方法来修改默认Tag 。</p><h3 id="字段" tabindex="-1"><a class="header-anchor" href="#字段" aria-hidden="true">#</a> 字段</h3><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><code>eqcsfield</code></td><td>在一个单独的结构中，验证当前字段的值是否等于由param的值指定的字段</td></tr><tr><td><code>eqfield</code></td><td>验证当前字段的值是否等于参数值指定的字段</td></tr><tr><td><code>fieldcontains</code></td><td>验证当前字段的值是否包含由参数值指定的字段</td></tr><tr><td><code>fieldexcludes</code></td><td>验证当前字段的值是否不包含由参数值指定的字段</td></tr><tr><td><code>gtcsfield</code></td><td>在一个单独的结构中，验证当前字段的值是否大于由参数的值指定的字段</td></tr><tr><td><code>gtecsfield</code></td><td>在一个单独的结构中，验证当前字段的值是否大于或等于由参数的值指定的字段</td></tr><tr><td><code>gtefield</code></td><td>验证当前字段的值是否大于或等于由参数值指定的字段</td></tr><tr><td><code>gtfield</code></td><td>验证当前字段的值是否大于由参数值指定的字段</td></tr><tr><td><code>ltcsfield</code></td><td>在一个单独的结构中，验证当前字段的值是否小于由参数的值指定的字段</td></tr><tr><td><code>ltecsfield</code></td><td>在一个单独的结构中，验证当前字段的值是否小于等于由参数的值指定的字段</td></tr><tr><td><code>ltefield</code></td><td>验证当前字段的值是否小于或等于由参数值指定的字段</td></tr><tr><td><code>ltfield</code></td><td>验证当前字段的值是否小于由参数值指定的字段</td></tr><tr><td><code>necsfield</code></td><td>验证当前字段的值不等于由参数的值指定的单独结构中的字段</td></tr><tr><td><code>nefield</code></td><td>验证当前字段的值是否不等于参数值指定的字段</td></tr></tbody></table><h3 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h3><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><code>cidr</code></td><td>无类域间路由CIDR</td></tr><tr><td><code>cidrv4</code></td><td>无类域间路由CIDRv4</td></tr><tr><td><code>cidrv6</code></td><td>无类域间路由CIDRv6</td></tr><tr><td><code>datauri</code></td><td>数据统一资源定位符</td></tr><tr><td><code>fqdn</code></td><td>完全限定域名(FQDN)</td></tr><tr><td><code>hostname</code></td><td>主机名 RFC 952</td></tr><tr><td><code>hostname_port</code></td><td>通常用于套接字地址的字段验证<code>&lt;dns&gt;:&lt;port&gt;</code>组合</td></tr><tr><td><code>hostname_rfc1123</code></td><td>主机名 RFC 952</td></tr><tr><td><code>ip</code></td><td>因特网协议地址 IP</td></tr><tr><td><code>ip4_addr</code></td><td>因特网协议地址 IPv4</td></tr><tr><td><code>ip6_addr</code></td><td>因特网协议地址 IPv6</td></tr><tr><td><code>ip_addr</code></td><td>因特网协议地址 IP</td></tr><tr><td><code>ipv4</code></td><td>因特网协议地址 IPv4</td></tr><tr><td><code>ipv6</code></td><td>因特网协议地址 IPv6</td></tr><tr><td><code>mac</code></td><td>媒体存取控制位址，也称局域网地址</td></tr><tr><td><code>tcp4_addr</code></td><td>传输控制协议地址 TCP4</td></tr><tr><td><code>tcp6_addr</code></td><td>传输控制协议地址 TCPv6</td></tr><tr><td><code>tcp_addr</code></td><td>传输控制协议地址 TCP</td></tr><tr><td><code>udp4_addr</code></td><td>用户数据报协议地址 UDPv4</td></tr><tr><td><code>udp6_addr</code></td><td>用户数据报协议地址 UDPv6</td></tr><tr><td><code>udp_addr</code></td><td>用户数据报协议地址 UDP</td></tr><tr><td><code>unix_addr</code></td><td>Unix域套接字端点地址</td></tr><tr><td><code>uri</code></td><td>统一资源标识符</td></tr><tr><td><code>url</code></td><td>统一资源定位符</td></tr><tr><td><code>url_encoded</code></td><td>统一资源标识符编码</td></tr><tr><td><code>urn_rfc2141</code></td><td>RFC 2141 统一资源名</td></tr></tbody></table><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><code>alpha</code></td><td>验证当前字段的值是否是有效的字母</td></tr><tr><td><code>alphanum</code></td><td>验证当前字段的值是否是有效的字母数字</td></tr><tr><td><code>alphanumunicode</code></td><td>验证当前字段的值是否是有效的字母数字unicode值</td></tr><tr><td><code>alphaunicode</code></td><td>验证当前字段的值是否是有效的字母unicode值</td></tr><tr><td><code>ascii</code></td><td>验证字段的值是否为有效的ASCII字符</td></tr><tr><td><code>boolean</code></td><td>验证当前字段的值是否为有效的布尔值或是否可以安全地转换为布尔值</td></tr><tr><td><code>contains</code></td><td>验证字段的值是否包含参数中指定的文本</td></tr><tr><td><code>containsany</code></td><td>验证字段的值是否包含参数中指定的任何字符</td></tr><tr><td><code>containsrune</code></td><td>验证字段的值是否包含参数中指定的符文</td></tr><tr><td><code>endsnotwith</code></td><td>验证字段的值不以参数中指定的文本结束</td></tr><tr><td><code>endswith</code></td><td>验证字段的值以参数中指定的文本结束</td></tr><tr><td><code>excludes</code></td><td>验证字段的值不包含参数中指定的文本</td></tr><tr><td><code>excludesall</code></td><td>验证字段的值不包含参数中指定的任何字符</td></tr><tr><td><code>excludesrune</code></td><td>验证字段的值不包含参数中指定的字符</td></tr><tr><td><code>lowercase</code></td><td>验证当前字段的值是否为小写字符串</td></tr><tr><td><code>multibyte</code></td><td>验证字段的值是否具有多字节字符</td></tr><tr><td><code>number</code></td><td>验证当前字段的值是否为有效数字</td></tr><tr><td><code>numeric</code></td><td>验证当前字段的值是否是有效的数值</td></tr><tr><td><code>printascii</code></td><td>验证字段的值是否是有效的可打印ASCII字符</td></tr><tr><td><code>startsnotwith</code></td><td>验证字段的值不是以参数中指定的文本开始</td></tr><tr><td><code>startswith</code></td><td>验证字段的值是否以参数中指定的文本开始</td></tr><tr><td><code>uppercase</code></td><td>验证当前字段的值是否为大写字符串</td></tr></tbody></table><h3 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h3><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><code>base64</code></td><td>Base64 字符串</td></tr><tr><td><code>base64url</code></td><td>Base64URL 字符串</td></tr><tr><td><code>bic</code></td><td>验证当前字段的值是否为ISO 9362中定义的有效的BIC码(SWIFT代码)</td></tr><tr><td><code>bcp47_language_tag</code></td><td>验证当前字段的值是否为BCP47规范的语言标签</td></tr><tr><td><code>btc_addr</code></td><td>验证字段的值是否为有效的BTC地址</td></tr><tr><td><code>btc_addr_bech32</code></td><td>验证字段的值是否为有效的bech32 BTC地址</td></tr><tr><td><code>credit_card</code></td><td>验证当前字段的值是否是有效的信用卡号</td></tr><tr><td><code>datetime</code></td><td>验证当前字段的值是否是有效的时间日期字符串</td></tr><tr><td><code>e164</code></td><td>验证当前字段的值是否为有效的e.164格式的电话号码</td></tr><tr><td><code>email</code></td><td>验证当前字段的值是否是有效的电子邮件地址</td></tr><tr><td><code>eth_addr</code></td><td>验证字段的值是否为有效的以太坊地址</td></tr><tr><td><code>hexadecimal</code></td><td>验证当前字段的值是否为有效的十六进制</td></tr><tr><td><code>hexcolor</code></td><td>验证当前字段的值是否是有效的十六进制颜色</td></tr><tr><td><code>hsl</code></td><td>验证当前字段的值是否是有效的HSL颜色</td></tr><tr><td><code>hsla</code></td><td>验证当前字段的值是否是有效的HSLA颜色</td></tr><tr><td><code>html</code></td><td>验证当前字段的值是否是有效的HTML</td></tr><tr><td><code>html_encoded</code></td><td>验证当前字段的值是否是有效的HTML编码</td></tr><tr><td><code>isbn</code></td><td>验证字段的值是否为有效的v10或v13 ISBN（国际标准书号）</td></tr><tr><td><code>isbn10</code></td><td>验证字段的值是否为有效的v10 ISBN（国际标准书号）</td></tr><tr><td><code>isbn13</code></td><td>验证字段的值是否为有效的v13 ISBN（国际标准书号）</td></tr><tr><td><code>iso3166_1_alpha2</code></td><td>验证当前字段的值是否为有效的iso3166-1 alpha-2国家代码</td></tr><tr><td><code>iso3166_1_alpha3</code></td><td>验证当前字段的值是否为有效的iso3166-1 alpha-3国家代码</td></tr><tr><td><code>iso3166_1_alpha_numeric</code></td><td>验证当前字段的值是否为有效的iso3166-1字母数字国家代码</td></tr><tr><td><code>iso3166_2</code></td><td>验证当前字段的值是否为有效的国家地区代码 (ISO 3166-2)</td></tr><tr><td><code>iso4217</code></td><td>验证当前字段的值是否为有效的货币代码 (ISO 4217)</td></tr><tr><td><code>json</code></td><td>验证当前字段的值是否为有效的json字符串</td></tr><tr><td><code>jwt</code></td><td>验证当前字段的值是否是有效的JWT字符串</td></tr><tr><td><code>latitude</code></td><td>验证字段的值是否是有效的纬度坐标</td></tr><tr><td><code>longitude</code></td><td>验证字段的值是否是有效的纬度坐标</td></tr><tr><td><code>postcode_iso3166_alpha2</code></td><td>根据iso 3166 alpha 2中国家代码的值进行验证</td></tr><tr><td><code>postcode_iso3166_alpha2_field</code></td><td>通过字段验证，该字段表示iso 3166 alpha 2中的国家代码值</td></tr><tr><td><code>rgb</code></td><td>验证当前字段的值是否是有效的RGB颜色</td></tr><tr><td><code>rgba</code></td><td>验证当前字段的值是否是有效的RGBA颜色</td></tr><tr><td><code>ssn</code></td><td>验证字段的值是否是有效的SSN</td></tr><tr><td><code>timezone</code></td><td>验证当前字段的值是否是有效的时区字符串</td></tr><tr><td><code>uuid</code></td><td>验证字段的值是否是任何版本的有效UUID</td></tr><tr><td><code>uuid3</code></td><td>验证字段的值是否是任的有效UUID v3</td></tr><tr><td><code>uuid3_rfc4122</code></td><td>验证字段的值是否为有效的RFC4122 v3 UUID</td></tr><tr><td><code>uuid4</code></td><td>验证字段的值是否为有效的v4 UUID</td></tr><tr><td><code>uuid4_rfc4122</code></td><td>验证字段的值是否为有效的RFC4122 v4 UUID</td></tr><tr><td><code>uuid5</code></td><td>验证字段的值是否是有效的v5 UUID</td></tr><tr><td><code>uuid5_rfc4122</code></td><td>验证字段的值是否是有效的RFC4122 v5 UUID</td></tr><tr><td><code>uuid_rfc4122</code></td><td>验证字段的值是否为任何版本的有效RFC4122 UUID</td></tr><tr><td><code>md4</code></td><td>验证字段的值是否为有效的MD4</td></tr><tr><td><code>md5</code></td><td>验证字段的值是否为有效的MD5</td></tr><tr><td><code>sha256</code></td><td>验证该字段的值是否是有效的SHA256</td></tr><tr><td><code>sha384</code></td><td>验证字段的值是否是有效的SHA384</td></tr><tr><td><code>sha512</code></td><td>验证字段的值是否为有效的SHA512</td></tr><tr><td><code>ripemd128</code></td><td>验证字段的值是否是有效的PIPEMD128</td></tr><tr><td><code>ripemd128</code></td><td>验证字段的值是否是有效的PIPEMD160</td></tr><tr><td><code>tiger128</code></td><td>验证字段的值是否是有效的TIGER128</td></tr><tr><td><code>tiger160</code></td><td>验证字段的值是否是有效的TIGER160</td></tr><tr><td><code>tiger192</code></td><td>验证字段的值是否是有效的TIGER192</td></tr><tr><td><code>semver</code></td><td>验证当前字段的值是否为语义版本2.0.0中定义的有效semver版本</td></tr><tr><td><code>ulid</code></td><td>验证字段的值是否为有效的ULID</td></tr></tbody></table><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h3><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><code>eq</code></td><td>等于</td></tr><tr><td><code> gt</code></td><td>大于</td></tr><tr><td><code>gte</code></td><td>大于等于</td></tr><tr><td><code>lt</code></td><td>小于</td></tr><tr><td><code>lte</code></td><td>小于等于</td></tr><tr><td><code>ne</code></td><td>不等于</td></tr></tbody></table><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><table><thead><tr><th>Tag</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td><code>dir</code></td><td style="text-align:left;">文件目录</td></tr><tr><td><code>file</code></td><td style="text-align:left;">文件路径</td></tr><tr><td><code>isdefault</code></td><td style="text-align:left;">验证当前字段的值是否是默认静态值</td></tr><tr><td><code>len</code></td><td style="text-align:left;">字段长度</td></tr><tr><td><code>max</code></td><td style="text-align:left;">最大值</td></tr><tr><td><code>min</code></td><td style="text-align:left;">最小值</td></tr><tr><td><code>oneof</code></td><td style="text-align:left;">是否是列举的值的其中的一个</td></tr><tr><td><code>oimtempty</code></td><td style="text-align:left;">如果字段未设置，则忽略它</td></tr><tr><td><code> required</code></td><td style="text-align:left;">必须值</td></tr><tr><td><code>required_if</code></td><td style="text-align:left;">只有当所有其他指定字段与指定字段后面的值相等时，验证的字段必须存在且不为空</td></tr><tr><td><code>required_unless</code></td><td style="text-align:left;">除非所有其他指定字段与指定字段后面的值相等，验证的字段必须存在且不为空</td></tr><tr><td><code>required_with</code></td><td style="text-align:left;">当指定的字段有一个存在时，验证的字段必须存在且不为空</td></tr><tr><td><code>required_with_all</code></td><td style="text-align:left;">当指定的所有字段存在时，验证的字段必须存在且不为空</td></tr><tr><td><code>required_without</code></td><td style="text-align:left;">当指定的字段有一个不存在时，验证的字段必须存在且不为空</td></tr><tr><td><code>required_without_all</code></td><td style="text-align:left;">当指定的字段全部不存在时，验证的字段必须存在且不为空</td></tr><tr><td><code>excluded_if</code></td><td style="text-align:left;">只有当所有其他指定字段与指定字段后面的值相等时，验证的字段可以不存在或者为空</td></tr><tr><td><code>excluded_unless</code></td><td style="text-align:left;">除非所有其他指定字段与指定字段后面的值相等，验证的字段可以不存在或者为空</td></tr><tr><td><code>excluded_with</code></td><td style="text-align:left;">当指定的字段有一个存在时，验证的字段可以不存在或者为空</td></tr><tr><td><code>excluded_with_all</code></td><td style="text-align:left;">当指定的所有字段存在时，验证的字段可以不存在或者为空</td></tr><tr><td><code>excluded_without</code></td><td style="text-align:left;">当指定的字段有一个不存在时，验证的字段可以不存在或者为空</td></tr><tr><td><code>excluded_without_all</code></td><td style="text-align:left;">当指定的字段全部不存在时，验证的字段可以不存在或者为空</td></tr><tr><td><code>unique </code></td><td style="text-align:left;">验证每个\`arr</td></tr></tbody></table><h3 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h3><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><code>iscolor</code></td><td>hexcolor|rgb|rgba|hsl|hsla</td></tr><tr><td><code>country_code</code></td><td>iso3166_1_alpha2|iso3166_1_alpha3|iso3166_1_alpha_numeric</td></tr></tbody></table><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h3><table><thead><tr><th>Tag</th><th>Description</th><th>Hex</th></tr></thead><tbody><tr><td><code>,</code></td><td>与操作，使用多个验证标记，必须所有条件都满足，隔开逗号之间不能有空格</td><td><code>0x2c</code></td></tr><tr><td>\`</td><td>\`</td><td>或操作，使用多个验证标记，但是只需满足其中一个即可</td></tr><tr><td><code>-</code></td><td>该字段跳过验证</td><td><code>0x2d</code></td></tr><tr><td><code>=</code></td><td>参数匹配符号</td><td><code>0x3d</code></td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>验证字段的时候想要匹配操作符的话，需要使用<code>utf8</code>十六进制表达形式替换，例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>filed <span class="token builtin">string</span> <span class="token string">\`validate:&quot;contains=0x2c&quot;\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>下面会介绍<code>Validator</code>的一些基本使用以及一些代码示例。</p><h3 id="单例" tabindex="-1"><a class="header-anchor" href="#单例" aria-hidden="true">#</a> 单例</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> validate <span class="token operator">*</span>validator<span class="token punctuation">.</span>Validate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用时，官方建议在整个程序的生命周期中，只存在一个验证器实例，这样会有利于其缓存一些数据。</p><h3 id="创建验证器" tabindex="-1"><a class="header-anchor" href="#创建验证器" aria-hidden="true">#</a> 创建验证器</h3><p>在单独使用<code>Validator</code>没有集成其他框架的情况下，需要我们手动创建验证器。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="结构体验证" tabindex="-1"><a class="header-anchor" href="#结构体验证" aria-hidden="true">#</a> 结构体验证</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Validate<span class="token punctuation">)</span> <span class="token function">Struct</span><span class="token punctuation">(</span>s <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Struct</code>方法用于验证一个结构体所有公开的字段，默认会自动进行嵌套结构体验证，当传入非法的值或者传入值为<code>nil</code>时，会返回<code>InvalidValidationError</code>，如果验证失败的错误则返回<code>ValidationErrors</code> 。</p><p>示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> validate

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/go-playground/validator/v10&quot;</span>
	<span class="token string">&quot;testing&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`validate:&quot;contains=jack&quot;\`</span> <span class="token comment">//名字包含jack</span>
	Age     <span class="token builtin">int</span>    <span class="token string">\`validate:&quot;gte=18&quot;\`</span>        <span class="token comment">//大于等于17岁</span>
	Address <span class="token builtin">string</span> <span class="token string">\`valiate:&quot;endwith=市&quot;\`</span>      <span class="token comment">//以市结尾</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestStruct</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	validate <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>    <span class="token string">&quot;jacklove&quot;</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>     <span class="token number">17</span><span class="token punctuation">,</span>
		Address<span class="token punctuation">:</span> <span class="token string">&quot;滔博市&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token keyword">range</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Namespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//命名</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">StructNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">StructField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">ActualTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User.Age
Age     
User.Age
Age     
gte     
gte     
int     
int
17
18

Key: &#39;User.Age&#39; Error:Field validation for &#39;Age&#39; failed on the &#39;gte&#39; tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map验证" tabindex="-1"><a class="header-anchor" href="#map验证" aria-hidden="true">#</a> map验证</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Validate<span class="token punctuation">)</span> <span class="token function">ValidateMap</span><span class="token punctuation">(</span>data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> rules <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过一个Tag<code>map</code>来进行键值对验证。</p><p>示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestMap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   user <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>    <span class="token string">&quot;jak&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>     <span class="token number">17</span><span class="token punctuation">,</span>
      <span class="token string">&quot;address&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;滔博市&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
   rules <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>    <span class="token string">&quot;contains=jacklove&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;gte=18&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;address&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;endswith=市&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>

   validate <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   validateMap <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">ValidateMap</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> rules<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validateMap<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map[age:Key: &#39;&#39; Error:Field validation for &#39;&#39; failed on the &#39;gte&#39; tag name:Key: &#39;&#39; Error:Field validation for &#39;&#39; failed on the &#39;contains&#39; tag]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="切片验证" tabindex="-1"><a class="header-anchor" href="#切片验证" aria-hidden="true">#</a> 切片验证</h3><p>验证字符串切片，<code>dive</code>前是tag是对切片进行验证，<code>dive</code>后的tag是对切片中的值进行验证，嵌套切片也是一个道理，有几维就用几个<code>dive</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestSlice1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lisa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;golang&quot;</span><span class="token punctuation">}</span>
	err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Var</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;max=5,dive,contains=a,min=5&quot;</span><span class="token punctuation">)</span> <span class="token comment">//切片长度最大值为5，元素必须包含字符a，且最小长度为5</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Key: &#39;[0]&#39; Error:Field validation for &#39;[0]&#39; failed on the &#39;min&#39; tag
Key: &#39;[1]&#39; Error:Field validation for &#39;[1]&#39; failed on the &#39;contains&#39; tag
Key: &#39;[2]&#39; Error:Field validation for &#39;[2]&#39; failed on the &#39;min&#39; tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对切片里的每一个用户进行结构体验证</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestSlice</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   userList <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
   user <span class="token operator">:=</span> User<span class="token punctuation">{</span>
      Name<span class="token punctuation">:</span>    <span class="token string">&quot;jacklove&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>     <span class="token number">17</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span> <span class="token string">&quot;滔博市&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
   userList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span> user<span class="token punctuation">)</span>
   err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Var</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span> <span class="token string">&quot;dive&quot;</span><span class="token punctuation">)</span> <span class="token comment">//“dive”即深层验证的意思，当元素为结构体时，会自动进行结构体验证</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Key: &#39;[0].Age&#39; Error:Field validation for &#39;Age&#39; failed on the &#39;gte&#39; tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="变量验证" tabindex="-1"><a class="header-anchor" href="#变量验证" aria-hidden="true">#</a> 变量验证</h3><p>比较简单易懂，就不做过多的解释</p><p>例1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestVar</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   name <span class="token operator">:=</span> <span class="token string">&quot;jack&quot;</span>
   err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Var</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;max=5,contains=a,min=1,endswith=l&quot;</span><span class="token punctuation">)</span> <span class="token comment">//最大长度为5，最小长度为1，包含字母a，以字母l结尾</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Key: &#39;&#39; Error:Field validation for &#39;&#39; failed on the &#39;endswith&#39; tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例2</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>func TestVar1(t *testing.T) {
   age := 18
   err := validator.New().Var(age, &quot;gte=19&quot;)
   fmt.Println(err)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Key: &#39;&#39; Error:Field validation for &#39;&#39; failed on the &#39;gte&#39; tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>Var</code>方法可以验证的类型包含结构体，变量，切片，map，要合理结合<code>dive</code>标签使用。</p></div><h3 id="字段验证" tabindex="-1"><a class="header-anchor" href="#字段验证" aria-hidden="true">#</a> 字段验证</h3><p>字段验证的参数不再是基本类型，而是结构体的字段名，可以是自身的字段名，也可以是嵌套结构体的字段名。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Password <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   FirstPassword  <span class="token builtin">string</span> <span class="token string">\`validate:&quot;eqfield=SecondPassword&quot;\`</span> <span class="token comment">//验证两次输入的密码是否相等</span>
   SecondPassword <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> RegisterUser <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Username <span class="token builtin">string</span> <span class="token string">\`validate:&quot;necsfield=Password.FirstPassword&quot;\`</span> <span class="token comment">//在注册时为了安全考虑，禁止密码和用户名一致</span>
   Password Password
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestCrossStructFieldValidate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">// 失败</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>RegisterUser<span class="token punctuation">{</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">,</span>
      Password<span class="token punctuation">:</span> Password<span class="token punctuation">{</span>
         FirstPassword<span class="token punctuation">:</span>  <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">,</span>
         SecondPassword<span class="token punctuation">:</span> <span class="token string">&quot;gophers&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token comment">// 成功</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>RegisterUser<span class="token punctuation">{</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;gophers&quot;</span><span class="token punctuation">,</span>
      Password<span class="token punctuation">:</span> Password<span class="token punctuation">{</span>
         FirstPassword<span class="token punctuation">:</span>  <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">,</span>
         SecondPassword<span class="token punctuation">:</span> <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Key: &#39;RegisterUser.Username&#39; Error:Field validation for &#39;Username&#39; failed on the &#39;necsfield&#39; tag
Key: &#39;RegisterUser.Password.FirstPassword&#39; Error:Field validation for &#39;FirstPassword&#39; failed on the &#39;eqfield&#39; tag
&lt;nil&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用字段验证时，当Tag作为参数的字段或者结构体不存在时，会直接判断为验证失败，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Password <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   FirstPassword  <span class="token builtin">string</span> <span class="token string">\`validate:&quot;eqfield=SeconddPaswod&quot;\`</span> <span class="token comment">// SeconddPaswod != SecondPassword</span>
   SecondPassword <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种拼写错误，很难检查到，而且验证时也仅会以验证未通过的形式展现，需要十分注意。</p></div><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><p>接下来会讲解一些进阶的使用技巧与更多的自定义操作。</p><h3 id="自定义别名" tabindex="-1"><a class="header-anchor" href="#自定义别名" aria-hidden="true">#</a> 自定义别名</h3><p>在有些时候，对于一个字段有非常多的验证tag，当你想要复用到另一个字段上时，你可能会直接赋值粘贴，不过这并不是最好的解决办法，更好的方法是通过注册别名来提高复用性，请看下面的一个例子:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> validate <span class="token operator">*</span>validator<span class="token punctuation">.</span>Validate

<span class="token keyword">const</span> PERSON_NAME_RULES <span class="token operator">=</span> <span class="token string">&quot;max=10,min=1,contains=jack&quot;</span>

<span class="token keyword">func</span> <span class="token function">TestAlias</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 注册别名</span>
	validate<span class="token punctuation">.</span><span class="token function">RegisterAlias</span><span class="token punctuation">(</span><span class="token string">&quot;namerules&quot;</span><span class="token punctuation">,</span> PERSON_NAME_RULES<span class="token punctuation">)</span>
	<span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		FirstName <span class="token builtin">string</span> <span class="token string">\`validate:&quot;namerules&quot;\`</span> <span class="token comment">// 使用别名</span>
		LastName  <span class="token builtin">string</span> <span class="token string">\`validate:&quot;namerules&quot;\`</span>
	<span class="token punctuation">}</span>

	err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>person<span class="token punctuation">{</span>
		FirstName<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
		LastName<span class="token punctuation">:</span>  <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Key<span class="token punctuation">:</span> &#39;person<span class="token punctuation">.</span>FirstName&#39; Error<span class="token punctuation">:</span>Field validation <span class="token keyword">for</span> <span class="token char">&#39;FirstName&#39;</span> failed on the <span class="token char">&#39;namerules&#39;</span> tag
Key<span class="token punctuation">:</span> &#39;person<span class="token punctuation">.</span>LastName&#39; Error<span class="token punctuation">:</span>Field validation <span class="token keyword">for</span> <span class="token char">&#39;LastName&#39;</span> failed on the <span class="token char">&#39;namerules&#39;</span> tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义验证函数" tabindex="-1"><a class="header-anchor" href="#自定义验证函数" aria-hidden="true">#</a> 自定义验证函数</h3><p>虽然组件自带的验证tag足够满足基本时候，可有些时候对于一些特殊需求必须要自己定义逻辑，<code>Validator</code>为我们提供了相关的API来自定义验证函数。接下来先看一个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestCustomValidate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">RegisterValidation</span><span class="token punctuation">(</span><span class="token string">&quot;is666&quot;</span><span class="token punctuation">,</span> is666<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">type</span> Example <span class="token keyword">struct</span> <span class="token punctuation">{</span>
      Name <span class="token builtin">string</span> <span class="token string">\`validate:&quot;is666&quot;\`</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>Example<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;777&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>Example<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;666&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">is666</span><span class="token punctuation">(</span>fl validator<span class="token punctuation">.</span>FieldLevel<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> fl<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;666&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建了一个函数，判断字段值是不是等于<code>&quot;666&quot;</code>，并且其对应的Tag是<code>is666</code>，输出如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">&gt;</span>
Key<span class="token punctuation">:</span> &#39;Example<span class="token punctuation">.</span>Name&#39; Error<span class="token punctuation">:</span>Field validation <span class="token keyword">for</span> <span class="token char">&#39;Name&#39;</span> failed on the <span class="token char">&#39;is666&#39;</span> tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注册的Tag如果已经存在，那么将会被现有的覆盖掉，也就是说可以“重写”默认的Tag校验逻辑。</p></div><h3 id="自定义类型验证函数" tabindex="-1"><a class="header-anchor" href="#自定义类型验证函数" aria-hidden="true">#</a> 自定义类型验证函数</h3><p>类型验证函数是专门针对某一类型的，通常用于一些非基本类型，同样的也可以覆盖默认基本类型的校验，下面看一个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestCustomTypeValidate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	validate<span class="token punctuation">.</span><span class="token function">RegisterCustomTypeFunc</span><span class="token punctuation">(</span>ValidateAddress<span class="token punctuation">,</span> Address<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 注册类型验证函数和对应的类型</span>
	<span class="token keyword">type</span> Example <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		Address Address <span class="token string">\`validate:&quot;required&quot;\`</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>Example<span class="token punctuation">{</span>Address<span class="token punctuation">:</span> Address<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>Example<span class="token punctuation">{</span>Address<span class="token punctuation">:</span> Address<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;cn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ValidateAddress</span><span class="token punctuation">(</span>value reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> address<span class="token punctuation">,</span> ok <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token comment">//错误处理</span>
		<span class="token keyword">if</span> address<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> address<span class="token punctuation">.</span>name
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> value <span class="token comment">//返回字段即代表验证正确</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Key<span class="token punctuation">:</span> &#39;Example<span class="token punctuation">.</span>Address&#39; Error<span class="token punctuation">:</span>Field validation <span class="token keyword">for</span> <span class="token char">&#39;Address&#39;</span> failed on the <span class="token char">&#39;required&#39;</span> tag
<span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>同时将多个类型注册到一个函数也是同样的道理</p></div><h3 id="自定义结构体验证函数" tabindex="-1"><a class="header-anchor" href="#自定义结构体验证函数" aria-hidden="true">#</a> 自定义结构体验证函数</h3><p>结构体验证函数的区别在于，其他函数的参数是字段，而此函数的参数是结构体，看下面的例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   FirstName <span class="token builtin">string</span>
   LastName  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestCustomStructLevel</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   validate<span class="token punctuation">.</span><span class="token function">RegisterStructValidation</span><span class="token punctuation">(</span>PeopleValidate<span class="token punctuation">,</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//同类型注册，可以传入的结构体也不止一种</span>
   err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>People<span class="token punctuation">{</span>
      FirstName<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      LastName<span class="token punctuation">:</span>  <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">PeopleValidate</span><span class="token punctuation">(</span>sl validator<span class="token punctuation">.</span>StructLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   people <span class="token operator">:=</span> sl<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span>

   <span class="token keyword">if</span> people<span class="token punctuation">.</span>FirstName <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> people<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
      sl<span class="token punctuation">.</span><span class="token function">ReportError</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> <span class="token string">&quot;FirstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FirstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
      sl<span class="token punctuation">.</span><span class="token function">ReportError</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> <span class="token string">&quot;LastName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;LastName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Key: &#39;People.FirstName&#39; Error:Field validation for &#39;FirstName&#39; failed on the &#39;&#39; tag
Key: &#39;People.LastName&#39; Error:Field validation for &#39;LastName&#39; failed on the &#39;&#39; tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多语言" tabindex="-1"><a class="header-anchor" href="#多语言" aria-hidden="true">#</a> 多语言</h3><p>翻译器组件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get github.com/go-playground/universal-translator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>地区组件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get github.com/go-playground/locales
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证器默认的语言是英文，而我们在进行项目开发时，可能会用到不止一种语言，这时候我们就需要用到国际化多语言组件，看下面的一个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/go-playground/locales/zh&quot;</span>
	ut <span class="token string">&quot;github.com/go-playground/universal-translator&quot;</span>
	<span class="token string">&quot;github.com/go-playground/validator/v10&quot;</span>
	zh_trans <span class="token string">&quot;github.com/go-playground/validator/v10/translations/zh&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
	<span class="token string">&quot;testing&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Name    <span class="token builtin">string</span> <span class="token string">\`validate:&quot;contains=jack&quot;\`</span> <span class="token comment">//名字包含jack</span>
   Age     <span class="token builtin">int</span>    <span class="token string">\`validate:&quot;gte=18&quot;\`</span>        <span class="token comment">//大于等于17岁</span>
   Address <span class="token builtin">string</span> <span class="token string">\`validate:&quot;endswith=市&quot;\`</span>    <span class="token comment">//以市结尾</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
   uni      <span class="token operator">*</span>ut<span class="token punctuation">.</span>UniversalTranslator
   validate <span class="token operator">*</span>validator<span class="token punctuation">.</span>Validate
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestTranslate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   zh <span class="token operator">:=</span> zh<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">//第一个是备用的，后续的是支持的语言，可以有多个</span>
   uni <span class="token operator">=</span> ut<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>zh<span class="token punctuation">,</span> zh<span class="token punctuation">)</span>
   <span class="token comment">//这里的语言通常可以在http的请求头中的Accept-Language中获取对应的语言</span>
   trans<span class="token punctuation">,</span> found <span class="token operator">:=</span> uni<span class="token punctuation">.</span><span class="token function">GetTranslator</span><span class="token punctuation">(</span>zh<span class="token punctuation">.</span><span class="token function">Locale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> found <span class="token punctuation">{</span>
      zh_trans<span class="token punctuation">.</span><span class="token function">RegisterDefaultTranslations</span><span class="token punctuation">(</span>validate<span class="token punctuation">,</span> trans<span class="token punctuation">)</span> <span class="token comment">//注册默认翻译器</span>
   <span class="token punctuation">}</span>
   err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>User<span class="token punctuation">{</span>
      Name<span class="token punctuation">:</span>    <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>     <span class="token number">0</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span>validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map[User.Address:Address必须以文本&#39;市&#39;结尾 User.Age:Age必须大于或等于18 User.Name:Name必须包含文本&#39;jack&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以把每一个错误单独翻译</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fieldError <span class="token operator">:=</span> <span class="token keyword">range</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fieldError<span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Name必须包含文本&#39;jack&#39;
Age必须大于或等于18
Address必须以文本&#39;市&#39;结尾
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到返回值是一个map，可以看到基本的错误信息翻译已经做到了，但是还不足以纳入使用，我们需要接着来美化一下错误信息，以便更好的与客户或者前端进行对接。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>

   Name    <span class="token builtin">string</span> <span class="token string">\`validate:&quot;contains=jack&quot; label:&quot;姓名&quot;\`</span> <span class="token comment">//名字包含jack</span>
   Age     <span class="token builtin">int</span>    <span class="token string">\`validate:&quot;gte=18&quot; label:&quot;年龄&quot;\`</span>        <span class="token comment">//大于等于17岁</span>
   Address <span class="token builtin">string</span> <span class="token string">\`validate:&quot;endswith=市&quot; label:&quot;地址&quot;\`</span>    <span class="token comment">//以市结尾</span>
   Sex     <span class="token builtin">string</span> <span class="token string">\`validate:&quot;required&quot; label:&quot;性别&quot;\`</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先自定义Tag<code>label</code>，它的值就是字段的中文名，随后通过验证器注册一个<code>TagNameFunc</code>，它的作用是在获取字段名时或替换掉原名称。在<code>errors.go</code>文件中的<code>Filed() string</code>方法上的注释如下说道：&quot;带有标记名的字段名优先于字段的实际名称&quot;，所以后续在发生错误时，就可以使用自定义的中文名来替代英文单词。<code>TagNameFunc</code>如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 我们加上了一个自定义标签，这个标签用于给结构体字段做中文名，它会替代原本的字段名称</span>
<span class="token keyword">func</span> <span class="token function">CustomTagNameFunc</span><span class="token punctuation">(</span>field reflect<span class="token punctuation">.</span>StructField<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
   label <span class="token operator">:=</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> field<span class="token punctuation">.</span>Name
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> label
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后再注册</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>validate<span class="token punctuation">.</span><span class="token function">RegisterTagNameFunc</span><span class="token punctuation">(</span>CustomTagNameFunc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次执行输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>姓名必须包含文本&#39;jack&#39;
年龄必须大于或等于18
地址必须以文本&#39;市&#39;结尾
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这还不够，依旧不足以作为错误信息返回给前端，我们需要将信息格式化成json或者任何适合消息传输的格式，你可能会想到直接将map序列化成json，这是一种解决办法，不过你可能会得到如下结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;User.地址&quot;</span><span class="token operator">:</span><span class="token string">&quot;地址必须以文本&#39;市&#39;结尾&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;User.姓名&quot;</span><span class="token operator">:</span><span class="token string">&quot;姓名必须包含文本&#39;back&#39;&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;User.年龄&quot;</span><span class="token operator">:</span><span class="token string">&quot;年龄必须大于或等于18&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;User.性别&quot;</span><span class="token operator">:</span><span class="token string">&quot;性别为必填字段&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过将map的key值处理下得到如下结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;地址&quot;</span><span class="token operator">:</span><span class="token string">&quot;地址必须以文本&#39;市&#39;结尾&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;姓名&quot;</span><span class="token operator">:</span><span class="token string">&quot;姓名必须包含文本&#39;back&#39;&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;年龄&quot;</span><span class="token operator">:</span><span class="token string">&quot;年龄必须大于或等于18&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;性别&quot;</span><span class="token operator">:</span><span class="token string">&quot;性别为必填字段&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过并不建议将上面这种的信息返回给前端，我们可以处理成一个字符串作为信息返回</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>姓名必须包含文本&#39;back&#39;, 年龄必须大于或等于18, 地址必须以文本&#39;市&#39;结尾, 性别为必填字段, 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>完整代码</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
   <span class="token string">&quot;fmt&quot;</span>
   <span class="token string">&quot;github.com/go-playground/locales/zh&quot;</span>
   ut <span class="token string">&quot;github.com/go-playground/universal-translator&quot;</span>
   <span class="token string">&quot;github.com/go-playground/validator/v10&quot;</span>
   zh_trans <span class="token string">&quot;github.com/go-playground/validator/v10/translations/zh&quot;</span>
   <span class="token string">&quot;reflect&quot;</span>
   <span class="token string">&quot;strings&quot;</span>
   <span class="token string">&quot;testing&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Name    <span class="token builtin">string</span> <span class="token string">\`validate:&quot;contains=back&quot; label:&quot;姓名&quot;\`</span> <span class="token comment">//名字包含jack</span>
   Age     <span class="token builtin">int</span>    <span class="token string">\`validate:&quot;gte=18&quot; label:&quot;年龄&quot;\`</span>        <span class="token comment">//大于等于17岁</span>
   Address <span class="token builtin">string</span> <span class="token string">\`validate:&quot;endswith=市&quot; label:&quot;地址&quot;\`</span>    <span class="token comment">//以市结尾</span>
   Sex     <span class="token builtin">string</span> <span class="token string">\`validate:&quot;required&quot; label:&quot;性别&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
   uni      <span class="token operator">*</span>ut<span class="token punctuation">.</span>UniversalTranslator
   validate <span class="token operator">*</span>validator<span class="token punctuation">.</span>Validate
<span class="token punctuation">)</span>

<span class="token comment">// 我们加上了一个自定义标签，这个标签用于给结构体字段做中文名，它会替代原本的字段名称</span>
<span class="token keyword">func</span> <span class="token function">CustomTagNameFunc</span><span class="token punctuation">(</span>field reflect<span class="token punctuation">.</span>StructField<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
   label <span class="token operator">:=</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> field<span class="token punctuation">.</span>Name
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> label
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestTranslate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   zh <span class="token operator">:=</span> zh<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   uni <span class="token operator">=</span> ut<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>zh<span class="token punctuation">,</span> zh<span class="token punctuation">)</span>
   <span class="token comment">//这里的语言通常可以在http的请求头中的Accept-Language中获取对应的语言</span>
   trans<span class="token punctuation">,</span> found <span class="token operator">:=</span> uni<span class="token punctuation">.</span><span class="token function">GetTranslator</span><span class="token punctuation">(</span>zh<span class="token punctuation">.</span><span class="token function">Locale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> found <span class="token punctuation">{</span>
      zh_trans<span class="token punctuation">.</span><span class="token function">RegisterDefaultTranslations</span><span class="token punctuation">(</span>validate<span class="token punctuation">,</span> trans<span class="token punctuation">)</span> <span class="token comment">//注册默认翻译器</span>
   <span class="token punctuation">}</span>
   validate<span class="token punctuation">.</span><span class="token function">RegisterTagNameFunc</span><span class="token punctuation">(</span>CustomTagNameFunc<span class="token punctuation">)</span>
   err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>User<span class="token punctuation">{</span>
      Name<span class="token punctuation">:</span>    <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>     <span class="token number">0</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   translate <span class="token operator">:=</span> <span class="token function">errInfoFormat</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span>validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">)</span><span class="token punctuation">,</span> trans<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>translate<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">errInfoFormat</span><span class="token punctuation">(</span>errors validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">,</span> trans ut<span class="token punctuation">.</span>Translator<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
   builder <span class="token operator">:=</span> strings<span class="token punctuation">.</span>Builder<span class="token punctuation">{</span><span class="token punctuation">}</span>
   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token keyword">range</span> errors <span class="token punctuation">{</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">)</span>
      builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后的最后，如果觉得错误信息太冰冷，希望更人性化一点，可以重写指定tag的错误提示信息，这需要用到<code>RegisterTranslation</code>方法，同时也需要用到两个类型的函数，分别是<code>RegisterTranslationsFunc</code>负责注册对应Tag的翻译模板，另一个则是<code>TranslationFunc</code>，负责将模板处理得到最后的翻译内容。这里用<code>required</code>举个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">requiredOverrideRegister</span><span class="token punctuation">(</span>ut ut<span class="token punctuation">.</span>Translator<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token comment">//这个函数的作用是注册翻译模板</span>
	<span class="token keyword">return</span> ut<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{}是一个必须填写的字段&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// {}是占位符 true代表了是否重写已有的模板</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">requiredOverrideTranslation</span><span class="token punctuation">(</span>ut ut<span class="token punctuation">.</span>Translator<span class="token punctuation">,</span> fe validator<span class="token punctuation">.</span>FieldError<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">// 这个函数的作用是负责翻译内容</span>
	t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ut<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span> fe<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//参数可以有多个，取决于注册对应Tag的模板有多少个占位符</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后注册一下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>validate<span class="token punctuation">.</span><span class="token function">RegisterTranslation</span><span class="token punctuation">(</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span> trans<span class="token punctuation">,</span> requiredOverrideRegister<span class="token punctuation">,</span> requiredOverrideTranslation<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>姓名必须包含文本&#39;back&#39;, 年龄必须大于或等于18, 地址必须以文本&#39;市&#39;结尾, 性别是一个必须填写的字段, 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="语言文件" tabindex="-1"><a class="header-anchor" href="#语言文件" aria-hidden="true">#</a> 语言文件</h3>`,137),g=n("code",null,"universal-translator",-1),b=n("code",null,"JSON ",-1),h={href:"https://github.com/go-playground/universal-translator/tree/master/_examples/full-with-files",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestFilei18n</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   validate <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   zh <span class="token operator">:=</span> zh<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   universalTranslator <span class="token operator">:=</span> ut<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>zh<span class="token punctuation">,</span> zh<span class="token punctuation">)</span>
   translator<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> universalTranslator<span class="token punctuation">.</span><span class="token function">GetTranslator</span><span class="token punctuation">(</span>zh<span class="token punctuation">.</span><span class="token function">Locale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   zh_trans<span class="token punctuation">.</span><span class="token function">RegisterDefaultTranslations</span><span class="token punctuation">(</span>validate<span class="token punctuation">,</span> translator<span class="token punctuation">)</span>
   er <span class="token operator">:=</span> universalTranslator<span class="token punctuation">.</span><span class="token function">Import</span><span class="token punctuation">(</span>ut<span class="token punctuation">.</span>FormatJSON<span class="token punctuation">,</span> <span class="token string">&quot;./zh.json&quot;</span><span class="token punctuation">)</span> <span class="token comment">//建议要在注册之后导入，这样才能覆盖原有的Tag</span>
   <span class="token keyword">if</span> er <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>er<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">type</span> Gopher <span class="token keyword">struct</span> <span class="token punctuation">{</span>
      Language <span class="token builtin">string</span> <span class="token string">\`validate:&quot;required&quot;\`</span>
   <span class="token punctuation">}</span>

   err <span class="token operator">:=</span> validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>Gopher<span class="token punctuation">{</span>
      <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token punctuation">(</span>validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>translator<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSON文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;locale&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;trans&quot;</span><span class="token operator">:</span> <span class="token string">&quot;这是一个十分重要的字段{0}，你必须填写它&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;override&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map[Gopher.Language:这是一个十分重要的字段Language，你必须填写它]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>universal-translator</code>在使用时有很多坑，如果是想要覆盖原有的<code>Tag</code>的话，<code>type</code>与<code>rule</code>都可以不填，因为原有的配置中也没有填，最好保持一致。填了什么<code>type</code>，就会将配置加到对应的map中，如果是<code>Cardinal</code>或者其他的<code>type</code>且<code>rule</code>配置了<code>one</code>之类的，那么就需要本地做相应的配置才能正常使用，否则将会报错。</p></div>`,6);function q(y,x){const a=i("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[s("官方地址："),n("a",u,[s("go-playground/validator: 💯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving (github.com)"),t(a)])]),n("p",null,[s("文档地址："),n("a",r,[s("validator/README.md at master · go-playground/validator (github.com)"),t(a)])]),n("p",null,[s("官方示例："),n("a",k,[s("validator/_examples at master · go-playground/validator (github.com)"),t(a)])]),n("p",null,[s("基准测试："),n("a",v,[s("go-playground/validator: 💯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving (github.com)"),t(a)])]),m,n("p",null,[s("事实上一个个写代码注册非常的繁琐，"),g,s("提供了通过编写"),b,s("配置文件的方式来进行翻译："),n("a",h,[s("universal-translator/examples/full-with-files at master · go-playground/universal-translator (github.com)"),t(a)])]),f])}const _=o(l,[["render",q],["__file","Validator.html.vue"]]);export{_ as default};
