import{_ as n,V as s,W as a,$ as t}from"./framework-8edddef6.js";const p={},e=t(`<h1 id="nacos集群同步" tabindex="-1"><a class="header-anchor" href="#nacos集群同步" aria-hidden="true">#</a> nacos集群同步</h1><h2 id="一致性协议" tabindex="-1"><a class="header-anchor" href="#一致性协议" aria-hidden="true">#</a> 一致性协议</h2><h3 id="为什么-nacos-需要一致性协议" tabindex="-1"><a class="header-anchor" href="#为什么-nacos-需要一致性协议" aria-hidden="true">#</a> 为什么 Nacos 需要一致性协议</h3><p>Nacos 在开源支持就定下了一个目标，尽可能的减少用户部署以及运维成本，做到用户只需要一个程序包，就可以快速以单机模式启动 Nacos 或者以集群模式启动 Nacos。</p><p>而 Nacos 是一个需要存储数据的一个组件，因此，为了实现这个目标，就需要在 Nacos 内部实现数据存储。单机下其实问题不大，简单的内嵌关系型数据库即可;但是集群模式下，就需要考虑如何保障各个节点之间 的数据一致性以及数据同步，而要解决这个问题，就不得不引入共识算法，通过算法来保障各个节点之间的数据的一致性。</p><h3 id="为什么-nacos-选择了-raft-以及-distro" tabindex="-1"><a class="header-anchor" href="#为什么-nacos-选择了-raft-以及-distro" aria-hidden="true">#</a> 为什么 Nacos 选择了 Raft 以及 Distro</h3><p>为什么 Nacos 会在单个集群中同时运行 CP 协议以及 AP 协议呢?这其实要从 Nacos 的场景出发的:Nacos 是一个集服务注册发现以及配置管理于一体的组件，因此对于集群下，各个节点之间 的数据一致性保障问题，需要拆分成两个方面：</p><ul><li><p>从服务注册发现来看</p><ul><li><p>服务发现注册中心，在当前微服务体系下，是十分重要的组件，服务之间感知对方服务的当前可正常提供服务的实例信息，必须从服务发现注册中心进行获取，因此对于服务注册发现中心组件的可用性，提出了很高的要求，需要在任何场景下，尽最大可能保证服务注册发现能力可以对外提供服务;同时 Nacos 的服务注册发现设计，采取了心跳可自动完成服务数据补偿的机制。如果数据丢失的话，是可以通过该机制快速弥补数据丢失。</p><p>因此，为了满足服务发现注册中心的可用性，强一致性的共识算法这里就不太合适了，因为强一致性共识算法能否对外提供服务是有要求的，如果当前集群可用的节点数没有过半的话，整个算法直接“罢工”，而最终一致共识算法的话，更多保障服务的可用性，并且能够保证在一定的时间内各个节点之间的数据能够达成一致。</p><p>上述的都是针对于 Nacos 服务发现注册中的<strong>非持久化</strong>服务而言(即需要客户端上报心跳进行服务实 例续约)。</p><p>而对于 Nacos 服务发现注册中的持久化服务，因为所有的数据都是直接使用调用 Nacos 服务端直接创建，因此需要由 Nacos 保障数据在各个节点之间的强一致性，故而针对此类型的服务数据，选择了强一致性共识算法来保障数据的一致性。</p></li></ul></li><li><p>从配置管理来看</p><ul><li>配置数据，是直接在 Nacos 服务端进行创建并进行管理的，必须保证大部分的节点都保存了此配置数据才能认为配置被成功保存了，否则就会丢失配置的变更，如果出现这种情况，问题是很严重的，如果是发布重要配置变更出现了丢失变更动作的情况，那多半就要引起严重的现网故障了，因此对于配置数据的管理，是必须要求集群中大部分的节点是强一致的，而这里的话只能使用强一致性共识算法。</li></ul></li></ul><h2 id="distro设计思想" tabindex="-1"><a class="header-anchor" href="#distro设计思想" aria-hidden="true">#</a> Distro设计思想</h2><ul><li>Nacos 每个节点是平等的都可以处理写请求，同时把新数据同步到其他节点。</li><li>每个节点只负责部分数据，定时发送自己负责数据的校验值到其他节点来保持数据一致性。</li><li>每个节点独立处理读请求，及时从本地发出响应。</li></ul><h3 id="数据初始化" tabindex="-1"><a class="header-anchor" href="#数据初始化" aria-hidden="true">#</a> 数据初始化</h3><p>新加入的 Distro 节点会进行全量数据拉取。具体操作是轮询所有的 Distro 节点，通过向其他的机器发送请求拉取全量数据。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/28/hRpXZd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在全量拉取操作完成之后，Nacos 的每台机器上都维护了当前的所有注册上来的非持久化实例数据。</p><h3 id="数据校验" tabindex="-1"><a class="header-anchor" href="#数据校验" aria-hidden="true">#</a> 数据校验</h3><p>在 Distro 集群启动之后，各台机器之间会定期的发送心跳。心跳信息主要为各个机器上的所有数据的元信息(之所以使用元信息，是因为需要保证网络中数据传输的量级维持在一个较低水平)。这 种数据校验会以心跳的形式进行，即每台机器在固定时间间隔会向其他机器发起一次数据校验请求。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/28/Ed1B3P.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一旦在数据校验过程中，某台机器发现其他机器上的数据与本地数据不一致，则会发起一次全量拉 取请求，将数据补齐。</p><h3 id="写操作" tabindex="-1"><a class="header-anchor" href="#写操作" aria-hidden="true">#</a> 写操作</h3><p>对于一个已经启动完成的 Distro 集群，在一次客户端发起写操作的流程中，当注册非持久化的实例 的写请求打到某台 Nacos 服务器时，Distro 集群处理的流程图如下。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/28/NgUYrN.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>整个步骤包括几个部分(图中从上到下顺序):</p><ul><li>前置的 Filter 拦截请求，并根据请求中包含的 IP 和 port 信息计算其所属的 Distro 责任节点， 并将该请求转发到所属的 Distro 责任节点上。</li><li>责任节点上的 Controller 将写请求进行解析。</li><li>Distro 协议定期执行 Sync 任务，将本机所负责的所有的实例信息同步到其他节点上。</li></ul><h3 id="读操作" tabindex="-1"><a class="header-anchor" href="#读操作" aria-hidden="true">#</a> 读操作</h3><p>由于每台机器上都存放了全量数据，因此在每一次读操作中，Distro 机器会直接从本地拉取数据。 快速响应。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/28/6xzmbP.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种机制保证了 Distro 协议可以作为一种 AP 协议，对于读操作都进行及时的响应。在网络分区 的情况下，对于所有的读操作也能够正常返回;当网络恢复时，各个 Distro 节点会把各数据分片的 数据进行合并恢复。</p><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>Distro 协议是 Nacos 对于临时实例数据开发的一致性协议。其数据存储在缓存中，并且会在启动时进行全量数据同步，并定期进行数据校验。</p><p>在 Distro 协议的设计思想下，每个 Distro 节点都可以接收到读写请求。所有的 Distro 协议的请 求场景主要分为三种情况:</p><ol><li><p>当该节点接收到属于该节点负责的实例的写请求时，直接写入。</p></li><li><p>当该节点接收到不属于该节点负责的实例的写请求时，将在集群内部路由，转发给对应的节点，从而完成读写。</p></li><li><p>当该节点接收到任何读请求时，都直接在本机查询并返回(因为所有实例都被同步到了每台机器上)。</p></li></ol><p>Distro 协议作为 Nacos 的内嵌临时实例一致性协议，保证了在分布式环境下每个节点上面的服务信息的状态都能够及时地通知其他节点，可以维持数十万量级服务实例的存储和一致性。</p><h2 id="distro集群同步" tabindex="-1"><a class="header-anchor" href="#distro集群同步" aria-hidden="true">#</a> Distro集群同步</h2><ul><li>2.x因为使用了长连接，只要ConnectionBasedClient.isNative=true，代表Client与这个节点直连，Client所在的节点就是责任节点，减少了写请求重定向其他节点的损耗。</li><li>责任节点的Client数据发生变更后，会同步这个Client的全量数据给其他非责任节点。非责任节点更新ClientManager中的Client信息。</li><li>为了避免非责任节点的isNative=false的Client数据不一致: <ul><li>责任节点每5s向非责任节点发送VERIFY数据，续租这些Client，包含了Client全量数据；</li><li>非责任节点定时扫描isNative=false的Client数据，如果超过30s没有续租，移除这些非native的client。</li></ul></li></ul><p>当一个客户端发布或注销服务，会在Client模型里存储发布Service对应的Instance信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClient</span> <span class="token keyword">implements</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">,</span> <span class="token class-name">InstancePublishInfo</span><span class="token punctuation">&gt;</span></span> publishers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addServiceInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">InstancePublishInfo</span> instancePublishInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> publishers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> instancePublishInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">MetricsMonitor</span><span class="token punctuation">.</span><span class="token function">incrementInstanceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientEvent<span class="token punctuation">.</span>ClientChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InstancePublishInfo</span> <span class="token function">removeServiceInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InstancePublishInfo</span> result <span class="token operator">=</span> publishers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientEvent<span class="token punctuation">.</span>ClientChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="责任节点" tabindex="-1"><a class="header-anchor" href="#责任节点" aria-hidden="true">#</a> 责任节点</h3><p>完成本地写入注册信息后，触发ClientChangedEvent事件，DistroClientDataProcessor只会处理当前节点负责的client。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DistroClientDataProcessor.java</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">syncToAllServer</span><span class="token punctuation">(</span><span class="token class-name">ClientEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Client</span> client <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Only ephemeral data sync by Distro, persist client should sync by raft.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> client <span class="token operator">||</span> <span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>clientManager<span class="token punctuation">.</span><span class="token function">isResponsibleClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientEvent<span class="token punctuation">.</span>ClientDisconnectEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 客户端断开连接</span>
        <span class="token class-name">DistroKey</span> distroKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroKey</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        distroProtocol<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ClientEvent<span class="token punctuation">.</span>ClientChangedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 客户端新增/修改</span>
        <span class="token class-name">DistroKey</span> distroKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroKey</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        distroProtocol<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span><span class="token constant">CHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DistroProtocol循环所有其他nacos节点，提交一个异步任务，这个异步任务会延迟1s（nacos.core.protocol.distro.data.sync_delay_ms）执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DistroProtocol.java</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token class-name">DistroKey</span> distroKey<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span> action<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Member</span> each <span class="token operator">:</span> memberManager<span class="token punctuation">.</span><span class="token function">allMembersWithoutSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">syncToTarget</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">,</span> action<span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncToTarget</span><span class="token punctuation">(</span><span class="token class-name">DistroKey</span> distroKey<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span> action<span class="token punctuation">,</span> <span class="token class-name">String</span> targetServer<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DistroKey</span> distroKeyWithTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroKey</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">.</span><span class="token function">getResourceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> distroKey<span class="token punctuation">.</span><span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            targetServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DistroDelayTask</span> distroDelayTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroDelayTask</span><span class="token punctuation">(</span>distroKeyWithTarget<span class="token punctuation">,</span> action<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    distroTaskEngineHolder<span class="token punctuation">.</span><span class="token function">getDelayTaskExecuteEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>distroKeyWithTarget<span class="token punctuation">,</span> distroDelayTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于DELETE操作，由DistroSyncDeleteTask处理；</p><p>对于CHANGE操作，由DistroSyncChangeTask处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistroSyncChangeTask</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDistroExecuteTask</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DataOperation</span> <span class="token constant">OPERATION</span> <span class="token operator">=</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span><span class="token constant">CHANGE</span><span class="token punctuation">;</span>
    <span class="token comment">// 无callback</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DistroData</span> distroData <span class="token operator">=</span> <span class="token function">getDistroData</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> distroData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">getDistroComponentHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findTransportAgent</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">syncData</span><span class="token punctuation">(</span>distroData<span class="token punctuation">,</span> <span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 有callback</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doExecuteWithCallback</span><span class="token punctuation">(</span><span class="token class-name">DistroCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DistroData</span> distroData <span class="token operator">=</span> <span class="token function">getDistroData</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getDistroComponentHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findTransportAgent</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">syncData</span><span class="token punctuation">(</span>distroData<span class="token punctuation">,</span> <span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从DistroClientDataProcessor获取DistroData</span>
    <span class="token keyword">private</span> <span class="token class-name">DistroData</span> <span class="token function">getDistroData</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DistroData</span> result <span class="token operator">=</span> <span class="token function">getDistroComponentHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findDataStorage</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDistroData</span><span class="token punctuation">(</span><span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token constant">OPERATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从DistroClientDataProcessor获取DistroData，是从ClientManager实时获取Client。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DistroClientDataProcessor</span>
<span class="token keyword">public</span> <span class="token class-name">DistroData</span> <span class="token function">getDistroData</span><span class="token punctuation">(</span><span class="token class-name">DistroKey</span> distroKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Client</span> client <span class="token operator">=</span> clientManager<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">.</span><span class="token function">getResourceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">ApplicationUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Serializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">generateSyncData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DistroData</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AbstractClient给DistroClientDataProcessor提供Client的注册的所有信息，包括客户端注册了哪些namespace，哪些group，哪些service，哪些instance。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// AbstractClient</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">,</span> <span class="token class-name">InstancePublishInfo</span><span class="token punctuation">&gt;</span></span> publishers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">ClientSyncData</span> <span class="token function">generateSyncData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> namespaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> groupNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> serviceNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstancePublishInfo</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">,</span> <span class="token class-name">InstancePublishInfo</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> publishers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        namespaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        groupNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serviceNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        instances<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClientSyncData</span><span class="token punctuation">(</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> namespaces<span class="token punctuation">,</span> groupNames<span class="token punctuation">,</span> serviceNames<span class="token punctuation">,</span> instances<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终DistroClientTransportAgent封装为DistroDataRequest调用其他Nacos节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DistroClientTransportAgent</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncData</span><span class="token punctuation">(</span><span class="token class-name">DistroData</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> targetServer<span class="token punctuation">,</span> <span class="token class-name">DistroCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNoExistTarget</span><span class="token punctuation">(</span>targetServer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">DistroDataRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroDataRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Member</span> member <span class="token operator">=</span> memberManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>targetServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        clusterRpcClientProxy<span class="token punctuation">.</span><span class="token function">asyncRequest</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DistroRpcCallbackWrapper</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> nacosException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">onFailed</span><span class="token punctuation">(</span>nacosException<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非责任节点" tabindex="-1"><a class="header-anchor" href="#非责任节点" aria-hidden="true">#</a> 非责任节点</h3><p>非责任节点处理责任节点同步过来的Client数据。</p><p>DistroClientDataProcessor处理责任节点同步过来的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DistroClientDataProcessor</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token class-name">DistroData</span> distroData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>distroData<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ADD</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">CHANGE</span><span class="token operator">:</span>
      <span class="token class-name">ClientSyncData</span> clientSyncData <span class="token operator">=</span> <span class="token class-name">ApplicationUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Serializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>distroData<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ClientSyncData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">handlerClientSyncData</span><span class="token punctuation">(</span>clientSyncData<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">DELETE</span><span class="token operator">:</span>
      <span class="token class-name">String</span> deleteClientId <span class="token operator">=</span> distroData<span class="token punctuation">.</span><span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      clientManager<span class="token punctuation">.</span><span class="token function">clientDisconnected</span><span class="token punctuation">(</span>deleteClientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlerClientSyncData</span><span class="token punctuation">(</span><span class="token class-name">ClientSyncData</span> clientSyncData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 保存ConnectionBasedClient，这类ConnectionBasedClient的isNative=false</span>
  clientManager<span class="token punctuation">.</span><span class="token function">syncClientConnected</span><span class="token punctuation">(</span>clientSyncData<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientSyncData<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Client</span> client <span class="token operator">=</span> clientManager<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>clientSyncData<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 更新Client信息</span>
  <span class="token function">upgradeClient</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> clientSyncData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里Client的实现类仍然是ConnectionBasedClient，只不过它的isNative属性为false，这是非责任节点与责任节点的主要区别。</p><p>DistroClientDataProcessor的upgradeClient方法，更新Client里的注册表信息，发布对应事件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>va<span class="token comment">// DistroClientDataProcessor</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">upgradeClient</span><span class="token punctuation">(</span><span class="token class-name">Client</span> client<span class="token punctuation">,</span> <span class="token class-name">ClientSyncData</span> clientSyncData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> namespaces <span class="token operator">=</span> clientSyncData<span class="token punctuation">.</span><span class="token function">getNamespaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> groupNames <span class="token operator">=</span> clientSyncData<span class="token punctuation">.</span><span class="token function">getGroupNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> serviceNames <span class="token operator">=</span> clientSyncData<span class="token punctuation">.</span><span class="token function">getServiceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstancePublishInfo</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> clientSyncData<span class="token punctuation">.</span><span class="token function">getInstancePublishInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span></span> syncedService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> namespaces<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">newService</span><span class="token punctuation">(</span>namespaces<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> groupNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> serviceNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Service</span> singleton <span class="token operator">=</span> <span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
        syncedService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InstancePublishInfo</span> instancePublishInfo <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instancePublishInfo<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getInstancePublishInfo</span><span class="token punctuation">(</span>singleton<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            client<span class="token punctuation">.</span><span class="token function">addServiceInstance</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> instancePublishInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientRegisterServiceEvent</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Service</span> each <span class="token operator">:</span> client<span class="token punctuation">.</span><span class="token function">getAllPublishedService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>syncedService<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            client<span class="token punctuation">.</span><span class="token function">removeServiceInstance</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientDeregisterServiceEvent</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="distrofilter" tabindex="-1"><a class="header-anchor" href="#distrofilter" aria-hidden="true">#</a> DistroFilter?</h3><p>1.x版本，所有客户端的写请求都会经过DistroFilter。</p><p><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/02/28/YFs6c3.png" alt="Nacos源码（九）2.0注册中心" loading="lazy">DistroFilter.png</p><p>如果hash(服务名)%nacos节点列表大小==当前节点所处下标，则当前节点是责任节点，处理客户端写请求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DistroMapper</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">responsible</span><span class="token punctuation">(</span><span class="token class-name">String</span> responsibleTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> servers <span class="token operator">=</span> healthyList<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>switchDomain<span class="token punctuation">.</span><span class="token function">isDistroEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">EnvUtil</span><span class="token punctuation">.</span><span class="token function">getStandaloneMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> servers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">EnvUtil</span><span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> servers<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">EnvUtil</span><span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token function">distroHash</span><span class="token punctuation">(</span>responsibleTag<span class="token punctuation">)</span> <span class="token operator">%</span> servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target <span class="token operator">&gt;=</span> index <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> lastIndex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>否则，1.x中需要将客户端请求交由责任节点处理，责任节点处理后，由当前节点返回客户端。</p><p>而在2.x中，DistroFilter对于客户端就没用了，因为客户端与服务端会建立长连接，当前nacos节点是否是责任节点，取决于Client身上的isNative属性。如果是客户端直接注册在这个nacos节点上的ConnectionBasedClient，它的isNative属性为true；如果是由Distro协议，同步到这个nacos节点上的ConnectionBasedClient，它的isNative属性为false。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionBasedClient</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClient</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> means this client is directly connect to current server. <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> means this client is synced
     * from other server.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isNative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上，2.x减少了1.x当中写请求转发的步骤，通过长连接建立在哪个节点上，哪个节点就是责任节点，客户端也只会向这个责任节点发送请求。</p><h3 id="verify" tabindex="-1"><a class="header-anchor" href="#verify" aria-hidden="true">#</a> Verify</h3><p>Distro为了确保集群间数据一致，不仅仅依赖于数据发生改变时的实时同步，后台有定时任务做数据同步。</p><p>在1.x版本中，责任节点每5s同步所有Service的Instance列表的摘要（md5）给非责任节点。</p><p>非责任节点用对端传来的服务md5比对本地服务的md5，如果发生改变，需要反查责任节点。</p><p>在2.x版本中，对这个流程做了改造，责任节点会发送Client全量数据，非责任节点定时检测同步过来的Client是否过期，减少1.x版本中的反查。</p><ul><li>责任节点每5s向其他节点发送DataOperation=VERIFY类型的DistroData，来维持非责任节点的Client数据不过期。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistroVerifyTimedTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 1. 所有其他节点</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Member</span><span class="token punctuation">&gt;</span></span> targetServer <span class="token operator">=</span> serverMemberManager<span class="token punctuation">.</span><span class="token function">allMembersWithoutSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> each <span class="token operator">:</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">getDataStorageTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 2. 向这些节点发送Client.isNative=true的DistroData，type = VERIFY</span>
                <span class="token function">verifyForDataStorage</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> targetServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-FAILED] verify task failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非责任节点每5s扫描isNative=false的client，如果client30s内没有被VERIFY的DistroData更新过续租时间，会删除这个同步过来的Client数据。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExpiredClientCleaner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionBasedClientManager</span> clientManager<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> each <span class="token operator">:</span> clientManager<span class="token punctuation">.</span><span class="token function">allClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConnectionBasedClient</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConnectionBasedClient</span><span class="token punctuation">)</span> clientManager<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> client <span class="token operator">&amp;&amp;</span> <span class="token function">isExpireClient</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                clientManager<span class="token punctuation">.</span><span class="token function">clientDisconnected</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isExpireClient</span><span class="token punctuation">(</span><span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> <span class="token class-name">ConnectionBasedClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同步client 且 30s内没有续租 认为过期</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">isNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> currentTime <span class="token operator">-</span> client<span class="token punctuation">.</span><span class="token function">getLastRenewTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_IP_DELETE_TIMEOUT</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","clusterSync.html.vue"]]);export{k as default};
