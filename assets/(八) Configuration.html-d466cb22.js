import{_ as i,V as l,W as e,$ as t}from"./framework-8edddef6.js";const n={},a=t('<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><blockquote><p>Configuration 是整个MyBatis的配置体系集中管理中心，前面所学Executor、StatementHandler、Cache、MappedStatement...等绝大部分组件都是由它直接或间接的创建和管理。此外影响这些组件行为的属性配置也是由它进行保存和维护。如cacheEnabled、lazyLoadingEnabled ... 等。</p></blockquote><p><strong>核心作用总结</strong></p><p>总结一下Configuration主要作用如下：</p><ul><li><p>存储全局配置信息，其来源于settings（设置）</p></li><li><p>初始化并维护全局基础组件</p><ul><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>plugins（插件）</li><li>environments（环境配置）</li><li>cache(二级缓存空间)</li><li>properties(常用到配置属性文件)</li><li>mappers(sql映射文件配置分为四种 package、url、resources、class)</li></ul></li><li><p>初始化并维护MappedStatement</p></li><li><p>组件构造器,并基于插件进行增强</p><ul><li>newExecutor（执行器）</li><li>newStatementHandler（JDBC处理器）</li><li>newResultSetHandler（结果集处理器）</li><li>newParameterHandler（参数处理器）</li></ul><p><strong>配置来源</strong></p><p>Configuration 配置来源有三项：</p><ol><li>Mybatis-config.xml 启动文件，全局配置、全局组件都是来源于此。</li><li>Mapper.xml SQL映射(MappedStatement) 结果集映射(ResultMapper)都来源于此。</li><li>@Annotation SQL映射与结果集映射的另一种表达形式。</li></ol><figure><img src="https://minio.pigx.vip/oss/2022/09/xbEF5I.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p><strong>配置元素</strong></p><p>Configuration 配置信息来源于xml和注解，每个文件和注解都是由若干个配置元素组成，并呈现嵌套关系，总体关系如下图所示：</p><figure><img src="https://minio.pigx.vip/oss/2022/09/oOb5dR.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>元素承载</strong></p><p>无论是xml 还是注解这些配置元素都要被转换成JAVA配置属性或对象组件来承载。其对应关系如下：</p><ol><li>全配置(config.xml) 由Configuration对像属性承载</li><li>sql映射&lt;select|insert...&gt; 或@Select 等由MappedStatement对象承载</li><li>缓存&lt;cache..&gt; 或@CacheNamespace 由Cache对象承载</li><li>结果集映射 由ResultMap 对象承载</li></ol><figure><img src="https://minio.pigx.vip/oss/2022/09/2Km5Cb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>配置文件解析</strong></p><p>配置文件解析需要我们分开讨论，首先来分析XML解析过程。xml配置解析其底层使用dom4j先解析成一棵节点树，然后根据不同的节点类型与去匹配不同的解析器。最终解析成特定组件。mapper的解析，四种解析package和class对应注解的解析、resource和url对应xml解析</p><p>解析器的基类是BaseBuilder 其内部包含全局的configuration 对象，这么做的用意是所有要解析的组件最后都要集中归属至configuration。接下来了解一下每个解析器的作用：</p><ul><li>XMLConfigBuilder :解析config.xml文件，会直接创建一个configuration对象，用于解析全局配置 。</li><li>XMLMapperBuilder ：解析Mapper.xml文件，内容包含等</li><li>MapperBuilderAssistant：Mapper.xml解析辅助，在一个Mapper.xml中Cache是对Statement（sql声明）共享的，共享组件的分配即由该解析实现。</li><li>XMLStatementBuilder：SQL映射解析 即&lt;select|update|insert|delete&gt; 元素解析成MapperStatement。</li><li>SqlSourceBuilder：Sql数据源解析,将声明的SQL解析可执行的SQL。</li><li>XMLScriptBuilder：解析动态SQL数据源当中所设置 SqlNode脚本集。</li></ul><figure><img src="https://minio.pigx.vip/oss/2022/09/IgHWA2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>XML文件解析流程</strong></p><p>整体解析流程是从XmlConfigBuilder 开始，然后逐步向内解析，直到解析完所有节点。我们通过一个MappedStatement 解析过程即可了解到期整体解析流程。在解析注解的时候，也会触发xml的解析，他们是双向的触发。所以要注意xml和接口名称要一样，并且注意路径，可能在maven打包的时候，xml会无法打进去。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/N04w9P.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>流程说明：</strong></p><ol><li>【XmlConfigBuilder】 接收一个config.xml 输入流，然后创建一个空Configuration对象</li><li>【XmlConfigBuilder】解析全局配置</li><li>【XmlConfigBuilder】mapperElements解析，通过Resource或url 指定mapper.xml文件 <ol><li>【XmlMapperBuilder】解析缓存、结果集配置等公共配置</li><li>【XmlMapperBuilder】解析Sql映射&lt;select|insert|upate|delete&gt; <ol><li>【XMLScriptBuilder】解析生成SQL数据源，包括动态脚本</li></ol></li><li>【XmlMapperBuilder】构建Statement <ol><li>【MapperBuilderAssistant】设置缓存并添加至Configuration</li></ol></li></ol></li></ol><p><strong>注解配置解析</strong></p><p>注解解析底层实现是通过反射获取Mapper接口当中注解元素实现。有两种方式一种是直接指定接口名，一种是指定包名然后自动扫描包下所有的接口类。这些逻辑均由Mapper注册器(MapperRegistry)实现。其接收一个接口类参数，并基于该参数创建针对该接口的动态代理工厂，然后解析内部方法注解生成每个MapperStatement 最后添加至Configuration 完成解析。</p><figure><img src="https://minio.pigx.vip/oss/2022/09/V5qVoZ.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',25),p=[a];function o(r,g){return l(),e("div",null,p)}const u=i(n,[["render",o],["__file","(八) Configuration.html.vue"]]);export{u as default};
