import{_ as n,V as s,W as a,$ as t}from"./framework-8edddef6.js";const e={},p=t(`<h1 id="spring事务" tabindex="-1"><a class="header-anchor" href="#spring事务" aria-hidden="true">#</a> spring事务</h1><h2 id="关键类" tabindex="-1"><a class="header-anchor" href="#关键类" aria-hidden="true">#</a> 关键类</h2><h3 id="platformtransactionmanager" tabindex="-1"><a class="header-anchor" href="#platformtransactionmanager" aria-hidden="true">#</a> PlatformTransactionManager</h3><p>事务管理器，定义了实现事务的规范。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">{</span>
  
		<span class="token comment">// 开启事务</span>
    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span>
          <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
  
		<span class="token comment">// 提交事务</span>
    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
  
		<span class="token comment">// 回滚事务</span>
    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstractplatformtransactionmanager" tabindex="-1"><a class="header-anchor" href="#abstractplatformtransactionmanager" aria-hidden="true">#</a> AbstractPlatformTransactionManager</h3><ol><li>判断当前是否已经存在一个事务</li><li>应用合适的事务传播行为</li><li>在必要的时候挂起/恢复事务</li><li>提交时检查事务是否被标记成为<code>rollback-only</code></li><li>在回滚时做适当的修改（是执行真实的回滚/还是将事务标记成<code>rollback-only</code>）</li><li>触发注册的同步回调</li></ol><h3 id="transactiondefinition" tabindex="-1"><a class="header-anchor" href="#transactiondefinition" aria-hidden="true">#</a> TransactionDefinition</h3><p>对事务定义的抽象，这些定义有些是数据库层面本身就有的，例如<code>隔离级别、是否只读、超时时间、名称</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>
<span class="token comment">// 定义了7中事务的传播机制</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRED</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_SUPPORTS</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_MANDATORY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRES_NEW</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_NOT_SUPPORTED</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_NEVER</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">PROPAGATION_NESTED</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

<span class="token comment">// 4种隔离级别，-1代表的是使用数据库默认的隔离级别</span>
<span class="token comment">// 比如在MySQL下，使用的就是ISOLATION_REPEATABLE_READ（可重复读）</span>
<span class="token keyword">int</span> <span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_UNCOMMITTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_COMMITTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token constant">ISOLATION_REPEATABLE_READ</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token constant">ISOLATION_SERIALIZABLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  

<span class="token comment">// 事务的超时时间，默认不限制时间</span>
<span class="token keyword">int</span> <span class="token constant">TIMEOUT_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 提供了对上面三个属性的get方法</span>
<span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 事务是否是只读的，默认不是</span>
<span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 事务的名称</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回一个只读的TransactionDefinition</span>
<span class="token comment">// 只对属性提供了getter方法，所有属性都是接口中定义的默认值</span>
<span class="token keyword">static</span> <span class="token class-name">TransactionDefinition</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token class-name">StaticTransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTransactionDefinition</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX_PROPAGATION</span> <span class="token operator">=</span> <span class="token string">&quot;PROPAGATION_&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX_ISOLATION</span> <span class="token operator">=</span> <span class="token string">&quot;ISOLATION_&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX_TIMEOUT</span> <span class="token operator">=</span> <span class="token string">&quot;timeout_&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">READ_ONLY_MARKER</span> <span class="token operator">=</span> <span class="token string">&quot;readOnly&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Constants</span> constants <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constants</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> propagationBehavior <span class="token operator">=</span> <span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> isolationLevel <span class="token operator">=</span> <span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionAttribute</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 返回与此事务属性关联的限定符值。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这可用于选择相应的事务管理器
     * 处理此特定交易。
     * <span class="token keyword">@since</span> 3.0
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token class-name">String</span> <span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 返回与此交易属性关联的标签。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这可用于应用特定的事务行为
     * 或遵循纯粹的描述性。
     * <span class="token keyword">@since</span> 5.3
     */</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLabels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 我们是否应该回滚给定的异常？
     * <span class="token keyword">@param</span> <span class="token parameter">ex</span> the exception to evaluate
     * <span class="token keyword">@return</span> whether to perform a rollback or not
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultTransactionAttribute</span><span class="token operator">:</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 默认只会滚RuntimeException和Error类型</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span> <span class="token operator">||</span> ex <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RuleBasedTransactionAttribute</span><span class="token operator">:</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RollbackRuleAttribute</span> winner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> deepest <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollbackRules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 规则是啥看这里 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SpringTransactionAnnotationParser</span><span class="token punctuation">#</span><span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RollbackRuleAttribute</span> rule <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rollbackRules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * depth = -1 表示没匹配到
             * */</span>
            <span class="token keyword">int</span> depth <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> depth <span class="token operator">&lt;</span> deepest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                deepest <span class="token operator">=</span> depth<span class="token punctuation">;</span>
                <span class="token comment">// 记录匹配的规则</span>
                winner <span class="token operator">=</span> rule<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// User superclass behavior (rollback on unchecked) if no rule matches.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>winner <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 使用父类匹配规则 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *  很简单 \`return (ex instanceof RuntimeException || ex instanceof Error);\`
         * */</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不是 NoRollbackRuleAttribute 就回滚</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>winner <span class="token keyword">instanceof</span> <span class="token class-name">NoRollbackRuleAttribute</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionstatus" tabindex="-1"><a class="header-anchor" href="#transactionstatus" aria-hidden="true">#</a> TransactionStatus</h3><p>描述创建后的事务的状态</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/02/SAwBDa.tif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionExecution</span><span class="token punctuation">,</span> <span class="token class-name">SavepointManager</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">{</span>

    <span class="token comment">// 于判断当前事务是否设置了保存点</span>
    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   	<span class="token comment">// 复写了父接口Flushable中的方法</span>
		<span class="token comment">// 主要用于刷新会话</span>
		<span class="token comment">// 对于Hibernate/jpa而言就是调用了其session/entityManager的flush方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断当前事务是否是一个新的事务</span>
<span class="token comment">// 不是一个新事务的话，那么需要加入到已经存在的事务中</span>
<span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 事务是否被标记成RollbackOnly</span>
<span class="token comment">// 如果被标记成了RollbackOnly，意味着事务只能被回滚</span>
<span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 是否事务完成，回滚或提交都意味着事务完成了</span>
<span class="token keyword">boolean</span> <span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建保存点</span>
<span class="token class-name">Object</span> <span class="token function">createSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>

<span class="token comment">// 回滚到指定保存点</span>
<span class="token keyword">void</span> <span class="token function">rollbackToSavepoint</span><span class="token punctuation">(</span><span class="token class-name">Object</span> savepoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>

<span class="token comment">// 移除回滚点</span>
<span class="token keyword">void</span> <span class="token function">releaseSavepoint</span><span class="token punctuation">(</span><span class="token class-name">Object</span> savepoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionsynchronizationmanager" tabindex="-1"><a class="header-anchor" href="#transactionsynchronizationmanager" aria-hidden="true">#</a> TransactionSynchronizationManager</h3><p>管理资源同步和行为同步。</p><p>资源同步：数据库连接就是跟这个事务同步的一个资源。</p><p>行为同步：在事务开启之前我们需要先获取一个数据库连接，同样的在事务提交时我们需要将连接关闭（不一定是真正的关闭，如果是连接池只是归还到连接池中），这个时候关闭连接这个行为也需要跟事务进行同步。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TransactionSynchronizationManager</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 事务资源，就是当前事物内涉及到的所有资源（数据库连接）
     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p?</span><span class="token punctuation">&gt;</span></span>
     * 比如数据库连接：
     *      Key：DataSource 对象
     *      Value：ConnectionHolder
     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     * 什么时候会设置值：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     *      1. 开启新事务时，会通过 DataSource 获取连接，并将连接存到这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     *      2. 执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">#</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 获取连接，使用 DataSource 做为key从 resources中找不到连接，
     *          就会使用 DataSource获取连接，存到 synchronizations 和 这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     *      注：前提是在事务内执行。简单来说就是Java虚拟机栈中存在@Transactional的方法(就是有<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">#</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>)
     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     * 什么时候移除key对应属性值：
     *      - 暂停当前事务
     *      - 完成当前事务(rollback或者commit)
     *      Tips：<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token function">doUnbindResource</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resources <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Transactional resources&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 事务同步资源，就是在事务中产生的 非事务管理器数据源生成的连接或者是用于在事务完成时(rollback或者commit)要触发事件，都算是事务同步资源
     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     * 比如：
     *      - ConnectionSynchronization
     *          使用工具类获取连接会设置 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">#</span><span class="token function">doGetConnection</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *          这种连接和事务连接不一样，是直接通过数据源获取的连接，不会配置自动提交、超时时间、隔离级别，默认是啥就是啥，
     *          唯一的作用就是在事务完成时(rollback或者commit) 释放掉这些连接
     *          比如：获取连接用的数据源(d1)和事务管理的数据源(d2)不是同一个时，就会将d1创建的连接装饰成 ConnectionSynchronization，
     *              并将该对象存到 synchronizations 属性中，然后对应的连接也会存到注册到 resources 中
     *
     *      - TransactionalApplicationListenerSynchronization
     *          发布事务事件时会设置 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionalApplicationListenerMethodAdapter</span><span class="token punctuation">#</span><span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *          作用就是在事务完成时(rollback或者commit) 回调其 TransactionalApplicationListener、SynchronizationCallback
     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     * 什么时候会设置值：简单来说就是Java虚拟机栈中存在@Transactional的方法(就是有<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">#</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>)
     *      具体一点就是执行完 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAttribute</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      该属性就会被初始化，在使用过程中会根据 \`synchronizations.get() != null \` 来判断是激活了事务同步 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     * 什么时候清空该属性值：
     *      1. 暂停当前事务
     *      2. 完成当前事务(rollback或者commit)
     *      Tips：<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> synchronizations <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Transaction synchronizations&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> currentTransactionName <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Current transaction name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> currentTransactionReadOnly <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Current transaction read-only status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> currentTransactionIsolationLevel <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Current transaction isolation level&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 实际激活的事务。
     *  - 当前线程的事务不是空事务 就是 true
     *  - 空事务 或者 执行非事务方法就是 false
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> actualTransactionActive <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Actual transaction active&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionsynchronization" tabindex="-1"><a class="header-anchor" href="#transactionsynchronization" aria-hidden="true">#</a> TransactionSynchronization</h3><p>行为的同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionSynchronization</span> <span class="token keyword">extends</span> <span class="token class-name">Flushable</span> <span class="token punctuation">{</span>
	<span class="token comment">// 事务完成的状态</span>
    <span class="token comment">// 0 提交</span>
    <span class="token comment">// 1 回滚</span>
    <span class="token comment">// 2 异常状态，例如在事务执行时出现异常，然后回滚，回滚时又出现异常</span>
    <span class="token comment">// 就会被标记成状态2</span>
	<span class="token keyword">int</span> <span class="token constant">STATUS_COMMITTED</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token constant">STATUS_ROLLED_BACK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token constant">STATUS_UNKNOWN</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token comment">// 我们绑定的这些TransactionSynchronization需要跟事务同步</span>
    <span class="token comment">// 1.如果事务挂起，我们需要将其挂起</span>
    <span class="token comment">// 2.如果事务恢复，我们需要将其恢复</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	
  <span class="token comment">// 在事务执行过程中，提供的一些回调方法</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> readOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enabletransactionmanagement" tabindex="-1"><a class="header-anchor" href="#enabletransactionmanagement" aria-hidden="true">#</a> @EnableTransactionManagement</h2><p>@EnableTransactionManagement注解用于启用Spring的事务管理功能。</p><ol><li><p><strong>@EnableTransactionManagement：</strong></p><ul><li>使用<code>@EnableTransactionManagement</code>会导入<code>@Import(TransactionManagementConfigurationSelector.class)</code>。</li><li>解析配置类时，因为<code>TransactionManagementConfigurationSelector</code>的父类<code>AdviceModeImportSelector</code>实现了<code>ImportSelector</code>，所以会回调<code>AdviceModeImportSelector#selectImports(AnnotationMetadata)</code>方法。</li><li>在这个回调方法中，获取<code>@EnableTransactionManagement(mode = AdviceMode.PROXY)</code>注解的mode属性值，回调子类方法<code>TransactionManagementConfigurationSelector#selectImports(AdviceMode)</code>。</li></ul></li><li><p><strong>TransactionManagementConfigurationSelector的工作流程：</strong></p><ul><li><code>TransactionManagementConfigurationSelector#selectImports(AdviceMode)</code>方法返回两个类：<code>AutoProxyRegistrar</code>和<code>ProxyTransactionManagementConfiguration</code>，将它们添加到BeanDefinitionMap中。</li></ul></li><li><p><strong>AutoProxyRegistrar：</strong></p><ul><li>继承<code>ImportBeanDefinitionRegistrar</code>，所以解析<code>@Import</code>时会回调<code>AutoProxyRegistrar#registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)</code>方法。</li><li>该方法会执行<code>AopConfigUtils#registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry)</code>，注册<code>InfrastructureAdvisorAutoProxyCreator</code>到容器中。</li><li><code>InfrastructureAdvisorAutoProxyCreator</code>是BeanPostProcessor，在实例化前、提前AOP、初始后判断bean是否要进行代理。</li></ul></li><li><p><strong>ProxyTransactionManagementConfiguration：</strong></p><ul><li>继承<code>AbstractTransactionManagementConfiguration</code>。</li><li>通过@Bean注册<code>TransactionalEventListenerFactory</code>，用于处理<code>@TransactionalEventListener</code>标注的方法，将方法构造成事件监听器，注册到事件广播器中。</li><li>通过@Bean注册Advisor、Advisor的Advice和AnnotationTransactionAttributeSource。</li><li><code>BeanFactoryTransactionAttributeSourceAdvisor</code>实现PointcutAdvisor接口，决定是否进行代理的依据是<code>PointcutAdvisor#getPointcut()</code>，其Pointcut是<code>TransactionAttributeSourcePointcut</code>。</li><li><code>TransactionInterceptor</code>是Advice，实现了事务增强逻辑。</li><li>Advisor和Advice都依赖<code>AnnotationTransactionAttributeSource</code>这个bean，用来查找、解析@Transactional。在方法上找、类上找。</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">TransactionManagementConfigurationSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableTransactionManagement</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 指示是否要创建基于子类的 （CGLIB） 代理 （<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>） 为
     * 与基于标准 Java 接口的代理相反 （<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>）。默认值为
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>仅当 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">mode</span></span>（）<span class="token punctuation">}</span> 设置为
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AdviceMode</span><span class="token punctuation">#</span><span class="token field">PROXY</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>请注意，将此属性设置为 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> 将影响<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>所有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>
     * Spring 管理的 Bean 需要代理，而不仅仅是那些标有
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Transactional</span></span></span><span class="token punctuation">}</span>。例如，标有 Spring 的其他豆子
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Async</span></span></span><span class="token punctuation">}</span> 注解将同时升级为子类代理
     *时间。这种方法在实践中没有负面影响，除非明确
     * 期望一种类型的代理与另一种类型的代理，例如在测试中。
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Indicate how transactional advice should be applied.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>The default is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AdviceMode</span><span class="token punctuation">#</span><span class="token field">PROXY</span></span><span class="token punctuation">}</span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
     * Please note that proxy mode allows for interception of calls through the proxy
     * only. Local calls within the same class cannot get intercepted that way; an
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Transactional</span></span><span class="token punctuation">}</span> annotation on such a method within a local call will be
     * ignored since Spring&#39;s interceptor does not even kick in for such a runtime
     * scenario. For a more advanced mode of interception, consider switching this to
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AdviceMode</span><span class="token punctuation">#</span><span class="token field">ASPECTJ</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token class-name">AdviceMode</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token constant">PROXY</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Indicate the ordering of the execution of the transaction advisor
     * when multiple advices are applied at a specific joinpoint.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The default is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Ordered</span><span class="token punctuation">#</span><span class="token field">LOWEST_PRECEDENCE</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">LOWEST_PRECEDENCE</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="autoproxyregistrar" tabindex="-1"><a class="header-anchor" href="#autoproxyregistrar" aria-hidden="true">#</a> AutoProxyRegistrar</h2><p>向容器中注册InfrastructureAdvisorAutoProxyCreator，查找容器中特定类型的Advisor。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 	AnnotationMetadata，代表的是AutoProxyRegistrar的导入类的元信息</span>
<span class="token comment">// 既包含了类元信息，也包含了注解元信息</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> candidateFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取@EnableTransactionManagement所在配置类上的注解元信息</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> annTypes <span class="token operator">=</span> importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历注解</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> annType <span class="token operator">:</span> annTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可以理解为将注解中的属性转换成一个map</span>
        <span class="token class-name">AnnotationAttributes</span> candidate <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">,</span> annType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 直接从map中获取对应的属性</span>
        <span class="token class-name">Object</span> mode <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;mode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> proxyTargetClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;proxyTargetClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// mode，代理模型，一般都是SpringAOP</span>
        <span class="token comment">// proxyTargetClass,是否使用cglib代理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> proxyTargetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> mode<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> proxyTargetClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 注解中存在这两个属性，并且属性类型符合要求，表示找到了合适的注解</span>
            candidateFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

            <span class="token comment">// 实际上会往容器中注册一个InfrastructureAdvisorAutoProxyCreator</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token constant">PROXY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AopConfigUtils</span><span class="token punctuation">.</span><span class="token function">registerAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> proxyTargetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">AopConfigUtils</span><span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToUseClassProxying</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@EnableAspectJAutoProxy注解也向容器中注册了一个能实现自动代理的bd，那么当@EnableAspectJAutoProxy跟@EnableTransactionManagement同时使用，会<strong>根据优先级仅生效一个</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BeanDefinition</span> <span class="token function">registerOrEscalateApcAsRequired</span><span class="token punctuation">(</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">AUTO_PROXY_CREATOR_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanDefinition</span> apcDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">AUTO_PROXY_CREATOR_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当前已经注册到容器中的Bean的优先级</span>
            <span class="token keyword">int</span> currentPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 当前准备注册到容器中的Bean的优先级</span>
            <span class="token keyword">int</span> requiredPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 谁的优先级大就注册谁，AnnotationAwareAspectJAutoProxyCreator是最大的</span>
            <span class="token comment">// 所以AnnotationAwareAspectJAutoProxyCreator会覆盖别的Bean</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPriority <span class="token operator">&lt;</span> requiredPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                apcDefinition<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 注册bd</span>
    <span class="token class-name">RootBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanDefinition<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">AUTO_PROXY_CREATOR_BEAN_NAME</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> beanDefinition<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxytransactionmanagementconfiguration" tabindex="-1"><a class="header-anchor" href="#proxytransactionmanagementconfiguration" aria-hidden="true">#</a> ProxyTransactionManagementConfiguration</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTransactionManagementConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTransactionManagementConfiguration</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * transactionAdvisor 就是 @EnableTransactionManagement 的增强器，而 @Role(BeanDefinition.ROLE_INFRASTRUCTURE) 也是有用的
     * 因为 InfrastructureAdvisorAutoProxyCreator 只会使用Role的值是 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token class-name">ROLE_INFRASTRUCTURE</span></span><span class="token punctuation">}</span> 的 Advisor 来判断后置处理的bean是否需要代理
     *        <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanFactoryAdvisorRetrievalHelper</span><span class="token punctuation">#</span><span class="token function">findAdvisorBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">TransactionManagementConfigUtils</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_ADVISOR_BEAN_NAME</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BeanFactoryTransactionAttributeSourceAdvisor</span> <span class="token function">transactionAdvisor</span><span class="token punctuation">(</span>
            <span class="token class-name">TransactionAttributeSource</span> transactionAttributeSource<span class="token punctuation">,</span> <span class="token class-name">TransactionInterceptor</span> transactionInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 实现 PointcutAdvisor 接口，所以是否要进行代理得看 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">PointcutAdvisor</span><span class="token punctuation">#</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * 而 BeanFactoryTransactionAttributeSourceAdvisor 的 Pointcut是这个 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSourcePointcut</span></span><span class="token punctuation">}</span>
         * 而 TransactionAttributeSourcePointcut 类匹配和方法匹配是使用 transactionAttributeSource 来解析注解的
         *      - ClassFilter <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSourcePointcut</span><span class="token punctuation">.</span><span class="token class-name">TransactionAttributeSourceClassFilter</span></span><span class="token punctuation">}</span>
         *          类不是java包下的 不是 Ordered类 就是匹配
         *
         *      - MethodMatcher <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSourcePointcut</span><span class="token punctuation">#</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *          查找 方法-&gt;方法声明的类 有@Transactional 就是匹配
         * */</span>
        <span class="token class-name">BeanFactoryTransactionAttributeSourceAdvisor</span> advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactoryTransactionAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 默认是注册的这个类型 AnnotationTransactionAttributeSource</span>
        advisor<span class="token punctuation">.</span><span class="token function">setTransactionAttributeSource</span><span class="token punctuation">(</span>transactionAttributeSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * Advice, 也就是具体的增强逻辑
         * */</span>
        advisor<span class="token punctuation">.</span><span class="token function">setAdvice</span><span class="token punctuation">(</span>transactionInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableTx <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 设置排序值
             * */</span>
            advisor<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableTx<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> advisor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TransactionAttributeSource</span> <span class="token function">transactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * Advisor 和 Advice 都依赖了这个bean。
         * TransactionAttributeSource 该对象很简单，就是解析 @Transactional 注解，解析成 RuleBasedTransactionAttribute 对象
         * */</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TransactionInterceptor</span> <span class="token function">transactionInterceptor</span><span class="token punctuation">(</span><span class="token class-name">TransactionAttributeSource</span> transactionAttributeSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 就是 BeanFactoryTransactionAttributeSourceAdvisor 的 advice
         * */</span>
        <span class="token class-name">TransactionInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 依赖了 transactionAttributeSource，这东西是用来拿到方法、类上的 @Transactional注解，解析成 RuleBasedTransactionAttribute 对象
         * */</span>
        interceptor<span class="token punctuation">.</span><span class="token function">setTransactionAttributeSource</span><span class="token punctuation">(</span>transactionAttributeSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 设置事务管理器，该属性值是父类依赖注入 TransactionManagementConfigurer 类型的bean设置的
             * */</span>
            interceptor<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>



<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTransactionManagementConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">ImportAware</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 就是 @EnableTransactionManagement 的元数据
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token class-name">AnnotationAttributes</span> enableTx<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Default transaction manager, as configured through a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionManagementConfigurer</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token class-name">TransactionManager</span> txManager<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImportMetadata</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>enableTx <span class="token operator">=</span> <span class="token class-name">AnnotationAttributes</span><span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>
                importMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableTransactionManagement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableTx <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;@EnableTransactionManagement is not present on importing class &quot;</span> <span class="token operator">+</span> importMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionManagementConfigurer</span><span class="token punctuation">&gt;</span></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 配置事务管理器。事务管理器是用于事务的开启、回滚、提交 就是通过这个接口统一调用的，
         * 其依赖 TransactionSynchronizationManager 管理事务的状态
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configurers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Only one TransactionManagementConfigurer may exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">TransactionManagementConfigurer</span> configurer <span class="token operator">=</span> configurers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">=</span> configurer<span class="token punctuation">.</span><span class="token function">annotationDrivenTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">TransactionManagementConfigUtils</span><span class="token punctuation">.</span><span class="token constant">TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TransactionalEventListenerFactory</span> <span class="token function">transactionalEventListenerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventListenerMethodProcessor</span></span><span class="token punctuation">}</span> 后置处理器会用到 EventListenerFactory，
         * 而 TransactionalEventListenerFactory 用于处理 @TransactionalEventListener 标注的方法，将方法构造成事件监听器，注册到事件广播器中
         * */</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransactionalEventListenerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beanfactorytransactionattributesourceadvisor" tabindex="-1"><a class="header-anchor" href="#beanfactorytransactionattributesourceadvisor" aria-hidden="true">#</a> BeanFactoryTransactionAttributeSourceAdvisor</h3><p>切面，看切点匹配逻辑以及通知增强逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * 由 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSource</span></span><span class="token punctuation">}</span> 驱动的顾问程序，用于包括
 * 事务性方法的事务建议 Bean。
 *
 * <span class="token keyword">@author</span> Juergen Hoeller
 * <span class="token keyword">@since</span> 2.5.5
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setAdviceBeanName</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">TransactionInterceptor</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">TransactionAttributeSourceAdvisor</span></span>
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;serial&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryTransactionAttributeSourceAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactoryPointcutAdvisor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">TransactionAttributeSource</span> transactionAttributeSource<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionAttributeSourcePointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionAttributeSourcePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token annotation punctuation">@Nullable</span>
        <span class="token keyword">protected</span> <span class="token class-name">TransactionAttributeSource</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> transactionAttributeSource<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * Set the transaction attribute source which is used to find transaction
     * attributes. This should usually be identical to the source reference
     * set on the transaction interceptor itself.
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">#</span><span class="token field">setTransactionAttributeSource</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token class-name">TransactionAttributeSource</span> transactionAttributeSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transactionAttributeSource <span class="token operator">=</span> transactionAttributeSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Set the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ClassFilter</span></span><span class="token punctuation">}</span> to use for this pointcut.
     * Default is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ClassFilter</span><span class="token punctuation">#</span><span class="token field">TRUE</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassFilter</span><span class="token punctuation">(</span><span class="token class-name">ClassFilter</span> classFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pointcut<span class="token punctuation">.</span><span class="token function">setClassFilter</span><span class="token punctuation">(</span>classFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Pointcut</span> <span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pointcut<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionattributesourcepointcut" tabindex="-1"><a class="header-anchor" href="#transactionattributesourcepointcut" aria-hidden="true">#</a> TransactionAttributeSourcePointcut</h3><p>切点，类以及方法匹配。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TransactionAttributeSourcePointcut</span> <span class="token keyword">extends</span> <span class="token class-name">StaticMethodMatcherPointcut</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">TransactionAttributeSourcePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * TransactionAttributeSourceClassFilter 会执行抽象方法 \`getTransactionAttributeSource\` 然后执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSource</span><span class="token punctuation">#</span><span class="token function">isCandidateClass</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * 判断类是否匹配。
         *
         * 注：过滤规则很简单，只要类不是java包下的 不是 Ordered接口 就是匹配
         * */</span>
        <span class="token function">setClassFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionAttributeSourceClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * TransactionAttributeSourcePointcut 实现了 MethodMatcher，所以判断方法匹配的时候会执行当前方法。
         * 会执行抽象方法 \`getTransactionAttributeSource\` 然后执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSource</span><span class="token punctuation">#</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractFallbackTransactionAttributeSource</span><span class="token punctuation">#</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * 注：
         *  1. 过滤规则很简单，方法 -&gt; 方法声明的类 先找到@Transactional就返回。也就是有注解就是匹配
         *  2. 如果方法不是public的，直接返回null 不解析上面的@Transactional注解，也就是不代理
         * */</span>
        <span class="token class-name">TransactionAttributeSource</span> tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>tas <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 获取基础 TransactionAttributeSource（可能为 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>）。
     * 由子类实现。
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">TransactionAttributeSource</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ClassFilter</span></span><span class="token punctuation">}</span> that delegates to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAttributeSource</span><span class="token punctuation">#</span><span class="token field">isCandidateClass</span></span><span class="token punctuation">}</span>
     * for filtering classes whose methods are not worth searching to begin with.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TransactionAttributeSourceClassFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFilter</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionalProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token class-name">PersistenceExceptionTranslator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">TransactionAttributeSource</span> tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>tas <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tas<span class="token punctuation">.</span><span class="token function">isCandidateClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFallbackTransactionAttributeSource</span>
        <span class="token keyword">implements</span> <span class="token class-name">TransactionAttributeSource</span><span class="token punctuation">,</span> <span class="token class-name">EmbeddedValueResolverAware</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">StringValueResolver</span> embeddedValueResolver<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Cache of TransactionAttributes, keyed by method on a specific target class.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>As this base class is not marked Serializable, the cache will be recreated
     * after serialization - provided that the concrete subclass is Serializable.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">TransactionAttribute</span><span class="token punctuation">&gt;</span></span> attributeCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token class-name">StringValueResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">=</span> resolver<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    

    <span class="token doc-comment comment">/**
     * Determine a cache key for the given method and target class.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Must not produce same key for overloaded methods.
     * Must produce same key for different instances of the same method.
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> the method (never <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>)
     * <span class="token keyword">@param</span> <span class="token parameter">targetClass</span> the target class (may be <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>)
     * <span class="token keyword">@return</span> the cache key (never <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>)
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodClassKey</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Subclasses need to implement this to return the transaction attribute for the
     * given class, if any.
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> the class to retrieve the attribute for
     * <span class="token keyword">@return</span> all transaction attribute associated with this class, or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if none
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Subclasses need to implement this to return the transaction attribute for the
     * given method, if any.
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> the method to retrieve the attribute for
     * <span class="token keyword">@return</span> all transaction attribute associated with this method, or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if none
     */</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Should only public methods be allowed to have transactional semantics?
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The default implementation returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactioninterceptor" tabindex="-1"><a class="header-anchor" href="#transactioninterceptor" aria-hidden="true">#</a> TransactionInterceptor</h3><p>这个nb了，增强逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 拿到被代理类。</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行增强逻辑。</span>
        <span class="token keyword">return</span> <span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CoroutinesInvocationCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token annotation punctuation">@Nullable</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TransactionAspectSupport</span><span class="token operator">:</span>

<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">,</span>
                                          <span class="token keyword">final</span> <span class="token class-name">InvocationCallback</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

     <span class="token comment">// 用来解析 方法、类上是否有@Transactional</span>
     <span class="token class-name">TransactionAttributeSource</span> tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 1.1 拿到@Transactional注解，解析后的属性值</span>
     <span class="token keyword">final</span> <span class="token class-name">TransactionAttribute</span> txAttr <span class="token operator">=</span> <span class="token punctuation">(</span>tas <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token doc-comment comment">/**
      * 1.2 推断出要用的事务管理器：@Transactional(&quot;tm1&quot;)
* 默认的(<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AbstractTransactionManagementConfiguration</span><span class="token punctuation">#</span><span class="token field">setConfigurers</span></span>)<span class="token punctuation">}</span>) -&gt; BeanFactory中找TransactionManager
      * */</span>
     <span class="token keyword">final</span> <span class="token class-name">TransactionManager</span> tm <span class="token operator">=</span> <span class="token function">determineTransactionManager</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>

     
     <span class="token doc-comment comment">/**
      * 强转，tm 必须是 PlatformTransactionManager 类型的组
      * */</span>
     <span class="token class-name">PlatformTransactionManager</span> ptm <span class="token operator">=</span> <span class="token function">asPlatformTransactionManager</span><span class="token punctuation">(</span>tm<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 就是一个method的标识</span>
     <span class="token keyword">final</span> <span class="token class-name">String</span> joinpointIdentification <span class="token operator">=</span> <span class="token function">methodIdentification</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token doc-comment comment">/**
      * 没有@Transactional注解  或者 事务管理器不是CallbackPreferringPlatformTransactionManager类型
      * */</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>ptm <span class="token keyword">instanceof</span> <span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token doc-comment comment">/**
          * 1.3 如果需要就创建事务(主要是根据事务传播行为来判断的)
          * 就是使用DataSource创建Connection，然后设置为非自动提交 \`Connection.setAutoCommit(false)\`
          * */</span>
         <span class="token comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span>
         <span class="token class-name">TransactionInfo</span> txInfo <span class="token operator">=</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>ptm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>
         <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token comment">// 放行方法</span>
             <span class="token comment">// This is an around advice: Invoke the next interceptor in the chain.</span>
             <span class="token comment">// This will normally result in a target object being invoked.</span>
             retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token doc-comment comment">/**
              * 1.4 出现异常的处理，看看是回滚还是提交事务。
              * 看看异常类型是不是要回滚的类型，是就回滚，否则就提交事务 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleBasedTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
              *
              * 而具体的回滚类型是根据 @Transactional(rollbackFor = RuntimeException.class, rollbackForClassName = &quot;a&quot;,
              *             noRollbackFor = Throwable.class, noRollbackForClassName = &quot;b&quot;) 的值解析的
              *
              *
              * 无论是回滚，还是提交事务 最终都会执行这个，恢复上一个事务的内容到ThreadLocal中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">cleanupAfterCompletion</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
              * */</span>
             <span class="token comment">// target invocation exception</span>
             <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
             <span class="token doc-comment comment">/**
              * 1.5 清除当前事务信息。就是将当前txInfo之前的txInfo恢复到ThreadLocal中
              * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token field">transactionInfoHolder</span></span><span class="token punctuation">}</span>
              * */</span>
             <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> vavrPresent <span class="token operator">&amp;&amp;</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">isVavrTry</span><span class="token punctuation">(</span>retVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">// Set rollback-only in case of Vavr failure matching our rollback rules...</span>
             <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 retVal <span class="token operator">=</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">evaluateTryFailure</span><span class="token punctuation">(</span>retVal<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>

         <span class="token doc-comment comment">/**
          * 1.6 提交事务。
          *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">TransactionInfo</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
          *
          * 最终会执行这个，恢复上一个事务的内容到ThreadLocal中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">cleanupAfterCompletion</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
          * */</span>
         <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
         <span class="token keyword">final</span> <span class="token class-name">ThrowableHolder</span> throwableHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// It&#39;s a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span>
         <span class="token keyword">try</span> <span class="token punctuation">{</span>
             result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span> ptm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">,</span> status <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                 <span class="token class-name">TransactionInfo</span> txInfo <span class="token operator">=</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>ptm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token keyword">try</span> <span class="token punctuation">{</span>
                     <span class="token class-name">Object</span> retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> vavrPresent <span class="token operator">&amp;&amp;</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">isVavrTry</span><span class="token punctuation">(</span>retVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                         <span class="token comment">// Set rollback-only in case of Vavr failure matching our rollback rules...</span>
                         retVal <span class="token operator">=</span> <span class="token class-name">VavrDelegate</span><span class="token punctuation">.</span><span class="token function">evaluateTryFailure</span><span class="token punctuation">(</span>retVal<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                     <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
                 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                         <span class="token comment">// A RuntimeException: will lead to a rollback.</span>
                         <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                             <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> ex<span class="token punctuation">;</span>
                         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolderException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                         <span class="token punctuation">}</span>
                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                         <span class="token comment">// A normal return value: will lead to a commit.</span>
                         throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">=</span> ex<span class="token punctuation">;</span>
                         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                 <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                     <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThrowableHolderException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token comment">// Check result state: It might indicate a Throwable to rethrow.</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">throw</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">return</span> result<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>



 <span class="token keyword">protected</span> <span class="token class-name">TransactionInfo</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PlatformTransactionManager</span> tm<span class="token punctuation">,</span>
                                                     <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionAttribute</span> txAttr<span class="token punctuation">,</span> <span class="token class-name">String</span> joinpointIdentification<span class="token punctuation">,</span>
                                                     <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">TransactionInfo</span> txInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// We need a transaction for this method...</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Getting transaction for [&quot;</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 设置事务状态</span>
            <span class="token comment">// The transaction manager will flag an error if an incompatible tx already exists.</span>
            txInfo<span class="token punctuation">.</span><span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// The TransactionInfo.hasTransaction() method will return false. We created it only</span>
            <span class="token comment">// to preserve the integrity of the ThreadLocal stack maintained in this class.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No need to create transaction for [&quot;</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>
                        <span class="token string">&quot;]: This method is not transactional.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 绑定到这个属性上 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token field">transactionInfoHolder</span></span><span class="token punctuation">}</span>
         * 并且会记录原来ThreadLocal的值，当事务结束了要恢复回去 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span><span class="token class-name">TransactionInfo</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token comment">// We always bind the TransactionInfo to the thread, even if we didn&#39;t create</span>
        <span class="token comment">// a new transaction here. This guarantees that the TransactionInfo stack</span>
        <span class="token comment">// will be managed correctly even if no transaction was created by this aspect.</span>
        txInfo<span class="token punctuation">.</span><span class="token function">bindToThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> txInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token doc-comment comment">/**
     * 处理Throwable，完成事务。
     * 我们可能会提交或回滚，具体取决于配置。
     * <span class="token keyword">@param</span> <span class="token parameter">txInfo</span> information about the current transaction
     * <span class="token keyword">@param</span> <span class="token parameter">ex</span> throwable encountered
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionInfo</span> txInfo<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Completing transaction for [&quot;</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                        <span class="token string">&quot;] after exception: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token doc-comment comment">/**
             * 异常是需要回滚 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleBasedTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *
             * - 使用 @Transactional 配置的rollback进行匹配，匹配就返回结果
             * - 没有匹配rollback，就判断异常是不是  RuntimeException 、Error 是就回滚
             * */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span>transactionAttribute <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span>transactionAttribute<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token doc-comment comment">/**
                     * 回滚
                     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                     * */</span>
                    txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by rollback exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by rollback exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 提交事务
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 * */</span>
                <span class="token comment">// We don&#39;t roll back on this exception.</span>
                <span class="token comment">// Will still roll back if TransactionStatus.isRollbackOnly() is true.</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionInfo</span> txInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Completing transaction for [&quot;</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token doc-comment comment">/**
             * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-解析transactional注解属性" tabindex="-1"><a class="header-anchor" href="#_1-1-解析transactional注解属性" aria-hidden="true">#</a> 1.1 解析Transactional注解属性</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">AbstractFallbackTransactionAttributeSource</span>： 
      
		<span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">public</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


      	<span class="token comment">// 从缓存取 避免重复解析</span>
        <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TransactionAttribute</span> cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> <span class="token constant">NULL_TRANSACTION_ATTRIBUTE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> cached<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 计算事务属性 方法必须是public的 依次从方法、类上获取。</span>
            <span class="token class-name">TransactionAttribute</span> txAttr <span class="token operator">=</span> <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
           
            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token constant">NULL_TRANSACTION_ATTRIBUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> methodIdentification <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getQualifiedMethodName</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token keyword">instanceof</span> <span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">DefaultTransactionAttribute</span> dta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">)</span> txAttr<span class="token punctuation">;</span>
                    dta<span class="token punctuation">.</span><span class="token function">setDescriptor</span><span class="token punctuation">(</span>methodIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    dta<span class="token punctuation">.</span><span class="token function">resolveAttributeStrings</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Adding transactional method &#39;&quot;</span> <span class="token operator">+</span> methodIdentification <span class="token operator">+</span> <span class="token string">&quot;&#39; with attribute: &quot;</span> <span class="token operator">+</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



	<span class="token comment">// 计算事务属性 方法必须是public的 依次从方法、类上获取。</span>
   <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">protected</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 方法不是public 就直接返回null， 也就是说@Transactional 得标注在public方法上才有用</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 就是targetClass是代理对象的情况,返回的是其被代理类的方法。</span>
        <span class="token class-name">Method</span> specificMethod <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 1.1.1 方法有@Transactional就解析注解值，然后返回</span>
        <span class="token class-name">TransactionAttribute</span> txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 1.1.2 尝试从方法声明类上找，有@Transactional就解析注解值，然后返回</span>
        txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 不相等，说明method是代理对象的方法， 上面解析被代理对象的方法找不到注解信息，尝试从 代理对象的方法、代理对象找 @Transactional，
         * 找到就返回
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>specificMethod <span class="token operator">!=</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Fallback is to look at the original method.</span>
            txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Last fallback is the class of the original method.</span>
            txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-1-解析方法上事务注解属性" tabindex="-1"><a class="header-anchor" href="#_1-1-1-解析方法上事务注解属性" aria-hidden="true">#</a> 1.1.1 解析方法上事务注解属性</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationTransactionAttributeSource</span><span class="token operator">:</span>

<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">protected</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 遍历 annotationParsers，执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAnnotationParser</span><span class="token punctuation">#</span><span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 返回注解对应的属性信息，
     * 解析的对象是 method，说白了就是看看 method 是否有注解
     * 没得就返回null
     *
     * 注：默认有这个 SpringTransactionAnnotationParser，就是是否有 @Transactional
     * */</span>
    <span class="token keyword">return</span> <span class="token function">determineTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-2-解析类上事务注解" tabindex="-1"><a class="header-anchor" href="#_1-1-2-解析类上事务注解" aria-hidden="true">#</a> 1.1.2 解析类上事务注解</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationTransactionAttributeSource</span><span class="token operator">:</span>

<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">protected</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 遍历 annotationParsers，执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAnnotationParser</span><span class="token punctuation">#</span><span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 返回注解对应的属性信息，
     * 解析的对象是 clazz ，说白了就是看看 clazz是否有注解
     * 没得就返回null
     *
     * 注：默认有这个 SpringTransactionAnnotationParser，就是是否有 @Transactional
     * */</span>
    <span class="token keyword">return</span> <span class="token function">determineTransactionAttribute</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历注解解析器解析注解属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">protected</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">determineTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TransactionAnnotationParser</span> parser <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>annotationParsers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionAttribute</span> attr <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析出事务属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从 AnnotatedElement 找到  @Transactional 注解信息</span>
    <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotationAttributes</span><span class="token punctuation">(</span>
            element<span class="token punctuation">,</span> <span class="token class-name">Transactional</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 就是将注解的值 设置到 TransactionAttribute 对象中</span>
        <span class="token keyword">return</span> <span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 解析注解属性 事务回滚规则用的是RollbackRuleAttribute</span>
 <span class="token keyword">protected</span> <span class="token class-name">TransactionAttribute</span> <span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RuleBasedTransactionAttribute</span> rbta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuleBasedTransactionAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Propagation</span> propagation <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">&quot;propagation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rbta<span class="token punctuation">.</span><span class="token function">setPropagationBehavior</span><span class="token punctuation">(</span>propagation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Isolation</span> isolation <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">&quot;isolation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rbta<span class="token punctuation">.</span><span class="token function">setIsolationLevel</span><span class="token punctuation">(</span>isolation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        rbta<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> timeoutString <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;timeoutString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>timeoutString<span class="token punctuation">)</span> <span class="token operator">||</span> rbta<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token string">&quot;Specify &#39;timeout&#39; or &#39;timeoutString&#39;, not both&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rbta<span class="token punctuation">.</span><span class="token function">setTimeoutString</span><span class="token punctuation">(</span>timeoutString<span class="token punctuation">)</span><span class="token punctuation">;</span>

        rbta<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;readOnly&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这个属性是指定 事务管理的</span>
        rbta<span class="token punctuation">.</span><span class="token function">setQualifier</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rbta<span class="token punctuation">.</span><span class="token function">setLabels</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 回滚规则，两种类型：
         *      - RollbackRuleAttribute 表示要回滚
         *      - NoRollbackRuleAttribute 表示不回滚
         *
         * 在这里会用到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleBasedTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RollbackRuleAttribute</span><span class="token punctuation">&gt;</span></span> rollbackRules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> rbRule <span class="token operator">:</span> attributes<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">&quot;rollbackFor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rollbackRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RollbackRuleAttribute</span><span class="token punctuation">(</span>rbRule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> rbRule <span class="token operator">:</span> attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;rollbackForClassName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rollbackRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RollbackRuleAttribute</span><span class="token punctuation">(</span>rbRule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> rbRule <span class="token operator">:</span> attributes<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">&quot;noRollbackFor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rollbackRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoRollbackRuleAttribute</span><span class="token punctuation">(</span>rbRule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> rbRule <span class="token operator">:</span> attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;noRollbackForClassName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rollbackRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoRollbackRuleAttribute</span><span class="token punctuation">(</span>rbRule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        rbta<span class="token punctuation">.</span><span class="token function">setRollbackRules</span><span class="token punctuation">(</span>rollbackRules<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> rbta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2推断事务管理器" tabindex="-1"><a class="header-anchor" href="#_1-2推断事务管理器" aria-hidden="true">#</a> 1.2推断事务管理器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TransactionAspectSupport</span><span class="token operator">:</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">protected</span> <span class="token class-name">TransactionManager</span> <span class="token function">determineTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionAttribute</span> txAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果未设置 tx 属性，请勿尝试查找 tx 管理器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token doc-comment comment">/**
     * 通过限定符查找 @Transactional(&quot;tm1&quot;) <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SpringTransactionAnnotationParser</span><span class="token punctuation">#</span><span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token class-name">String</span> qualifier <span class="token operator">=</span> txAttr<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 注解 value值不为空，就根据value从BeanFactory拿到事务管理器。找不到就报错
         * */</span>
        <span class="token keyword">return</span> <span class="token function">determineQualifiedTransactionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> qualifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置了 transactionManagerBeanName，就使用这个name找</span>
        <span class="token keyword">return</span> <span class="token function">determineQualifiedTransactionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionManager</span> defaultTransactionManager <span class="token operator">=</span> <span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultTransactionManager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            defaultTransactionManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_TRANSACTION_MANAGER_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultTransactionManager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 通过 TransactionManager 类型从 BeanFactory拿到事务管理器，
                 * 类型匹配到多个bean，会通过 @Primary、@Priority确定唯一一个，确定不能就报错了
                 * */</span>
                defaultTransactionManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>
                        <span class="token constant">DEFAULT_TRANSACTION_MANAGER_KEY</span><span class="token punctuation">,</span> defaultTransactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> defaultTransactionManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



   <span class="token keyword">private</span> <span class="token class-name">TransactionManager</span> <span class="token function">determineQualifiedTransactionManager</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">String</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionManager</span> txManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txManager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            txManager <span class="token operator">=</span> <span class="token class-name">BeanFactoryAnnotationUtils</span><span class="token punctuation">.</span><span class="token function">qualifiedBeanOfType</span><span class="token punctuation">(</span>
                    beanFactory<span class="token punctuation">,</span> <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> qualifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">,</span> txManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> txManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-createtransactionifnecessary" tabindex="-1"><a class="header-anchor" href="#_1-3-createtransactionifnecessary" aria-hidden="true">#</a> 1.3 createTransactionIfNecessary</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token operator">:</span>

<span class="token doc-comment comment">/**
 * 如有必要，根据给定的 TransactionAttribute 创建事务。
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;serial&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">protected</span> <span class="token class-name">TransactionInfo</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PlatformTransactionManager</span> tm<span class="token punctuation">,</span>
                                                       <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionAttribute</span> txAttr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> joinpointIdentification<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 使用 @Transactional，默认的parser是无法设置name值的，所以都会装饰一下
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SpringTransactionAnnotationParser</span><span class="token punctuation">#</span><span class="token function">parseTransactionAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token comment">// If no name specified, apply method identification as transaction name.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txAttr<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        txAttr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingTransactionAttribute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> joinpointIdentification<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 1.3.1 获取事务状态。
             *
             * 使用 txAttr 通过事务管理器 获取事务状态
             *
             * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *      - 会根据事务传播行为来决定，是新创建事务、暂停事务、savepoint 等操作
             *      - 是新建事务，就会使用DataSource获取Connection，然后将Connection设置为非自动提交
             *
             * DefaultTransactionStatus 事务状态，由这三个东西组成：
             *      - RuleBasedTransactionAttribute(事务属性)：就是描述@Transactional注解的对象
             *      - DataSourceTransactionObject(事务对象)：记录事务的ConnectionHolder
             *      - SuspendedResourcesHolder(暂停资源持有者)：记录上一个事务的ConnectionHolder和TransactionSynchronization
             *      注：事务说白了就是一个数据库连接
             * */</span>
            status <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Skipping transactional joinpoint [&quot;</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>
                        <span class="token string">&quot;] because no transaction manager has been configured&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  
    <span class="token doc-comment comment">/**
     * 1.3.2 将事务管理器、事务属性、方法标识和事务状态 装饰成 TransactionInfo 返回，
     * */</span>
    <span class="token keyword">return</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-1-获取事务状态" tabindex="-1"><a class="header-anchor" href="#_1-3-1-获取事务状态" aria-hidden="true">#</a> 1.3.1 获取事务状态</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * definition 就是描述@Transactional注解的对象，
     * definition 是空就给一个默认值
     * */</span>
    <span class="token class-name">TransactionDefinition</span> def <span class="token operator">=</span> <span class="token punctuation">(</span>definition <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> definition <span class="token operator">:</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 1.3.1.1 创建事务对象。从 resources 中拿到资源设置给事务对象
     * 这个资源并不一定是开启事务时创建的连接，比如空事务情况下，使用 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">#</span><span class="token function">doGetConnection</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 获取连接
     * 这个连接也会存到 resources 中，目的是在事务方法内能重复使用
     *
     * 比如：<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      会创建这个对象 DataSourceTransactionObject
     *      1. 从ThreadLocal中拿到 Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource,ConnectionHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
     *      2. DataSource 作为key，从 resources 拿到 ConnectionHolder 设置给事务对象
     *      Tips：创建的是这个对象DataSourceTransactionObject，事务对象说白了就是 一个数据库连接的包装对象
     * */</span>
    <span class="token class-name">Object</span> transaction <span class="token operator">=</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 1.3.1.2 判断是否存在事务。就是出现了事务方法嵌套调用的情况
     *
     * 比如这个事务管理器：
     *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">isExistingTransaction</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      \`txObject.hasConnectionHolder() &amp;&amp; txObject.getConnectionHolder().isTransactionActive()\`
     *      就是事务对象有连接 且 连接是活动的事务 才是true
     *
     * 空事务不算存在事务，因为其 isTransactionActive 是false
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 1.3.1.3 存在事务的处理，就是根据传播行为看看是：暂停当前事务，新建事务，设置保存点
         * */</span>
        <span class="token keyword">return</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// 能往下执行，说明还没有事务</span>
  
    <span class="token doc-comment comment">/**
     * 校验 @Transactional() 设置的值 是否合法
     * */</span>
    <span class="token comment">// Check definition settings for new transaction.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>def<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidTimeoutException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid transaction timeout&quot;</span><span class="token punctuation">,</span> def<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token doc-comment comment">/**
     * 校验事务隔离级别参数，不存在事务就抛出异常
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>def<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_MANDATORY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;No existing transaction found for transaction marked with propagation &#39;mandatory&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>def<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span> <span class="token operator">||</span>
            def<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRES_NEW</span> <span class="token operator">||</span>
            def<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NESTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 1.3.1.4 暂停事务。入参就是要暂停的事务。其实就是从ThreadLocal中取出这两个属性内容，记录到 SuspendedResourcesHolder 中
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span>
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token class-name">SuspendedResourcesHolder</span> suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Creating new transaction with name [&quot;</span> <span class="token operator">+</span> def<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]: &quot;</span> <span class="token operator">+</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 1.3.1.5 开启事务（校验事务隔离级别参数，创建新事务）：
             *  1. 事务对象，没有连接或者连接isSynchronizedWithTransaction 就通过数据源创建连接然后设置给事务对象
             *  2. 将 @Transactional 的信息设置到连接和事务对象中（自动提交、是否只读、隔离级别、超时时间）
             *  3. 是新创建的连接，就使用数据源作为key，将连接绑定是事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
             *  4. 设置 ConnectionHolder 属性 isSynchronizedWithTransaction 为true
             *  5. 记录信息到 TransactionSynchronizationManager
             * */</span>
            <span class="token keyword">return</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 1.3.1.6 出现异常，就恢复之前的事务状态到ThreadLocal中</span>
            <span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 创建空事务，其实就是没有事务
         * */</span>
        <span class="token comment">// Create &quot;empty&quot; transaction: no actual transaction, but potentially synchronization.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>def<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Custom isolation level specified but no actual transaction initiated; &quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;isolation level will effectively be ignored: &quot;</span> <span class="token operator">+</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
        <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">SYNCHRONIZATION_ALWAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      	<span class="token comment">// 1.3.1.7 创建事务状态</span>
        <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-1-创建事务对象" tabindex="-1"><a class="header-anchor" href="#_1-3-1-1-创建事务对象" aria-hidden="true">#</a> 1.3.1.1 创建事务对象</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txObject<span class="token punctuation">.</span><span class="token function">setSavepointAllowed</span><span class="token punctuation">(</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 使用 DataSource 作为key从 ThreadLocal中拿 ConnectionHolder,
     * 没有就是 null，第一次开启事务 这个值就是null咯
     * */</span>
    <span class="token class-name">ConnectionHolder</span> conHolder <span class="token operator">=</span>
            <span class="token punctuation">(</span><span class="token class-name">ConnectionHolder</span><span class="token punctuation">)</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>conHolder<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> txObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-2-判断是否存在事务" tabindex="-1"><a class="header-anchor" href="#_1-3-1-2-判断是否存在事务" aria-hidden="true">#</a> 1.3.1.2 判断是否存在事务</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DataSourceTransactionManager</span><span class="token operator">:</span>

<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isExistingTransaction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 在开始事务时会将 isTransactionActive 设置为true
     * 只有在事务完成时，才会将事务的持有的 getConnectionHolder().isTransactionActive() 设置为false
     * 所以可以通过这个判断 是否存在事务
     *
     * 空事务不算存在事务，因为空事务不会开启事务(不会给事务对象创建数据库连接)，也就不会将 isTransactionActive 设置为true
     *
     * 在空事务下，使用<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSourceUtils</span><span class="token punctuation">#</span><span class="token function">doGetConnection</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>获取连接，也不会设置 isTransactionActive 为true，
     * 只是存到了 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-3-存在事务的处理" tabindex="-1"><a class="header-anchor" href="#_1-3-1-3-存在事务的处理" aria-hidden="true">#</a> 1.3.1.3 存在事务的处理</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 存在的事务创建事务状态(主要是根据事务传播行为来判断)
 */</span>
<span class="token keyword">private</span> <span class="token class-name">TransactionStatus</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>
        <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 传播行为：存在事务就报错
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NEVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Existing transaction found for transaction marked with propagation &#39;never&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 传播行为：存在事务就挂起
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NOT_SUPPORTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Suspending current transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 1.3.1.3.1 暂停事务。返回 SuspendedResourcesHolder，这里面记录了被移除的资源，和所暂停事务的状态信息
         *
         * 就是从 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> 移除资源，移除的资源会存到 SuspendedResourcesHolder 中
         * */</span>
        <span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">SYNCHRONIZATION_ALWAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1.3.1.3.2 处理事务状态</span>
        <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>
                definition<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 传播行为：创建新的事物，已经存在事物就挂起
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRES_NEW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Suspending current transaction, creating new transaction with name [&quot;</span> <span class="token operator">+</span>
                    definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 1.3.1.3.1 暂停事务，返回的是暂停事务的资源
         * */</span>
        <span class="token class-name">SuspendedResourcesHolder</span> suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 1.3.1.3.3 开启新事物，会记录暂停事务的信息
             * */</span>
            <span class="token keyword">return</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> beginEx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resumeAfterBeginException</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">,</span> beginEx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> beginEx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 传播行为：如果当前事务存在就创建嵌套事务，否则就像 PROPAGATION_REQUIRED 一样处理
     *
     * 通过这里能体现，没有事务的时候就和PROPAGATION_REQUIRED一样 创建新的事务 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">)</span></span> <span class="token punctuation">}</span>
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NESTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 不支持嵌套事务 就报错，<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 是支持的
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedTransactionNotSupportedException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;Transaction manager does not allow nested transactions by default - &quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;specify &#39;nestedTransactionAllowed&#39; property with value &#39;true&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Creating nested transaction with name [&quot;</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 使用保存点来实现 嵌套事务
         * DataSourceTransactionManager 就是true
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useSavepointForNestedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Create savepoint within existing Spring-managed transaction,</span>
            <span class="token comment">// through the SavepointManager API implemented by TransactionStatus.</span>
            <span class="token comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span>
            <span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span>
                    <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行sql创建保存点</span>
            status<span class="token punctuation">.</span><span class="token function">createAndHoldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> status<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          	<span class="token comment">// 1.3.1.3.3 开启事务</span>
            <span class="token keyword">return</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Participating in existing transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidateExistingTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> currentIsolationLevel <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> currentIsolationLevel <span class="token operator">!=</span> definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Constants</span> isoConstants <span class="token operator">=</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">.</span>constants<span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Participating transaction with definition [&quot;</span> <span class="token operator">+</span>
                        definition
                        <span class="token operator">+</span> <span class="token string">&quot;] specifies isolation level which is incompatible with existing transaction: &quot;</span>
                        <span class="token operator">+</span>
                        <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>
                                isoConstants<span class="token punctuation">.</span><span class="token function">toCode</span><span class="token punctuation">(</span>currentIsolationLevel<span class="token punctuation">,</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PREFIX_ISOLATION</span><span class="token punctuation">)</span> <span class="token operator">:</span>
                                <span class="token string">&quot;(unknown)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Participating transaction with definition [&quot;</span> <span class="token operator">+</span>
                        definition
                        <span class="token operator">+</span> <span class="token string">&quot;] is not marked as read-only but existing transaction is&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 1.3.1.3.2 处理事务状态</span>
    <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>暂停事务</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">SuspendedResourcesHolder</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 是活动的事务。
     * 可以这里理解，只要Java虚拟机栈中存在@Transactional的方法，这个判断就是true
     *      1. 暂停当前事务
     *      2. 完成当前事务(rollback或者commit)
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 1️⃣ 暂停事务的行为同步。暂停了 TransactionSynchronizationManager.isSynchronizationActive() 就是 false了
         *
         * 就是拿到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span>，遍历执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">#</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> suspendedSynchronizations <span class="token operator">=</span> <span class="token function">doSuspendSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// 存在事务对象</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 2️⃣ 暂停事务资源同步。
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 *      1. 取消事务对象绑定的连接信息 txObject.setConnectionHolder(null);
                 *      2. 从事务资源中移除事务对象对应的资源(就是移除DataSource作为key的资源) <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 *
                 *      Tips：返回值，就是事务资源中移除的资源
                 * */</span>
                suspendedResources <span class="token operator">=</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          
            <span class="token comment">// 拿到原来的值</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> readOnly <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> isolationLevel <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> wasActive <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isActualTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setActualTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          
            <span class="token doc-comment comment">/**
             * 装饰一下，就是记录现在得值，后面恢复事务需要重新设置到 TransactionSynchronizationManager
             * */</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>
                    suspendedResources<span class="token punctuation">,</span> suspendedSynchronizations<span class="token punctuation">,</span> name<span class="token punctuation">,</span> readOnly<span class="token punctuation">,</span> isolationLevel<span class="token punctuation">,</span> wasActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// doSuspend failed - original transaction is still active...</span>
            <span class="token function">doResumeSynchronization</span><span class="token punctuation">(</span>suspendedSynchronizations<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         *  2️⃣ 暂停事务资源同步。
         * */</span>
        <span class="token comment">// Transaction active but no synchronization active.</span>
        <span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Neither transaction nor synchronization active.</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣ 暂停行为同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token operator">:</span>

<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSuspendSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到事务同步资源</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> suspendedSynchronizations <span class="token operator">=</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getSynchronizations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历，然后挂起</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronization</span> synchronization <span class="token operator">:</span> suspendedSynchronizations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 对于数据库连接：
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token class-name">ConnectionSynchronization</span><span class="token punctuation">#</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *       如果该Connection存在事务资源中，就取消事务资源对该Connection的引用;
         *       否则就关闭连接
         * */</span>
        synchronization<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清空线程事务同步资源</span>
    <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">clearSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回 事务同步资源</span>
    <span class="token keyword">return</span> suspendedSynchronizations<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣ 暂停资源同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DataSourceTransactionManager</span><span class="token operator">:</span> 
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>
    txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>处理事务状态</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>
          <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">,</span>
          <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debug<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>

			<span class="token comment">// 事务状态</span>
      <span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>
              definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> newTransaction<span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debug<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 初始化行为同步</span>
      <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> status<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>



<span class="token comment">// 创建事务状态</span>
<span class="token keyword">protected</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>
        <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">,</span>
        <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debug<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * newSynchronization 且 不是同步激活状态  就是 真的新同步
     *
     * 同步激活状态：
     *      - true：简单来说就是Java虚拟机栈中存在@Transactional的方法
     *      - false：暂停当前事务、完成当前事务(rollback或者commit)
     *
     * 结论：当前线程在 TransactionSynchronizationManager 没有记录信息， actualNewSynchronization 就是true
     * */</span>
    <span class="token keyword">boolean</span> actualNewSynchronization <span class="token operator">=</span> newSynchronization <span class="token operator">&amp;&amp;</span>
            <span class="token operator">!</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">(</span>
            transaction<span class="token punctuation">,</span> newTransaction<span class="token punctuation">,</span> actualNewSynchronization<span class="token punctuation">,</span>
            definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> debug<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 适当地初始化事务同步。
     * Initialize transaction synchronization as appropriate.
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 是新的同步，才记录这些信息（注：空事务也算的）
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isNewSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 真的活动的事务。就是得有事务，且事务是新的才是true
             * */</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setActualTransactionActive</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">hasTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 记录事务隔离级别</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span>
                    definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">?</span>
                            definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 是否只读</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionReadOnly</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 事务的name</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionName</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 同步属性初始化，会根据这个属性是否为null判断 是不是 isNewSynchronization</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">initSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>开启事务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">TransactionStatus</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span>
                                           <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">SuspendedResourcesHolder</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 不是从不同步。这个值是看你用的啥事务管理，是事务管理器的属性
     * */</span>
    <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// new DefaultTransactionStatus 对象</span>
    <span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>
            definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doBegin</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      1. 事务对象没有连接或者连接isSynchronizedWithTransaction 就通过数据源创建连接然后设置给事务对象
     *      2. 将 @Transactional 的信息设置到连接和事务对象中（设置的内容：自动提交、是否只读、隔离级别、超时时间）
     *      3. 是新创建的连接，就使用数据源作为key，将连接绑定是事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
     *      4. 设置 ConnectionHolder 属性 isSynchronizedWithTransaction 为true
     * */</span>
    <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * status.isNewSynchronization() 就设置 TransactionSynchronizationManager：
     *  - 记录事务隔离级别
     *  - 是否只读
     *  - 事务的name
     *  - <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span> 属性初始化，会根据这个属性是否为null判断 是不是 isNewSynchronization
     * */</span>
    <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>doBegin</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1. 事务对象，没有连接或者连接isSynchronizedWithTransaction 就通过数据源创建连接然后设置给事务对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * 2. 将 @Transactional 的信息设置到连接和事务对象中（自动提交、是否只读、隔离级别、超时时间） <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * 3. 是新创建的连接，就使用数据源作为key，将连接绑定是事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * 4. 设置 ConnectionHolder 属性 isSynchronizedWithTransaction 为true
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>
    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 没有连接 或者 连接是事务同步 那就应该创建一个新的连接
         *
         * 可以这么理解，当前方法叫 doBegin ，也就是要给事务对象绑定连接。连接没有那就创建一个在绑定合情合理，
         * 而连接有了，但是连接是事务同步 说明上一个事务还未完成，你还要绑定 那也给你创建一个新的连接，这种属于非法操作了，如果你老老实实用Spring 别搞啥自定义，是不会出现这种情况的
         *
         * 因为 doBegin 是在 startTransaction 的时候会执行，而 startTransaction 之前会先暂停当前线程的事物资源，在开启事物，
         * 而暂停就是
         *      1. 移除事物对象的引用 \`txObject.setConnectionHolder(null);\`
         *      2. 从 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> 移除 ConnectionHolder 存起来。这个ConnectionHolder 其实就是上面置空的属性
         *          Tips: 暂停事务的代码 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      记住代码是死的，Spring的事物代码都这么写了，所以基本不可能出现 isSynchronizedWithTransaction 的情况，除非开发人员玩花活
         *
         * 注：在一个Spring事务(单一事务、嵌套事务)
         *      事务暂停：\`txObject.setConnectionHolder(null)\`
         *      事务完成：\` txObject.getConnectionHolder().setSynchronizedWithTransaction(false);\`
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 拿到连接 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSource</span><span class="token punctuation">#</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *
             * 这里就是动态数据源的原理了 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractRoutingDataSource</span><span class="token punctuation">#</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token class-name">Connection</span> newCon <span class="token operator">=</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Acquired Connection [&quot;</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">&quot;] for JDBC transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 装饰 Connection 并设置给事务对象</span>
            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 表示 这个事务对象的连接 是事务同步
         *
         * 在事物完成时 会将该属性设置为 false
         *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doCleanupAfterCompletion</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConnectionHolder</span><span class="token punctuation">#</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 就是根据 @Transactional 注解值，给Connection设置 只读属性、隔离级别属性。
         * 返回的是 Connection 之前的隔离饥级别信息
         * */</span>
        <span class="token class-name">Integer</span> previousIsolationLevel <span class="token operator">=</span> <span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 隔离级别</span>
        txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 是否只读</span>
        txObject<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果连接是自动提交，就设置为非自动提交</span>
        <span class="token comment">// Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span>
        <span class="token comment">// so we don&#39;t want to do it unnecessarily (for example if we&#39;ve explicitly</span>
        <span class="token comment">// configured the connection pool to set it already).</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Switching JDBC Connection [&quot;</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">&quot;] to manual commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 设置为非自动提交</span>
            con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 就比如 \`@Transactional(readOnly = true)\` 就设置事务为只读的
         * 如果是只读的就执行sql设置为只读事务  \`SET TRANSACTION READ ONLY\`
         * */</span>
        <span class="token function">prepareTransactionalConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 活动的事务。
         * 在事务完成时才会将该属性设置为false，暂停事务并不会
         * */</span>
        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * \`@Transactional(timeout = -1)\` 不是-1才拿注解值，没有就返回默认值 -1
         * */</span>
        <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置超时时间</span>
            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 是新创建的connect的，就绑定到ThreadLocal中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
         * 缓存的Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource,ConnectionHolder</span><span class="token punctuation">&gt;</span></span>。使用DataSource作为key，是因为一个线程可能有来回切换数据源的情况(动态数据源)
         * */</span>
        <span class="token comment">// Bind the connection holder to the thread.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 绑定到事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 从事务资源 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> 中移除该连接，或者是关闭连接
             *
             * */</span>
            <span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清除 txObject 的连接信息</span>
            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not open JDBC Connection for transaction&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-4-暂停事务" tabindex="-1"><a class="header-anchor" href="#_1-3-1-4-暂停事务" aria-hidden="true">#</a> 1.3.1.4 暂停事务</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">SuspendedResourcesHolder</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 是活动的事务。
     * 可以这里理解，只要Java虚拟机栈中存在@Transactional的方法，这个判断就是true
     *      1. 暂停当前事务
     *      2. 完成当前事务(rollback或者commit)
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 1️⃣ 暂停事务的行为同步。暂停了 TransactionSynchronizationManager.isSynchronizationActive() 就是 false了
         *
         * 就是拿到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span>，遍历执行 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">#</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> suspendedSynchronizations <span class="token operator">=</span> <span class="token function">doSuspendSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// 存在事务对象</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 2️⃣ 暂停事务资源同步。
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 *      1. 取消事务对象绑定的连接信息 txObject.setConnectionHolder(null);
                 *      2. 从事务资源中移除事务对象对应的资源(就是移除DataSource作为key的资源) <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 *
                 *      Tips：返回值，就是事务资源中移除的资源
                 * */</span>
                suspendedResources <span class="token operator">=</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          
            <span class="token comment">// 拿到原来的值</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> readOnly <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> isolationLevel <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> wasActive <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isActualTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setActualTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          
            <span class="token doc-comment comment">/**
             * 装饰一下，就是记录现在得值，后面恢复事务需要重新设置到 TransactionSynchronizationManager
             * */</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>
                    suspendedResources<span class="token punctuation">,</span> suspendedSynchronizations<span class="token punctuation">,</span> name<span class="token punctuation">,</span> readOnly<span class="token punctuation">,</span> isolationLevel<span class="token punctuation">,</span> wasActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// doSuspend failed - original transaction is still active...</span>
            <span class="token function">doResumeSynchronization</span><span class="token punctuation">(</span>suspendedSynchronizations<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         *  2️⃣ 暂停事务资源同步。
         * */</span>
        <span class="token comment">// Transaction active but no synchronization active.</span>
        <span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Neither transaction nor synchronization active.</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣ 暂停行为同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token operator">:</span>

<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSuspendSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到事务同步资源</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> suspendedSynchronizations <span class="token operator">=</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getSynchronizations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历，然后挂起</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronization</span> synchronization <span class="token operator">:</span> suspendedSynchronizations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 对于数据库连接：
         *      <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token class-name">ConnectionSynchronization</span><span class="token punctuation">#</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *       如果该Connection存在事务资源中，就取消事务资源对该Connection的引用;
         *       否则就关闭连接
         * */</span>
        synchronization<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清空线程事务同步资源</span>
    <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">clearSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回 事务同步资源</span>
    <span class="token keyword">return</span> suspendedSynchronizations<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣ 暂停资源同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DataSourceTransactionManager</span><span class="token operator">:</span> 
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>
    txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-5-开启事务" tabindex="-1"><a class="header-anchor" href="#_1-3-1-5-开启事务" aria-hidden="true">#</a> 1.3.1.5 开启事务</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">TransactionStatus</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span>
                                           <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">SuspendedResourcesHolder</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 不是从不同步。这个值是看你用的啥事务管理，是事务管理器的属性
     * */</span>
    <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// new DefaultTransactionStatus 对象</span>
    <span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>
            definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doBegin</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     *      1. 事务对象没有连接或者连接isSynchronizedWithTransaction 就通过数据源创建连接然后设置给事务对象
     *      2. 将 @Transactional 的信息设置到连接和事务对象中（设置的内容：自动提交、是否只读、隔离级别、超时时间）
     *      3. 是新创建的连接，就使用数据源作为key，将连接绑定是事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
     *      4. 设置 ConnectionHolder 属性 isSynchronizedWithTransaction 为true
     * */</span>
    <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * status.isNewSynchronization() 就设置 TransactionSynchronizationManager：
     *  - 记录事务隔离级别
     *  - 是否只读
     *  - 事务的name
     *  - <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span> 属性初始化，会根据这个属性是否为null判断 是不是 isNewSynchronization
     * */</span>
    <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>doBegin</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1. 事务对象，没有连接或者连接isSynchronizedWithTransaction 就通过数据源创建连接然后设置给事务对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * 2. 将 @Transactional 的信息设置到连接和事务对象中（自动提交、是否只读、隔离级别、超时时间） <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * 3. 是新创建的连接，就使用数据源作为key，将连接绑定是事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * 4. 设置 ConnectionHolder 属性 isSynchronizedWithTransaction 为true
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>
    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 没有连接 或者 连接是事务同步 那就应该创建一个新的连接
         *
         * 可以这么理解，当前方法叫 doBegin ，也就是要给事务对象绑定连接。连接没有那就创建一个在绑定合情合理，
         * 而连接有了，但是连接是事务同步 说明上一个事务还未完成，你还要绑定 那也给你创建一个新的连接，这种属于非法操作了，如果你老老实实用Spring 别搞啥自定义，是不会出现这种情况的
         *
         * 因为 doBegin 是在 startTransaction 的时候会执行，而 startTransaction 之前会先暂停当前线程的事物资源，在开启事物，
         * 而暂停就是
         *      1. 移除事物对象的引用 \`txObject.setConnectionHolder(null);\`
         *      2. 从 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> 移除 ConnectionHolder 存起来。这个ConnectionHolder 其实就是上面置空的属性
         *          Tips: 暂停事务的代码 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doSuspend</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *      记住代码是死的，Spring的事物代码都这么写了，所以基本不可能出现 isSynchronizedWithTransaction 的情况，除非开发人员玩花活
         *
         * 注：在一个Spring事务(单一事务、嵌套事务)
         *      事务暂停：\`txObject.setConnectionHolder(null)\`
         *      事务完成：\` txObject.getConnectionHolder().setSynchronizedWithTransaction(false);\`
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 拿到连接 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSource</span><span class="token punctuation">#</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             *
             * 这里就是动态数据源的原理了 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractRoutingDataSource</span><span class="token punctuation">#</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token class-name">Connection</span> newCon <span class="token operator">=</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Acquired Connection [&quot;</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">&quot;] for JDBC transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 装饰 Connection 并设置给事务对象</span>
            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 表示 这个事务对象的连接 是事务同步
         *
         * 在事物完成时 会将该属性设置为 false
         *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doCleanupAfterCompletion</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *  <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConnectionHolder</span><span class="token punctuation">#</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 就是根据 @Transactional 注解值，给Connection设置 只读属性、隔离级别属性。
         * 返回的是 Connection 之前的隔离饥级别信息
         * */</span>
        <span class="token class-name">Integer</span> previousIsolationLevel <span class="token operator">=</span> <span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 隔离级别</span>
        txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 是否只读</span>
        txObject<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果连接是自动提交，就设置为非自动提交</span>
        <span class="token comment">// Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span>
        <span class="token comment">// so we don&#39;t want to do it unnecessarily (for example if we&#39;ve explicitly</span>
        <span class="token comment">// configured the connection pool to set it already).</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Switching JDBC Connection [&quot;</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">&quot;] to manual commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 设置为非自动提交</span>
            con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 就比如 \`@Transactional(readOnly = true)\` 就设置事务为只读的
         * 如果是只读的就执行sql设置为只读事务  \`SET TRANSACTION READ ONLY\`
         * */</span>
        <span class="token function">prepareTransactionalConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 活动的事务。
         * 在事务完成时才会将该属性设置为false，暂停事务并不会
         * */</span>
        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * \`@Transactional(timeout = -1)\` 不是-1才拿注解值，没有就返回默认值 -1
         * */</span>
        <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置超时时间</span>
            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 是新创建的connect的，就绑定到ThreadLocal中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
         * 缓存的Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataSource,ConnectionHolder</span><span class="token punctuation">&gt;</span></span>。使用DataSource作为key，是因为一个线程可能有来回切换数据源的情况(动态数据源)
         * */</span>
        <span class="token comment">// Bind the connection holder to the thread.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 绑定到事务资源中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 从事务资源 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> 中移除该连接，或者是关闭连接
             *
             * */</span>
            <span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清除 txObject 的连接信息</span>
            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not open JDBC Connection for transaction&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-6-恢复事务" tabindex="-1"><a class="header-anchor" href="#_1-3-1-6-恢复事务" aria-hidden="true">#</a> 1.3.1.6 恢复事务</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">resume</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">SuspendedResourcesHolder</span> resourcesHolder<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourcesHolder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 挂起的资源 比如数据库连接</span>
        <span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> resourcesHolder<span class="token punctuation">.</span>suspendedResources<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>suspendedResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 1️⃣恢复事务资源。
             * 就是重新设置回事务资源ThreadLocal中 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token function">doResume</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> suspendedSynchronizations <span class="token operator">=</span> resourcesHolder<span class="token punctuation">.</span>suspendedSynchronizations<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>suspendedSynchronizations <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setActualTransactionActive</span><span class="token punctuation">(</span>resourcesHolder<span class="token punctuation">.</span>wasActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span>resourcesHolder<span class="token punctuation">.</span>isolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionReadOnly</span><span class="token punctuation">(</span>resourcesHolder<span class="token punctuation">.</span>readOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionName</span><span class="token punctuation">(</span>resourcesHolder<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2️⃣恢复事务同步资源</span>
            <span class="token function">doResumeSynchronization</span><span class="token punctuation">(</span>suspendedSynchronizations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣恢复资源同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doResume</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token class-name">Object</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣恢复行为同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doResumeSynchronization</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionSynchronization</span><span class="token punctuation">&gt;</span></span> suspendedSynchronizations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">initSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronization</span> synchronization <span class="token operator">:</span> suspendedSynchronizations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceUtils</span><span class="token punctuation">.</span><span class="token class-name">ConnectionSynchronization</span><span class="token punctuation">#</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * 就是将其Connection重新设置到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">resources</span></span><span class="token punctuation">}</span> 中
         * */</span>
        synchronization<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 重新注册回 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span>
         * */</span>
        <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span>synchronization<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-3-1-7-创建事务状态" tabindex="-1"><a class="header-anchor" href="#_1-3-1-7-创建事务状态" aria-hidden="true">#</a> 1.3.1.7 创建事务状态</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>
          <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">,</span>
          <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debug<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>

			<span class="token comment">// 事务状态</span>
      <span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>
              definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> newTransaction<span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debug<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 初始化行为同步</span>
      <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> status<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>



<span class="token comment">// 创建事务状态</span>
<span class="token keyword">protected</span> <span class="token class-name">DefaultTransactionStatus</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>
        <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> newTransaction<span class="token punctuation">,</span>
        <span class="token keyword">boolean</span> newSynchronization<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debug<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * newSynchronization 且 不是同步激活状态  就是 真的新同步
     *
     * 同步激活状态：
     *      - true：简单来说就是Java虚拟机栈中存在@Transactional的方法
     *      - false：暂停当前事务、完成当前事务(rollback或者commit)
     *
     * 结论：当前线程在 TransactionSynchronizationManager 没有记录信息， actualNewSynchronization 就是true
     * */</span>
    <span class="token keyword">boolean</span> actualNewSynchronization <span class="token operator">=</span> newSynchronization <span class="token operator">&amp;&amp;</span>
            <span class="token operator">!</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">(</span>
            transaction<span class="token punctuation">,</span> newTransaction<span class="token punctuation">,</span> actualNewSynchronization<span class="token punctuation">,</span>
            definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> debug<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 适当地初始化事务同步。
     * Initialize transaction synchronization as appropriate.
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">,</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 是新的同步，才记录这些信息（注：空事务也算的）
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isNewSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 真的活动的事务。就是得有事务，且事务是新的才是true
             * */</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setActualTransactionActive</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">hasTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 记录事务隔离级别</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span>
                    definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">?</span>
                            definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 是否只读</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionReadOnly</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 事务的name</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">setCurrentTransactionName</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 同步属性初始化，会根据这个属性是否为null判断 是不是 isNewSynchronization</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">initSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-2-创建事务信息" tabindex="-1"><a class="header-anchor" href="#_1-3-2-创建事务信息" aria-hidden="true">#</a> 1.3.2 创建事务信息</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TransactionAspectSupport</span><span class="token operator">:</span>

<span class="token keyword">protected</span> <span class="token class-name">TransactionInfo</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PlatformTransactionManager</span> tm<span class="token punctuation">,</span>
                                                 <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionAttribute</span> txAttr<span class="token punctuation">,</span> <span class="token class-name">String</span> joinpointIdentification<span class="token punctuation">,</span>
                                                 <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">TransactionInfo</span> txInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// We need a transaction for this method...</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Getting transaction for [&quot;</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 设置事务状态</span>
        <span class="token comment">// The transaction manager will flag an error if an incompatible tx already exists.</span>
        txInfo<span class="token punctuation">.</span><span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// The TransactionInfo.hasTransaction() method will return false. We created it only</span>
        <span class="token comment">// to preserve the integrity of the ThreadLocal stack maintained in this class.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No need to create transaction for [&quot;</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>
                    <span class="token string">&quot;]: This method is not transactional.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 绑定到这个属性上 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token field">transactionInfoHolder</span></span><span class="token punctuation">}</span>
     * 并且会记录原来ThreadLocal的值，当事务结束了要恢复回去 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">#</span><span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span><span class="token class-name">TransactionInfo</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * */</span>
    <span class="token comment">// We always bind the TransactionInfo to the thread, even if we didn&#39;t create</span>
    <span class="token comment">// a new transaction here. This guarantees that the TransactionInfo stack</span>
    <span class="token comment">// will be managed correctly even if no transaction was created by this aspect.</span>
    txInfo<span class="token punctuation">.</span><span class="token function">bindToThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> txInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-出现异常的处理" tabindex="-1"><a class="header-anchor" href="#_1-4-出现异常的处理" aria-hidden="true">#</a> 1.4 出现异常的处理</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionInfo</span> txInfo<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Completing transaction for [&quot;</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                    <span class="token string">&quot;] after exception: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 异常是需要回滚 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleBasedTransactionAttribute</span><span class="token punctuation">#</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         *
         * - 使用 @Transactional 配置的rollback进行匹配，匹配就返回结果
         * - 没有匹配rollback，就判断异常是不是  RuntimeException 、Error 是就回滚
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span>transactionAttribute <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span>transactionAttribute<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 1️⃣回滚
                 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                 * */</span>
                txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by rollback exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by rollback exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 2️⃣提交事务
             * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token comment">// We don&#39;t roll back on this exception.</span>
            <span class="token comment">// Will still roll back if TransactionStatus.isRollbackOnly() is true.</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Application exception overridden by commit exception&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣回滚</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">DefaultTransactionStatus</span> defStatus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">)</span> status<span class="token punctuation">;</span>
    <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processRollback</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">,</span> <span class="token keyword">boolean</span> unexpected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> unexpectedRollback <span class="token operator">=</span> unexpected<span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * 回调 TransactionSynchronization
                 * 就是遍历 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">#</span><span class="token field">synchronizations</span></span><span class="token punctuation">}</span> 属性
				 * 完成事务前回调
                 * */</span>
                <span class="token function">triggerBeforeCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Rolling back transaction to savepoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token doc-comment comment">/**
                     * 回滚到最前的保存点
                     * */</span>
                    status<span class="token punctuation">.</span><span class="token function">rollbackToHeldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Initiating transaction rollback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token doc-comment comment">/**
                     * 回滚
                     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">#</span><span class="token function">doRollback</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
                     * */</span>
                    <span class="token function">doRollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Participating in larger transaction</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">hasTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isLocalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isGlobalRollbackOnParticipationFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Participating transaction failed - marking existing transaction as rollback-only&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token function">doSetRollbackOnly</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Participating transaction failed - letting transaction originator decide on rollback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Should roll back transaction but cannot - no transaction available&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// Unexpected rollback only matters here if we&#39;re asked to fail early</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFailEarlyOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        unexpectedRollback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回调 TransactionSynchronization 完成事务后回调</span>
                <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_UNKNOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 回调 TransactionSynchronization  完成事务后回调</span>
            <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_ROLLED_BACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Raise UnexpectedRollbackException if we had a global rollback-only marker</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>unexpectedRollback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnexpectedRollbackException</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;Transaction rolled back because it has been marked as rollback-only&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 恢复上个事务的资源</span>
            <span class="token function">cleanupAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣提交</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token operator">:</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">DefaultTransactionStatus</span> defStatus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">)</span> status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isLocalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Transactional code has requested rollback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 回滚</span>
        <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldCommitOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> defStatus<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 回滚</span>
        <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// commit</span>
    <span class="token function">processCommit</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


 <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processCommit</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> beforeCompletionInvoked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> unexpectedRollback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token function">prepareForCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回调 TransactionSynchronization 提交前回调</span>
                <span class="token function">triggerBeforeCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回调 TransactionSynchronization 完成前回调</span>
                <span class="token function">triggerBeforeCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beforeCompletionInvoked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Releasing transaction savepoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    unexpectedRollback <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    status<span class="token punctuation">.</span><span class="token function">releaseHeldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Initiating transaction commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    unexpectedRollback <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 提交事务</span>
                    <span class="token function">doCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFailEarlyOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    unexpectedRollback <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span>
                <span class="token comment">// marker but still didn&#39;t get a corresponding exception from commit.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>unexpectedRollback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnexpectedRollbackException</span><span class="token punctuation">(</span>
                            <span class="token string">&quot;Transaction silently rolled back because it has been marked as rollback-only&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnexpectedRollbackException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// can only be caused by doCommit</span>
                <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_ROLLED_BACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// can only be caused by doCommit</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRollbackOnCommitFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">doRollbackOnCommitException</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_UNKNOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beforeCompletionInvoked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">triggerBeforeCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">doRollbackOnCommitException</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Trigger afterCommit callbacks, with an exception thrown there</span>
            <span class="token comment">// propagated to callers but the transaction still considered as committed.</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回调 TransactionSynchronization 提交后回调</span>
                <span class="token function">triggerAfterCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回调 TransactionSynchronization</span>
                <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_COMMITTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 就是恢复暂停的事务资源</span>
            <span class="token function">cleanupAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-清空事务信息" tabindex="-1"><a class="header-anchor" href="#_1-5-清空事务信息" aria-hidden="true">#</a> 1.5 清空事务信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TransactionAspectSupport</span><span class="token operator">:</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionInfo</span> txInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        txInfo<span class="token punctuation">.</span><span class="token function">restoreThreadLocalStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">TransactionInfo</span><span class="token operator">:</span>

  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">restoreThreadLocalStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Use stack to restore old transaction TransactionInfo.</span>
            <span class="token comment">// Will be null if none was set.</span>
            transactionInfoHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oldTransactionInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-提交事务" tabindex="-1"><a class="header-anchor" href="#_1-6-提交事务" aria-hidden="true">#</a> 1.6 提交事务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionInfo</span> txInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>txInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Completing transaction for [&quot;</span> <span class="token operator">+</span> txInfo<span class="token punctuation">.</span><span class="token function">getJoinpointIdentification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token punctuation">#</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
         * */</span>
        txInfo<span class="token punctuation">.</span><span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">.</span><span class="token function">getTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractPlatformTransactionManager</span><span class="token operator">:</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Transaction is already completed - do not call commit or rollback more than once per transaction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">DefaultTransactionStatus</span> defStatus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span><span class="token punctuation">)</span> status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isLocalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Transactional code has requested rollback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 回滚</span>
        <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldCommitOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> defStatus<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defStatus<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Global transaction is marked as rollback-only but transactional code requested commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 回滚</span>
        <span class="token function">processRollback</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// commit</span>
    <span class="token function">processCommit</span><span class="token punctuation">(</span>defStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


 <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processCommit</span><span class="token punctuation">(</span><span class="token class-name">DefaultTransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> beforeCompletionInvoked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> unexpectedRollback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token function">prepareForCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回调 TransactionSynchronization 提交前回调</span>
                <span class="token function">triggerBeforeCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回调 TransactionSynchronization 完成前回调</span>
                <span class="token function">triggerBeforeCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                beforeCompletionInvoked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Releasing transaction savepoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    unexpectedRollback <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    status<span class="token punctuation">.</span><span class="token function">releaseHeldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Initiating transaction commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    unexpectedRollback <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 提交事务</span>
                    <span class="token function">doCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFailEarlyOnGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    unexpectedRollback <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">isGlobalRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span>
                <span class="token comment">// marker but still didn&#39;t get a corresponding exception from commit.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>unexpectedRollback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnexpectedRollbackException</span><span class="token punctuation">(</span>
                            <span class="token string">&quot;Transaction silently rolled back because it has been marked as rollback-only&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnexpectedRollbackException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// can only be caused by doCommit</span>
                <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_ROLLED_BACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// can only be caused by doCommit</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRollbackOnCommitFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">doRollbackOnCommitException</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_UNKNOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beforeCompletionInvoked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">triggerBeforeCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">doRollbackOnCommitException</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Trigger afterCommit callbacks, with an exception thrown there</span>
            <span class="token comment">// propagated to callers but the transaction still considered as committed.</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回调 TransactionSynchronization 提交后回调</span>
                <span class="token function">triggerAfterCommit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 回调 TransactionSynchronization</span>
                <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">TransactionSynchronization</span><span class="token punctuation">.</span><span class="token constant">STATUS_COMMITTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 就是恢复暂停的事务资源</span>
            <span class="token function">cleanupAfterCompletion</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionaleventlistenerfactory" tabindex="-1"><a class="header-anchor" href="#transactionaleventlistenerfactory" aria-hidden="true">#</a> TransactionalEventListenerFactory</h3><p>事务事件监听</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/01/02/7LiYWx.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p><strong>@EnableTransactionManagement导入ProxyTransactionManagementConfiguration：</strong></p><ul><li>首先，<code>@EnableTransactionManagement</code>会导入<code>ProxyTransactionManagementConfiguration</code>。</li><li><code>ProxyTransactionManagementConfiguration</code>的父类是<code>AbstractTransactionManagementConfiguration</code>，它使用<code>@Bean</code>注入<code>TransactionalEventListenerFactory</code>。</li></ul></li><li><p><strong>TransactionalEventListenerFactory解析@TransactionalEventListener：</strong></p><ul><li><code>TransactionalEventListenerFactory</code>用于解析<code>@TransactionalEventListener</code>，将其转换为<code>TransactionalApplicationListenerMethodAdapter</code>并注册到事件广播器中。</li></ul></li><li><p><strong>TransactionalApplicationListenerMethodAdapter的事件接收逻辑：</strong></p><ul><li><code>TransactionalApplicationListenerMethodAdapter#onApplicationEvent(ApplicationEvent)</code>方法用于接收事件。</li><li>如果是活动的事务且实际激活的事务不为空，会注册事务同步资源，这在事务完成时（rollback或commit）时会调用其listener和callbacks，实现延时事件的发布。</li><li>要满足这个条件，必须在事务方法内发布事件，否则条件不成立。</li><li>否则，如果<code>annotation.fallbackExecution()</code>为true，则调用<code>processEvent(event)</code>处理事件，即回调<code>@TransactionalEventListener</code>标注的方法。</li><li>如果都不满足，则不执行任何操作。</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TransactionalApplicationListenerMethodAdapter</span><span class="token operator">:</span> 

<span class="token doc-comment comment">/**
 * 触发条件使用事件广播器发布事件。
 * 要想收到事务行为的事件：得在事务方法内使用事件广播器发布事件
 * <span class="token keyword">@param</span> <span class="token parameter">event</span> the event to respond to
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 是活动的事务(只要进入事务方法就是true)  且 实际激活的事务(必须不是空事务)
     * */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isActualTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注册事务同步资源，在事务完成时(rollback或者commit)会调用其 listener、callbacks</span>
        <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">TransactionalApplicationListenerSynchronization</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotation<span class="token punctuation">.</span><span class="token function">fallbackExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 兜底执行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotation<span class="token punctuation">.</span><span class="token function">phase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionPhase</span><span class="token punctuation">.</span><span class="token constant">AFTER_ROLLBACK</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Processing &quot;</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">&quot; as a fallback execution on AFTER_ROLLBACK phase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">processEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// No transactional event execution at all</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;No transaction is active - skipping &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TransactionalApplicationListenerSynchronization</span><span class="token operator">:</span>

<span class="token keyword">class</span> <span class="token class-name">TransactionalApplicationListenerSynchronization</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">implements</span> <span class="token class-name">TransactionSynchronization</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">E</span> event<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionalApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionalApplicationListener<span class="token punctuation">.</span>SynchronizationCallback</span><span class="token punctuation">&gt;</span></span> callbacks<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">TransactionalApplicationListenerSynchronization</span><span class="token punctuation">(</span><span class="token class-name">E</span> event<span class="token punctuation">,</span> <span class="token class-name">TransactionalApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">,</span>
                                                           <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionalApplicationListener<span class="token punctuation">.</span>SynchronizationCallback</span><span class="token punctuation">&gt;</span></span> callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> callbacks<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listener<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> readOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listener<span class="token punctuation">.</span><span class="token function">getTransactionPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionPhase</span><span class="token punctuation">.</span><span class="token constant">BEFORE_COMMIT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">processEventWithCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransactionPhase</span> phase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listener<span class="token punctuation">.</span><span class="token function">getTransactionPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">==</span> <span class="token class-name">TransactionPhase</span><span class="token punctuation">.</span><span class="token constant">AFTER_COMMIT</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">==</span> <span class="token constant">STATUS_COMMITTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">processEventWithCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">==</span> <span class="token class-name">TransactionPhase</span><span class="token punctuation">.</span><span class="token constant">AFTER_ROLLBACK</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">==</span> <span class="token constant">STATUS_ROLLED_BACK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">processEventWithCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">==</span> <span class="token class-name">TransactionPhase</span><span class="token punctuation">.</span><span class="token constant">AFTER_COMPLETION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">processEventWithCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processEventWithCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 回调 SynchronizationCallback 前置方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">-&gt;</span> callback<span class="token punctuation">.</span><span class="token function">preProcessEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 回调监听器
             * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ApplicationListenerMethodAdapter</span><span class="token punctuation">#</span><span class="token function">processEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
             * */</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>listener<span class="token punctuation">.</span><span class="token function">processEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回调 SynchronizationCallback 后置方法</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">-&gt;</span> callback<span class="token punctuation">.</span><span class="token function">postProcessEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 回调 SynchronizationCallback 后置方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">-&gt;</span> callback<span class="token punctuation">.</span><span class="token function">postProcessEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,120),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","SpringTransaction.html.vue"]]);export{k as default};
