import{_ as t,V as p,W as c,X as s,Y as n,Z as e,$ as o,F as l}from"./framework-8edddef6.js";const i={},r=s("h1",{id:"protobuf",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#protobuf","aria-hidden":"true"},"#"),n(" Protobuf")],-1),d={href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"},u=s("h2",{id:"介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),n(" 介绍")],-1),m={href:"https://developers.google.com/protocol-buffers/docs/gotutorial",target:"_blank",rel:"noopener noreferrer"},v=o(`<p><code>Protocol Buffers</code>是谷歌2008年开源的语言无关，协议无关，可扩展的结构化数据序列化机制，在解包封包的时候更加的快速，多用于RPC领域通信相关，可以定义数据的结构化方式，然后可以使用特殊生成的源代码轻松地将结构化数据写入各种数据流和从各种数据流中读取结构化数据，并使用于各种语言，关于<code>Protocol Buffers</code>下文统称为<code>protobuf</code>。</p><p><code>protobuf</code>算是比较流行，尤其是go这一块，gRPC就将其作为协议传输的序列化机制。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>首先从一个例子来看<code>protobuf</code>文件大体长什么样，总体来说它的语法非常简单，十几分钟就能上手。下面是一个名为<code>search.proto</code>文件的例子，<code>protobuf</code>的文件后缀就是<code>.proto</code>。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">SearchResult</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> data <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">service</span> <span class="token class-name">SearchService</span> <span class="token punctuation">{</span>
	<span class="token keyword">rpc</span> <span class="token function">Search</span><span class="token punctuation">(</span><span class="token class-name">SearchRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token class-name">SearchResult</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一行<code>syntax = &quot;proto3&quot;;</code> 表示使用<code>proto3</code>的语法，默认使用<code>proto3</code>的语法。</li><li><code>message</code>声明的方式类似于结构体，是<code>proto</code>中的基本结构</li><li><code>SearchRequest</code>中定义了三个字段，每个字段都会有名称和类型</li><li><code>service</code>中定义了一个服务，一个服务中包含一个或多个rpc接口</li><li>rpc接口必须要有且只能有一个参数和返回值，它们的类型必须是<code>message</code>，不能是基本类型。</li></ul><p>另外需要注意的是，<code>proto</code>文件中的每一行末尾必须要有分号结尾。</p><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><p>注释风格跟go完全一致。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/* 注释
 * 注释 */</span>
<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//注释</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><p>类型修饰只能出现在<code>message</code>中，不能单独出现。</p><h4 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h4><table><thead><tr><th style="text-align:left;">proto Type</th><th style="text-align:left;">Go Type</th></tr></thead><tbody><tr><td style="text-align:left;">double</td><td style="text-align:left;">float64</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">float32</td></tr><tr><td style="text-align:left;">int32</td><td style="text-align:left;">int32</td></tr><tr><td style="text-align:left;">int64</td><td style="text-align:left;">int64</td></tr><tr><td style="text-align:left;">uint32</td><td style="text-align:left;">uint32</td></tr><tr><td style="text-align:left;">uint64</td><td style="text-align:left;">uint64</td></tr><tr><td style="text-align:left;">sint32</td><td style="text-align:left;">int32</td></tr><tr><td style="text-align:left;">sint64</td><td style="text-align:left;">int64</td></tr><tr><td style="text-align:left;">fixed32</td><td style="text-align:left;">uint32</td></tr><tr><td style="text-align:left;">fixed64</td><td style="text-align:left;">uint64</td></tr><tr><td style="text-align:left;">sfixed32</td><td style="text-align:left;">int32</td></tr><tr><td style="text-align:left;">sfixed64</td><td style="text-align:left;">int64</td></tr><tr><td style="text-align:left;">bool</td><td style="text-align:left;">bool</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">string</td></tr><tr><td style="text-align:left;">bytes</td><td style="text-align:left;">[]byte</td></tr></tbody></table><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4><p>在基本类型前面加上<code>repeated</code>修饰符表示这是一个数组类型，对应go中的切片。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
  <span class="token keyword">repeated</span> <span class="token builtin">string</span> employee <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h4><p>在protobuf中定义map类型格式如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map&lt;key_type, value_type&gt; map_field = N;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>key_type</code>必须是数字或者字符串，<code>value_type</code>没有类型限制，看一个例子</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">&gt;</span></span> cards <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字段" tabindex="-1"><a class="header-anchor" href="#字段" aria-hidden="true">#</a> 字段</h3><p>事实上，proto并不是传统的键值类型，在声明的<code>proto</code>文件中是不会出现具体的数据的，每一次字段的<code>=</code>后面跟的应该是当前<code>message</code>中的唯一编号，这些编号用于在二进制消息体中识别和定义这些字段。编号从1开始，1-15的编号会占用1个字节，16-2047会占用两个字节，因此尽可能的将频繁出现的字段赋予1-15的编号以节省空间，并且应该留出一些空间以留给后续可能会频繁出现的字段。</p><p>一个<code>message</code>中的字段应当遵循以下规则</p><ul><li><p><code>singular</code>: 默认是该种类型的字段，在一个结构良好的<code>message</code>中，有且只能由0个或者1个该字段，即不能重复存在同一个字段。如下声明便会报错。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//字段重复</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>optional</code>: 与<code>singular</code>类似，只是可以显示的检查字段值是否被设置，可能会有以下两种情况</p><ul><li><code>set</code>: 将会被序列化</li><li><code>unset</code>: 不会被序列化</li></ul></li><li><p><code>repeated</code>: 此种类型的字段可以出现0次或多次，将会按照顺序保留重复值（说白了其实就是数组，可以允许同一个类型的值多次重复出现，并且按照出现的顺序保留，就是索引）</p></li><li><p><code>map</code>: 键值对类型的字段，声明方式如下</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">int32</span><span class="token punctuation">&gt;</span></span> config <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="保留字段" tabindex="-1"><a class="header-anchor" href="#保留字段" aria-hidden="true">#</a> 保留字段</h3><p><code>reserve</code>关键字可以声明保留字段，保留字段编号声明后，将无法再被用作其他字段的编号和名称，编译时也会发生错误。谷歌官方给出的回答是：，如果一个<code>proto</code>文件在新版本中删除了一些编号，那么在未来其他用户可能会重用这些已被删除的编号，但是倘若换回旧版本的编号的话就会造成字段对应的编号不一致从而产生错误，保留字段就可以在编译期起到这么一个提醒作用，提醒你不能使用这个保留使用的字段，否则编译将会不通过。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int32</span><span class="token punctuation">&gt;</span></span> config <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">repeated</span> <span class="token builtin">string</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">reserved</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">//声明具体名称的字段为保留字段</span>
  <span class="token keyword">reserved</span> <span class="token number">1</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//声明一个编号序列为保留字段</span>
  <span class="token keyword">reserved</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//声明</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此一来，此文件将不会通过编译。</p><h3 id="弃用字段" tabindex="-1"><a class="header-anchor" href="#弃用字段" aria-hidden="true">#</a> 弃用字段</h3><p>如果一个字段被弃用，可以如下书写。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Body</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token annotation">deprecated</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h3><p>可以声明枚举常量并将其当作字段的类型来使用，需要注意的是，枚举项的第一个元素必须是零，因为枚举项的默认值就是第一个元素。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
  GET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  POST <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  PUT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  DELETE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int32</span><span class="token punctuation">&gt;</span></span> config <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">repeated</span> <span class="token builtin">string</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token positional-class-name class-name">Type</span> type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当枚举项内部存在相同值的枚举项时，可以使用枚举别名</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
  <span class="token keyword">option</span> allow_alias <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//需要开启允许使用别名的配置项</span>
  GET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  GET_ALIAS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//GET枚举项的别名</span>
  POST <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  PUT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  DELETE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">SearchRequest</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int32</span><span class="token punctuation">&gt;</span></span> config <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">repeated</span> <span class="token builtin">string</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token positional-class-name class-name">Type</span> type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套消息" tabindex="-1"><a class="header-anchor" href="#嵌套消息" aria-hidden="true">#</a> 嵌套消息</h3><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>                  <span class="token comment">// Level 0</span>
  <span class="token keyword">message</span> <span class="token class-name">MiddleAA</span> <span class="token punctuation">{</span>  <span class="token comment">// Level 1</span>
    <span class="token keyword">message</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>   <span class="token comment">// Level 2</span>
      <span class="token builtin">int64</span> ival <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token builtin">bool</span>  booly <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">message</span> <span class="token class-name">MiddleBB</span> <span class="token punctuation">{</span>  <span class="token comment">// Level 1</span>
    <span class="token keyword">message</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>   <span class="token comment">// Level 2</span>
      <span class="token builtin">int32</span> ival <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token builtin">bool</span>  booly <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>message</code>里面可以嵌套声明<code>message</code>，就跟嵌套结构体一样。</p><h3 id="package" tabindex="-1"><a class="header-anchor" href="#package" aria-hidden="true">#</a> Package</h3><p>您可以向<code>protobuf</code>文件添加一个可选的包修饰符，以防止协议消息类型之间的名称冲突。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">package</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
<span class="token keyword">message</span> <span class="token class-name">Open</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，您可以在定义消息类型的字段时使用包名:</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token positional-class-name class-name">foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>Open</span> open <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> Import</h3><p>导入可以让多个<code>protobuf</code>文件共享定义，它的语法如下，在导入的时候不能省略文件拓展名。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;a/b/c.proto&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在导入的时候都是使用的相对路径，这个相对路径不是指的导入文件与被导入文件的相对路径，而是取决于<code>protoc</code>编译器生成代码时所指定的扫描路径，假设有如下的文件结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pb_learn
│  common.proto
│
├─monster
│      monster.proto
│
└─player
        health.proto
        player.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们只需要生成<code>player</code>目录部分的代码，并且在扫描路径时仅指定了<code>player</code>目录，那么<code>health.proto</code>与<code>player.proto</code>之间的相互导入可以直接写单文件名，比如<code>player.proto</code>导入<code>health.proto</code>。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;health.proto&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>倘若此时<code>player.proto</code>导入了<code>common.proto</code>或<code>monster</code>目录下的文件，那么就会编译失败，所以下面这种写法是完全错误的，因为编译器没法找到这些文件。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;../common.proto&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 错误写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>顺带一提，<code>..</code>，<code>.</code>这些符号是不允许出现在导入路径中的。</p></div><p>假设在编译时指定了<code>pb_learn</code>为扫描路径，那么就可以通过相对路径来导入其它目录的文件，实际导入的路径就是该文件的绝对地址相对于<code>pb_learn</code>的相对地址，看下面<code>player.proto</code>导入其它文件的例子。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;common.proto&quot;</span><span class="token punctuation">;</span>
imrpot <span class="token string">&quot;monster/monster.proto&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;player/health.proto&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即便是处于同一目录下的<code>health.proto</code>此刻也必须要使用相对路径。所以在一个项目中，我们一般会单独创建一个文件夹来存放所有的<code>protobuf</code>文件，并在编译时指定其作为扫描路径，而该目录下的所有导入行为也是基于它的相对路径。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你使用的是goland编辑器，对于你自己创建的<code>protobuf</code>目录，默认是没法解析的，也就会出现爆红的情况，想要goland识别的话就得手动设置扫描路径，其原理跟上面讲的完全一样，设置方法如下，打开如下设置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>File | Settings | Languages &amp; Frameworks | Protocol Buffers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>Import Paths</code>中手动添加扫描路径，这个扫描路径应该跟你编译时指定的路径是一致的。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202312191556376.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> Any</h3><p><code>Any</code> 类型允许您将消息作为嵌入类型使用，而不需要它们的<code> proto</code> 定义，我们可以直接导入谷歌定义的类型，它是自带的，不需要手动编写。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/any.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">ErrorStatus</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>Any</span> details <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63),k={href:"https://github.com/golang/protobuf/tree/master/ptypes",target:"_blank",rel:"noopener noreferrer"},b=o(`<ul><li>基本类型的封装</li><li>时间类型</li><li>Duration类型</li></ul><p>有关它们的<code>protobuf</code>定义应该在<code>protoc</code>编译器的<code>inlucde</code>目录下。</p><h3 id="oneof" tabindex="-1"><a class="header-anchor" href="#oneof" aria-hidden="true">#</a> OneOf</h3><p>这里的官方文档给出的解释实在是太繁琐了，说人话其实就是表示一个字段在传输时会有多种可能的类型，但最终只可能会有一个类型被使用，它的内部不允许出现<code>repeated</code>修饰的字段，这就好像c语言中的<code>union</code>一样。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Stock</span> <span class="token punctuation">{</span>
    <span class="token comment">// Stock-specific data</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">Currency</span> <span class="token punctuation">{</span>
    <span class="token comment">// Currency-specific data</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">ChangeNotification</span> <span class="token punctuation">{</span>
  <span class="token builtin">int32</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">oneof</span> instrument <span class="token punctuation">{</span>
    <span class="token positional-class-name class-name">Stock</span> stock <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token positional-class-name class-name">Currency</span> currency <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h3><p><code>service</code>关键字可以定义一个RPC服务，一个RPC服务包含若干个rpc接口，接口又分为一元接口和流式接口。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Body</span> <span class="token punctuation">{</span>
	<span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">service</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
	<span class="token keyword">rpc</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token class-name">Body</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token class-name">Body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而流式接口又分为单向流式和双向流式，通常用<code>stream</code>关键字来修饰，看下面的一个例子。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Body</span> <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">service</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 客户端流式</span>
  <span class="token keyword">rpc</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">Body</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token class-name">Body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 服务端流式</span>
  <span class="token keyword">rpc</span> <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token class-name">Body</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">Body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 双向流式</span>
  <span class="token keyword">rpc</span> <span class="token function">DoSomething2</span><span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">Body</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">Body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所谓流式就是就是在一个连接中长期的相互发送数据，而不再像一元接口那样简单的一问一答。</p><h3 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> Empty</h3><p>empty实际上是一个空的<code>message</code>，对应go中的空结构体，它很少用于修饰字段，主要是用来表示某个rpc接口不需要参数或者没有返回值。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/empty.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">service</span> <span class="token class-name">EmptyService</span> <span class="token punctuation">{</span>
  <span class="token keyword">rpc</span> <span class="token function">Do</span><span class="token punctuation">(</span><span class="token class-name">google.protobuf.Empty</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token class-name">google.protobuf.Empty</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> Option</h3><p>option通常用于控制<code>protobuf</code>的一些行为。比如控制go语言源代码生成的包，就可以如下声明。</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">&quot;github/jack/sample/pb_learn;pb_learn&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分号前面的是代码生成后其它源文件的导入路径，分号后面的就是对应生成文件的包名。</p><p>它可以做一些一些优化，有以下几个可用的值，不可重复声明。</p><ul><li><code>SPEED</code>，优化程度最高，生成的代码体积最大，默认是这个。</li><li><code>CODE_SIZE</code>，会减少代码生成的体积，但是会依赖反射进行序列化</li><li><code>LIFE_RUNEIMTE</code>，代码体积最小，但是会缺少一些特性。</li></ul><p>下面是一个使用案例</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">option</span> optimize_for <span class="token operator">=</span> SPEED<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除此之外，option还可以给<code>message</code>和<code>enum</code>添加一些元信息，利用反射可以获取这些信息，这在进行参数校验的时候尤其有用。</p><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><p>编译也就是代码生成，上面只是定义了<code>protobuf</code>文件，实际使用时需要将其转化为某种特定的语言源代码才能使用，我们通过<code>protoc</code>编译器来完成此时，它支持多种语言。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202312191617613.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3>`,27),g={href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"},h=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>protoc-25.1-win64
│  readme.txt
│
├─bin
│      protoc.exe
│
└─include
    └─google
        └─protobuf
            │  any.proto
            │  api.proto
            │  descriptor.proto
            │  duration.proto
            │  empty.proto
            │  field_mask.proto
            │  source_context.proto
            │  struct.proto
            │  timestamp.proto
            │  type.proto
            │  wrappers.proto
            │
            └─compiler
                    plugin.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载好后将bin目录添加到环境变量中，以便可以使用<code>protoc</code>命令，完成后看下版本，能正常输出就说明安装成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--version</span>
libprotoc <span class="token number">25.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下载下来的编译器默认不支持go语言，因为go语言代码生成是单独的一个可执行文件，其它语言全揉一块了，所以再安装go语言插件，用于将<code>protocbuf</code>定义翻译成go语言源代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token function">install</span> google.golang.org/protobuf/cmd/protoc-gen-go@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假如还需要生成gRPC服务代码，再安装如下插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go <span class="token function">install</span> google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装后查看其版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc-gen-go-grpc <span class="token parameter variable">--version</span>
protoc-gen-go-grpc <span class="token number">1.3</span>.0

$ protoc-gen-go <span class="token parameter variable">--version</span>
protoc-gen-go.exe v1.31.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些插件也是单独的二进制文件，不过只能通过<code>protoc</code>来调用，不能单独执行。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(this program should be run by protoc, not directly)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除此之外还有许多其它插件，比如生成<code>openapi</code>接口文档的插件等等，感兴趣可以自己去搜索。</p><h3 id="生成" tabindex="-1"><a class="header-anchor" href="#生成" aria-hidden="true">#</a> 生成</h3><p>还是拿之前的例子来讲，结构如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pb_learn
│  common.proto
│
├─monster
│      monster.proto
│
└─player
        health.proto
        player.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于生成代码来说，总共要指定三个参数</p><ol><li>扫描路径，指示编译器从哪里寻找<code>protobuf</code>文件以及如何解析导入路径</li><li>生成路径，编译好后的文件放在哪里</li><li>目标文件，指定哪些目标文件要被编译。</li></ol><p>在开始之前要确保<code>protobuf</code>文件中的<code>go_package</code>设置正确，通过<code>protoc -h</code>来查看其支持的参数，最常用的是<code>-I</code>或者<code>--proto_path</code>，可以多次使用来指定多个扫描路径，例如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>./pb_learn <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>./third_party
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>仅仅只是指定扫描路径是不够的，还需要指定生成路径以及目标<code>protobuf</code>文件，这里是生成<code>go</code>文件所以使用<code>--go_out</code>参数，由之前下载的<code>protoc-gen-go</code>插件支持。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> pb_learn

$ protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>. <span class="token parameter variable">--go_out</span><span class="token operator">=</span>. common.proto

$ <span class="token function">ls</span>
common.pb.go  common.proto  monster/  player/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--go_out</code>的参数就是指定的生成路径，<code>.</code>表示的就是当前路径，<code>common.proto</code>就是指定要编译的文件。如果要生成<code>grpc</code>代码（前提是装了grpc插件），可以加上<code>--go-grpc_out</code>参数（如果<code>protobuf</code>文件中没有定义<code>service</code>，就不会生成对应文件）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>. <span class="token parameter variable">--go_out</span><span class="token operator">=</span>. --go-grpc_out<span class="token operator">=</span>. common.proto

$ <span class="token function">ls</span>
common.pb.go  common.proto  common_grpc.pb.go  monster/  player/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>common.pb.go</code>是生成的<code>protobuf</code>类型定义，<code>common_grpc.pb.go</code>是生成的<code>gRPC</code>代码，它基于前者，如果没有生成对应语言的定义，也就没法生成<code>gRPC</code>代码。</p><p>如果想要将该目录下的所有的<code>protobuf</code>文件都编译，可以使用通配符<code>*</code>，比如\`\`</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>. <span class="token parameter variable">--go_out</span><span class="token operator">=</span><span class="token punctuation">..</span> common.proto --go-grpc_out<span class="token operator">=</span>. ./*.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要包含所有的文件，可以使用<code>**</code>通配符，比如<code>./**/*.proto</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>. <span class="token parameter variable">--go_out</span><span class="token operator">=</span><span class="token punctuation">..</span> common.proto --go-grpc_out<span class="token operator">=</span>. ./*.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是，这种方法仅适用于支持这种通配符的shell，比如在windows下，cmd或powershell都不支持这种写法</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>D&gt; protoc <span class="token operator">--</span>proto_path=<span class="token punctuation">.</span> <span class="token operator">--</span>go_out=<span class="token punctuation">.</span><span class="token punctuation">.</span> common<span class="token punctuation">.</span>proto <span class="token operator">--</span>go-grpc_out=<span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>proto
Invalid file name pattern or missing input file <span class="token string">&quot;./**/*.proto&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>幸运的是gitbash支持linux许多命令，也可以让windows支持这种语法。为了避免每次都要写重复的命令，可以将其放在<code>makefile</code>里面</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> all

<span class="token target symbol">proto_gen</span><span class="token punctuation">:</span>
	protoc --proto_path<span class="token operator">=</span>. \\
		   --go_out<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative<span class="token punctuation">:</span>. \\
		   --go-grpc_out<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative<span class="token punctuation">:</span>. \\
		   ./**/*.proto ./*.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以注意到多了一个<code>paths=source_relative:.</code>，这是在设置文件生成的路径模式，总共有以下几个可选项</p><ul><li><code>paths=import</code>，默认就是这个，文件会生成在<code>import</code>所指定的目录下，它也可以是一个模块路径。比如现有一个文件<code>protos/buzz.proto</code>，指定<code>paths=example.com/project/protos/fizz</code>，那么最终会生成<code>example.com/project/protos/fizz/buzz.pb.go</code>。</li><li><code>module=$PREFIX</code>，在生成时，会删除路径前缀。在上面的例子中，如果指定前缀<code>example.com/project</code>，那么最终会生成<code>protos/fizz/buzz.pb.go</code>，这个模式主要是用于将其直接生成在模块中（感觉好像没什么区别）。</li><li><code>paths=source_relative</code>，生成的文件会在指定目录中保持与<code>protobuf</code>文件相同的相对结构。</li></ul><p>冒号<code>:</code>间隔后就是指定的生成路径。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|  common.proto
|  common.pb.go
│
├─monster
│      monster.pb.go
│      monster.proto
│
└─player
        health.pb.go
        health.proto
        health_grpc.pb.go
        player.pb.go
        player.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><p>通过<code>options</code>可以对<code>enum</code>和<code>messagee</code>进行拓展，先导入<code>&quot;google/protobuf/descriptor.proto&quot;</code></p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/descriptor.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">extend</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>EnumValueOptions <span class="token punctuation">{</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> string_name <span class="token operator">=</span> <span class="token number">123456789</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">Integer</span> <span class="token punctuation">{</span>
  INT64 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span>string_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;int_64&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这相当于给该枚举值加了一个元信息。对于<code>message</code>也是同理，如下</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/descriptor.proto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">extend</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>MessageOptions <span class="token punctuation">{</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> my_option <span class="token operator">=</span> <span class="token number">51234</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">MyMessage</span> <span class="token punctuation">{</span>
  <span class="token keyword">option</span> <span class="token punctuation">(</span>my_option<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就相当是有关于<code>protobuf</code>的反射，在生成代码后可以通过<code>Descriptor</code>来进行访问，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	message <span class="token operator">:=</span> pb_learn<span class="token punctuation">.</span>MyMessage<span class="token punctuation">{</span><span class="token punctuation">}</span>
	message<span class="token punctuation">.</span><span class="token function">ProtoReflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ProtoReflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>descriptor protoreflect<span class="token punctuation">.</span>FieldDescriptor<span class="token punctuation">,</span> value protoreflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">FullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my_option:&quot;Hello world!&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方式可以类比一下go中给结构体加tag，都是差不的感觉，根据这种方式还能实现参数校验的功能，只需要在<code>options</code>中书写规则，通过<code>Descriptor</code>来进行检查。</p>`,46);function f(y,x){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("官网："),s("a",d,[n("Protocol Buffers | Google Developers"),e(a)])]),u,s("p",null,[n("官方教程："),s("a",m,[n("Protocol Buffer Basics: Go | Protocol Buffers | Google Developers"),e(a)])]),v,s("p",null,[n("谷歌还预定义了其它非常多的类型，前往"),s("a",k,[n("protobuf/ptypes at master · golang/protobuf (github.com)"),e(a)]),n("查看更多，主要有包括")]),b,s("p",null,[n("编译器下载的话到"),s("a",g,[n("protocolbuffers/protobuf: Protocol Buffers - Google's data interchange format (github.com)"),e(a)]),n("去下载最新版的Release，一般是一个压缩文件")]),h])}const _=t(i,[["render",f],["__file","protoc.html.vue"]]);export{_ as default};
