import{_ as p,V as o,W as i,X as n,Y as s,Z as t,$ as e,F as c}from"./framework-8edddef6.js";const l={},u=n("h1",{id:"jwt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jwt","aria-hidden":"true"},"#"),s(" JWT")],-1),d=n("p",null,"JWT已经成为了现代服务端通信认证的主流方式之一，具有轻量，无状态的特点。",-1),r=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),k={href:"http://jwt.io",target:"_blank",rel:"noopener noreferrer"},v={href:"https://jwt.io/introduction",target:"_blank",rel:"noopener noreferrer"},m=e(`<h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p>在RFC标准中，JWT由以下三个部分组成：</p><ul><li>Header 头部</li><li>Payload 载荷</li><li>Signature 签名</li></ul><p>然后每一个部分用一个点<code>.</code>来分隔，最后组成一个字符串，格式就是<code>header.payload.signature</code>吗，这就是一个JWT令牌的标准结构，接下来就一个个讲解每个结构的作用。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>需要注意的是<code>base64</code>与<code>base64URL</code>不是同一种编码方式，后者兼容了网页URL，对其进行了转义。</p></div><h3 id="头部" tabindex="-1"><a class="header-anchor" href="#头部" aria-hidden="true">#</a> 头部</h3><p>头部只是声明一些基本信息，通常由两部分组成，令牌的类型，和签名所使用的加密算法，例如下方：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的信息大致就是，令牌的类型为JWT，签名部分所使用的加密算法为HS256，最后再将JSON对象通过<code>Base64Url</code>编码成字符串，该字符串就是JWT的头部。</p><h3 id="载荷" tabindex="-1"><a class="header-anchor" href="#载荷" aria-hidden="true">#</a> 载荷</h3><p>JWT的第二部分是载荷部分，主要包含声明(<code>claims</code>)部分，声明部分通常是关于一个实体的数据，比如一个用户。关于声明的类型总共有三种：</p><ul><li><code>reigstered</code>：<code>Registered claims</code>代表着 一些预定义的声明，一些并不强制使用但是仍然推荐使用，例如：<code>iss</code>(issuer 签发者)，<code>exp</code>(expiration time 过期时间) ，<code>aud</code>(audience 受众)。</li><li><code>public</code>：<code>Public claims</code>是可以由使用JWT的人随意定义的，最好要避免和其他声明部分冲突。</li><li><code>private claims</code>：这部分的声明同样也是自定义的，通常用于在服务双方共享一些信息。</li></ul><p>一个载荷示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;admin&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该JSON对象将会通过<code>Base64Url</code>被编码成字符串，从而组成JWT的第二部分。</p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>虽然载荷部分也受到保护，也有防篡改，但是这一部分是公共可读的，所以不要把敏感信息存放在JWT内。</p></div><h3 id="签名" tabindex="-1"><a class="header-anchor" href="#签名" aria-hidden="true">#</a> 签名</h3><p>在获得了编码的头部和编码的载荷部分后，就可以通过头部所指明的签名算法根据前两个部分的内容再加上密钥进行加密签名，所以一旦JWT的内容有任何变化，解密时得到的签名都会不一样，同时如果是使用私钥，也可以对JWT的签发者进行验证。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sign = HMACSHA256(
  base64UrlEncode(header) + &quot;.&quot; +
  base64UrlEncode(payload),
  secret)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如下方的例子：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Header
{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}

Payload
{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}

Verify Signature
HMACSHA256(
  base64UrlEncode(header) + &quot;.&quot; +
  base64UrlEncode(payload),
  your secret
) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后得到的输出就是一个由三个<code>base64Url</code>字符串组成且由<code>.</code>分隔的字符串，大概长下面这样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><p>在身份验证中，当用户使用凭据成功登录时，将返回一个 JSON Web 令牌。由于令牌是凭证，因此必须非常小心地防止出现安全问题。一般来说，令牌的保存时间不应超过所需的时间。然后无论何时用户想要访问受保护的路由和资源，在发起请求时就必须携带上token，通常都是在请求头中的<code>Authorization</code> header中的<code>Bearer schema</code>，例如下方：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization: Bearer &lt;token&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器在收到JWT后，会对其进行有效性验证，例如内容有篡改，token已过期等等，如果验证通过就可以顺利的访问资源。虽然JWT中可以携带一些基本信息，但是依旧建议信息不要太大。</p><h2 id="jwt库" tabindex="-1"><a class="header-anchor" href="#jwt库" aria-hidden="true">#</a> JWT库</h2>`,28),b={href:"https://github.com/golang-jwt/jwt",target:"_blank",rel:"noopener noreferrer"},g={href:"https://pkg.go.dev/github.com/golang-jwt/jwt/v4",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>这个库支持解析和验证以及 JWT 的生成和签名。目前支持的签名算法有 HMAC SHA, RSA, RSA-PSS, 和ECDSA，不过也可以添加自己的钩子。</p><p><strong>安装</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -u github.com/golang-jwt/jwt/v4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导入</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/golang-jwt/jwt/v4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="选择签名算法" tabindex="-1"><a class="header-anchor" href="#选择签名算法" aria-hidden="true">#</a> 选择签名算法</h2><p>可用的签名算法有好几种，在使用之前应该先了解下它们之间的区别以便更好的去选择签名算法，它们之间最大的不同就是<strong>对称加密</strong>和<strong>非对称加密</strong>。</p><p>最简单的对称加密算法<code>HSA</code>，让任何<code>[]byte</code>都可以用作有效的密钥，所以计算速度稍微快一点。在生产者和消费者双方都是可以被信任的时候，对称加密算法的效率是最高的。不过由于签名和验证都使用相同的密钥，因此无法轻松的分发用于验证的密钥，毕竟签名的密钥也是同一个，签名泄露了则JWT的安全性就毫无意义。</p><p>非对称加密签名方法，例如<code>RSA</code>，使用不同的密钥来进行签名和验证token，这使得生成带有私钥的令牌成为可能，同时也允许任何使用公钥验证的人正常访问。</p><p>不同的签名算法所需要的密钥的类型也不同，下面给出一些常见签名算法的类型：</p><ul><li><code>HMAC</code>：对称加密，需要类型<code>[]byte</code>的值用于签名和验证。 (<code>HS256</code>,<code>HS384</code>,<code>HS512</code>)</li><li><code>RSA</code>：非对称加密，需要<code>*rsa.PrivateKey</code>类型的值用于签名，和<code>*rsa.PublicKey</code>类型的值用于验证。(<code>RS256</code>,<code>RS384</code>,<code>RS512</code>)</li><li><code>ECDSA</code>：非对称加密，需要<code>*ecdsa.PrivateKey</code>类型的值用于签名，和<code>*ecdsa.PublicKey</code>类型的值用于验证。(<code>ES256</code>,<code>ES384</code>,<code>ES512</code>)</li><li><code>EdDSA</code>：非对称加密，需要<code>ed25519.PrivateKey</code>类型的值用于签名和<code>ed25519.PublicKey</code> 类型的值用于验证。(<code>Ed25519</code>)</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>下面会演示一些示例，有关于jwt的创建与签名，已经解析与验证。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Token <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Raw       <span class="token builtin">string</span>                 <span class="token comment">// 原始Token字符串，当开始解析时填充此字段</span>
	Method    SigningMethod          <span class="token comment">// 签名使用的方法</span>
	Header    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// JWT的header部分</span>
	Claims    Claims                 <span class="token comment">// JWT的payload部分</span>
	Signature <span class="token builtin">string</span>                 <span class="token comment">// JWT的签名部分，当开始解析时填充此字段</span>
	Valid     <span class="token builtin">bool</span>                   <span class="token comment">// JWT是否合法有效</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Token结构体代表了一个JWT Token，字段的使用主要取决于JWT是如何被创建/签名或解析/验证的。</p><br><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RegisteredClaims <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   <span class="token comment">// the \`iss\` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1</span>
   Issuer <span class="token builtin">string</span> <span class="token string">\`json:&quot;iss,omitempty&quot;\`</span>

   <span class="token comment">// the \`sub\` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2</span>
   Subject <span class="token builtin">string</span> <span class="token string">\`json:&quot;sub,omitempty&quot;\`</span>

   <span class="token comment">// the \`aud\` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3</span>
   Audience ClaimStrings <span class="token string">\`json:&quot;aud,omitempty&quot;\`</span>

   <span class="token comment">// the \`exp\` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4</span>
   ExpiresAt <span class="token operator">*</span>NumericDate <span class="token string">\`json:&quot;exp,omitempty&quot;\`</span>

   <span class="token comment">// the \`nbf\` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5</span>
   NotBefore <span class="token operator">*</span>NumericDate <span class="token string">\`json:&quot;nbf,omitempty&quot;\`</span>

   <span class="token comment">// the \`iat\` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6</span>
   IssuedAt <span class="token operator">*</span>NumericDate <span class="token string">\`json:&quot;iat,omitempty&quot;\`</span>

   <span class="token comment">// the \`jti\` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7</span>
   ID <span class="token builtin">string</span> <span class="token string">\`json:&quot;jti,omitempty&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是库中提供的预定义Claims，可以适当使用以达到目的需求。</p><h3 id="例1-hmac的创建与签名" tabindex="-1"><a class="header-anchor" href="#例1-hmac的创建与签名" aria-hidden="true">#</a> 例1.HMAC的创建与签名</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestHmac</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// hmac的密钥类型是字节数组</span>
   secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;my secret&quot;</span><span class="token punctuation">)</span>
   <span class="token comment">// 使用HS256算法，jwt.MapClaims是payload</span>
   token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span>
      <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span>   <span class="token number">123456</span><span class="token punctuation">,</span>
      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>token<span class="token punctuation">)</span>
   <span class="token comment">// 签名</span>
   signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>signedString<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{Raw: Method:0xc000008150 Header:map[alg:HS256 typ:JWT] Claims:map[id:123456 name:jack] Signature: Valid:false}
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJpZCI6MTIzNDU2LCJuYW1lIjoiamFjayJ9.
QxLw9NkFgZW3BluyXIofe4efp1IAy61s8b2fe3Eo86M 
&lt;nil&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例3-使用预定义claims" tabindex="-1"><a class="header-anchor" href="#例3-使用预定义claims" aria-hidden="true">#</a> 例3.使用预定义Claims</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mySigningKey <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;AllYourBase&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建Claims</span>
claims <span class="token operator">:=</span> <span class="token operator">&amp;</span>jwt<span class="token punctuation">.</span>RegisteredClaims<span class="token punctuation">{</span>
	ExpiresAt<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token number">1516239022</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	Issuer<span class="token punctuation">:</span>    <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>
ss<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>mySigningKey<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v %v&quot;</span><span class="token punctuation">,</span> ss<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJpc3MiOiJ0ZXN0IiwiZXhwIjoxNTE2MjM5MDIyfQ.
0XN_1Tpp9FszFOonIBpwha0c_SfnNI22DhTnjMshPg8 
&lt;nil&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例3-自定义claims" tabindex="-1"><a class="header-anchor" href="#例3-自定义claims" aria-hidden="true">#</a> 例3.自定义Claims</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MyClaims <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   User <span class="token builtin">string</span> <span class="token string">\`json:&quot;user&quot;\`</span>
   jwt<span class="token punctuation">.</span>RegisteredClaims
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestCustomClaims</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 创建密钥</span>
   secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;my secret&quot;</span><span class="token punctuation">)</span>
   <span class="token comment">// 创建Claims</span>
   claims <span class="token operator">:=</span> MyClaims<span class="token punctuation">{</span>
      User<span class="token punctuation">:</span> <span class="token string">&quot;114514&quot;</span><span class="token punctuation">,</span>
      RegisteredClaims<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span>RegisteredClaims<span class="token punctuation">{</span>
         ExpiresAt<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         IssuedAt<span class="token punctuation">:</span>  jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         NotBefore<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         Issuer<span class="token punctuation">:</span>    <span class="token string">&quot;Server&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 创建Token</span>
   token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>
   <span class="token comment">// 签名</span>
   signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>signedString<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJ1c2VyIjoiMTE0NTE0IiwiaXNzIjoiU2VydmVyIiwiZXhwIjoxNjczMDg1Nzk2LCJuYmYiOjE2NzMwODIxOTYsImlhdCI6MTY3MzA4MjE5Nn0.
PdPXdQBbDuYtE4ENXzoAcrW-dBSxqsufeYXCT5zTwVI 
&lt;nil&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当在自定义Claims中嵌入了标准Claims时，需要确保：</p><p>1.嵌入的标准Claims是非指针类型</p><p>2.如果是指针类型，最好确保在传递之前为其分配合适的内存，否则将会panic。</p></div><h3 id="例4-hmac解析验证token" tabindex="-1"><a class="header-anchor" href="#例4-hmac解析验证token" aria-hidden="true">#</a> 例4.HMAC解析验证Token</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestParse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;my secret&quot;</span><span class="token punctuation">)</span>
   <span class="token comment">// 假设通过HS256算法创建并签名生成了一个token</span>
   tokenString <span class="token operator">:=</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2LCJuYW1lIjoiamFjayJ9.QxLw9NkFgZW3BluyXIofe4efp1IAy61s8b2fe3Eo86M&quot;</span>

   <span class="token comment">// 传入token字符串和验证钩子函数，返回值就是一个Token结构体</span>
   token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>tokenString<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 验证签名算法是否匹配</span>
      <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>jwt<span class="token punctuation">.</span>SigningMethodHMAC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;不匹配的签名算法: %s&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">&quot;alg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 返回验证密钥</span>
      <span class="token keyword">return</span> secret<span class="token punctuation">,</span> <span class="token boolean">nil</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">if</span> claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map[id:123456 name:jack]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="例5-错误处理" tabindex="-1"><a class="header-anchor" href="#例5-错误处理" aria-hidden="true">#</a> 例5.错误处理</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestProcess</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;my secret&quot;</span><span class="token punctuation">)</span>
   <span class="token comment">// 假设通过HS256算法创建并签名生成了一个token</span>
   tokenString <span class="token operator">:=</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2LCJuYW1lIjoiamFjayJ9.QxLw9NkFgZW3BluyXIofe4efp1IAy61s8b2fe3Eo86M&quot;</span>

   <span class="token comment">// 传入token字符串和验证钩子函数，返回值就是一个Token结构体</span>
   token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>tokenString<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 验证签名算法是否匹配</span>
      <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>jwt<span class="token punctuation">.</span>SigningMethodHMAC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;不匹配的签名算法: %s&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">&quot;alg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 返回验证密钥</span>
      <span class="token keyword">return</span> secret<span class="token punctuation">,</span> <span class="token boolean">nil</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>

   <span class="token keyword">if</span> token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;token合法&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>ErrTokenMalformed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;传入的字符串甚至连一个token都不是...&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>ErrTokenExpired<span class="token punctuation">)</span> <span class="token operator">||</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>ErrTokenNotValidYet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;token已经过期或者还没有生效&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;token处理异常...&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>token合法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="例6-自定义claims解析" tabindex="-1"><a class="header-anchor" href="#例6-自定义claims解析" aria-hidden="true">#</a> 例6.自定义Claims解析</h3><p>如果在创建Token时使用的是自定义Claims，那么在解析时如果希望Claims可以直接转换自定义的Claims而不是map，就需要传入自定义Claims。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestCustomClaimsParse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	secret <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;my secret&quot;</span><span class="token punctuation">)</span>
	tokenstring <span class="token operator">:=</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiMTE0NTE0IiwiaXNzIjoiU2VydmVyIiwiZXhwIjoxNjczMDg4MDU2LCJuYmYiOjE2NzMwODQ0NTYsImlhdCI6MTY3MzA4NDQ1Nn0.T245aoDeL2x19X8_JZde0EmZ2TDyIgr1u3ddKFjQmgw&quot;</span>
	token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseWithClaims</span><span class="token punctuation">(</span>tokenstring<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyClaims<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> secret<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> jwt<span class="token punctuation">.</span><span class="token function">WithValidMethods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;HS256&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用option进行验证</span>

    <span class="token comment">// 类型断言</span>
	<span class="token keyword">if</span> claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>MyClaims<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&amp;{114514 {Server  [] 2023-01-07 18:40:56 +0800 CST 2023-01-07 17:40:56 +0800 CST 2023-01-07 17:40:56 +0800 CST }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="例7-rsa的签名与解析" tabindex="-1"><a class="header-anchor" href="#例7-rsa的签名与解析" aria-hidden="true">#</a> 例7.RSA的签名与解析</h3><p>RSA在分布式架构中用的会比较多，大致过程如下：</p><ol><li>认证中心创建密钥对，使用私钥将jwt签名，jwt返回给客户端，公钥则有业务服务持有</li><li>客户端携带jwt向业务服务发起请求，业务模块使用公钥对jwt进行解析，无需访问认证中心</li><li>认证通过则返回业务信息</li><li>认证失败则返回失败信息</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestRsa</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>

   <span class="token comment">// 创建密钥对</span>
   privateKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span>
   publicKey <span class="token operator">:=</span> <span class="token operator">&amp;</span>privateKey<span class="token punctuation">.</span>PublicKey

   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// claims</span>
   claims <span class="token operator">:=</span> MyClaims<span class="token punctuation">{</span>
      User<span class="token punctuation">:</span> <span class="token string">&quot;114514&quot;</span><span class="token punctuation">,</span>
      RegisteredClaims<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span>RegisteredClaims<span class="token punctuation">{</span>
         ExpiresAt<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         IssuedAt<span class="token punctuation">:</span>  jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         NotBefore<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         Issuer<span class="token punctuation">:</span>    <span class="token string">&quot;Server&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>

   token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodRS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>
   <span class="token comment">// 私钥加密</span>
   signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span>

   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>signedString<span class="token punctuation">,</span> err<span class="token punctuation">)</span>

   <span class="token comment">// 公钥解密</span>
   token<span class="token punctuation">,</span> err <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseWithClaims</span><span class="token punctuation">(</span>signedString<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyClaims<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> publicKey<span class="token punctuation">,</span> <span class="token boolean">nil</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>

   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>MyClaims<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48);function f(w,y){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,d,r,n("p",null,[s("JWT全名 JSON Web Tokens，关于JWT的详细介绍可以在["),n("a",k,[s("jwt.io"),t(a)]),s("]("),n("a",v,[s("JSON Web Token Introduction - jwt.io"),t(a)]),s(")查看，它是一种开放的，安全的，紧凑的，以JSON对象为载体在服务双方之间传输信息的方式，它的特点就是安全性高，内容防篡改，消耗低。")]),m,n("p",null,[s("官方仓库："),n("a",b,[s("golang-jwt/jwt: Community maintained clone of https://github.com/dgrijalva/jwt-go"),t(a)])]),n("p",null,[s("官方文档："),n("a",g,[s("jwt package - github.com/golang-jwt/jwt/v4 - Go Packages"),t(a)])]),h])}const j=p(l,[["render",f],["__file","jwt.html.vue"]]);export{j as default};
