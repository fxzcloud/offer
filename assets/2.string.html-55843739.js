import{_ as p,V as e,W as o,X as n,Y as s,Z as c,$ as a,F as i}from"./framework-8edddef6.js";const l={},u=a(`<h1 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h1><p><code>string</code>是go中一个非常常见的基础数据类型，也是我在go语言中接触到的第一个数据类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相信这段代码大多数人在刚接触go时都有敲过。在<code>builtin/builtin.go</code>中有关于<code>string</code>的简单描述</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// string is the set of all strings of 8-bit bytes, conventionally but not</span>
<span class="token comment">// necessarily representing UTF-8-encoded text. A string may be empty, but</span>
<span class="token comment">// not nil. Values of string type are immutable.</span>
<span class="token keyword">type</span> <span class="token builtin">string</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面这段话可以得到以下几个信息</p><ul><li><p><code>string</code>是8位字节的集合</p></li><li><p><code>string</code>类型通常是<code>UTF-8</code>编码</p></li><li><p><code>string</code>可以是空的，但不会是<code>nil</code></p></li><li><p><code>string</code>是不可变的</p></li></ul><p>这几个特点对于经常使用go的人来说应该早就了熟于心了，那么下面就来看点不一样的。</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p>在go中，字符串在运行时由<code>runtime.stringStruct</code>结构体表示，不过它并不对外暴露，作为替代可以使用<code>reflect.StringHeader</code>。</p>`,10),r={class:"hint-container tip"},k=n("p",{class:"hint-container-title"},"提示",-1),d=n("code",null,"StringHeader",-1),v=n("code",null,"go.1.21",-1),m={href:"https://github.com/golang/go/issues/56906",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// runtime/string.go</span>
<span class="token keyword">type</span> stringStruct <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	str unsafe<span class="token punctuation">.</span>Pointer
	<span class="token builtin">len</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// reflect/value.go</span>
<span class="token keyword">type</span> StringHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的字段释义如下</p><ul><li><code>Data</code>，是一个指向字符串内存起始地址的指针</li><li><code>Len</code>，字符串的字节数</li></ul><p>下面是一个通过unsafe指针访问字符串地址的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;hello,world!&quot;</span>
	h <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">.</span>Len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过go现在推荐使用<code>unsafe.StringData</code>来代替</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;hello,world!&quot;</span>
	ptr <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">StringData</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者输出都是一样的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>h e l l o , w o r l d ! 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310081943568.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>字符串其本质上就是一片连续的内存地址，每一个地址上都存储着一个字节，换句话说就是一个字节数组，通过<code>len</code>函数获取的结果是字节的数量，而非字符串中字符的数量，当字符串中的字符是非ASCII字符是尤其如此。</p><p><code>string</code>本身只占很小的内存即一个指向真实数据的指针，这样一来传递字符串的成本就会非常低。个人认为，由于只持有一个内存的引用，如果可以被随意修改的话，日后很难知道原来的指向是否还是想要的数据（要么使用反射要么使用<code>unsafe</code>包），除非说旧数据的使用者在使用过后永远不再需要这个字符串，另一个优点就是天生并发安全，任何人在常规情况下都无法对其进行修改。</p><h2 id="拼接" tabindex="-1"><a class="header-anchor" href="#拼接" aria-hidden="true">#</a> 拼接</h2><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310082117521.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>字符串的拼接语法如下所示，直接使用<code>+</code>运算符进行拼接。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
    hello <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
    dot   <span class="token operator">=</span> <span class="token string">&quot;,&quot;</span>
    world <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span>
    last  <span class="token operator">=</span> <span class="token string">&quot;!&quot;</span>
<span class="token punctuation">)</span>
str <span class="token operator">:=</span> hello <span class="token operator">+</span> dot <span class="token operator">+</span> world <span class="token operator">+</span> last
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拼接的操作在运行时由<code>runtime.concatstrings</code>函数完成，如果是下面这种字面量拼接，编译器会直接推断出结果。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>
<span class="token boolean">_</span> <span class="token operator">=</span> str
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过输出其汇编代码就能知道结果，部分如下所示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LEAQ    go:string.&quot;hello,world!&quot;(SB), AX
MOVQ    AX, main.str(SP)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然的是编译器直接将其视作一个完整的字符串，其值在编译期就已经确定了，并不会由<code>runtime.concatstrings</code>在运行时来拼接，只有拼接字符串变量才会在运行时完成，其函数签名如下，它接收一个字节数组和一个字符串切片。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当拼接的字符串变量小于5时，会使用下面的函数代替（个人猜测：由参数和匿名变量传递，它们都是存在栈上，相比于运行时创建的切片更好GC？），虽然其最后还是由<code>concatstrings</code>来完成拼接。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatstring2</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> a1 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">concatstring3</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">concatstring4</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">concatstring5</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面来看看<code>concatstrings</code>函数里面干了些什么</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">concatstrings</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	idx <span class="token operator">:=</span> <span class="token number">0</span>
	l <span class="token operator">:=</span> <span class="token number">0</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
		<span class="token comment">// 长度为0跳过</span>
		<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 数值计算溢出</span>
		<span class="token keyword">if</span> l<span class="token operator">+</span>n <span class="token operator">&lt;</span> l <span class="token punctuation">{</span>
			<span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;string concatenation too long&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		l <span class="token operator">+=</span> n
		<span class="token comment">// 计数</span>
		count<span class="token operator">++</span>
		idx <span class="token operator">=</span> i
	<span class="token punctuation">}</span>
	<span class="token comment">// 没有字符串直接返回空串</span>
	<span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
	<span class="token punctuation">}</span>
    
	<span class="token comment">// 如果只有一个字符串的话，直接返回</span>
	<span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">stringDataOnStack</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 为新字符串开辟内存</span>
	s<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">rawstringtmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> l<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
        <span class="token comment">// 复制</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
        <span class="token comment">// 截断</span>
		b <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先做的事情是统计要拼接字符串的总长度和数量，然后根据总长度分配内存，<code>rawstringtmp</code>函数会返回一个字符串<code>s</code>和字节切片<code>b</code>，虽然其长度是确定的但它们没有任何内容，因为它们本质上是两个指向新内存地址的指针，分配内存的代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">rawstring</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 没有指定类型</span>
	p <span class="token operator">:=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// 虽然分配了内存但是上面什么都没有</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的字符串<code>s</code>是为了方便表示，字节切片<code>b</code>是为了方便修改字符串，它们两个指向的都是同一个内存地址。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
    <span class="token comment">// 复制</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
    <span class="token comment">// 截断</span>
    b <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>copy</code>函数在运行时调用的是<code>runtime.slicecopy</code> ，它所做的工作就是直接把<code>src</code>的内存直接复制到<code>dst</code>的地址，所有字符串都复制完毕后，整个拼接过程也就结束了。倘若复制的字符串非常大，这个过程将会相当消耗性能。</p><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h2><p>前面提到过，字符串本身是不可以修改的，如果尝试修改连编译都没法通过，go会如下报错</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>
str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cannot assign to string (neither addressable nor a map index expression)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>想要修改字符串的话，就需要先将其类型转换至字节切片<code>[]byte</code>，使用起来很简单</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其内部调用了函数<code>runtime.stringtoslicebyte</code>，它的逻辑还是非常简单的，代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">stringtoslicebyte</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	<span class="token keyword">if</span> buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span>buf <span class="token operator">=</span> tmpBuf<span class="token punctuation">{</span><span class="token punctuation">}</span>
		b <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		b <span class="token operator">=</span> <span class="token function">rawbyteslice</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果字符串长度小于缓冲区长度的话就直接返回缓冲区的字节切片，这样在小字符串转换的时候可以节省内存。否则的话，就会开辟一片与字符串长度相当的内存，然后将字符串复制到新的内存地址中，其中函数<code>rawbyteslice(len(s))</code>所做的事与之前<code>rawstring</code>函数类似，都是分配内存。</p><p>同样的，字节切片在语法上也可以很轻易的转换成字符串</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其内部调用的是<code>runtime.slicebytetostring</code>函数，也很容易理解，代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">slicebytetostring</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>tmpBuf<span class="token punctuation">,</span> ptr <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
	<span class="token punctuation">}</span>
    
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		p <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>staticuint64s<span class="token punctuation">[</span><span class="token operator">*</span>ptr<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> goarch<span class="token punctuation">.</span>BigEndian <span class="token punctuation">{</span>
			p <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> p unsafe<span class="token punctuation">.</span>Pointer
	<span class="token keyword">if</span> buf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		p <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		p <span class="token operator">=</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先处理切片长度为0和1的特殊情况，在这种情况不用进行内存复制。然后就是小于缓冲区长度就用缓冲区的内存，否则就开辟新内存，最后再用<code>memmove</code>函数把内存直接复制过去，复制过后的内存与源内存没有任何关联，所以可以随意的修改。</p><p>值得注意的是，上面两种转换方法，都需要进行内存复制，如果待复制的内存非常大，性能消耗也会很大。在版本更新到<code>go1.20</code>时，<code>unsafe</code>包更新了下面几个函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 传入指向内存地址的类型指针和数据长度，返回其切片表达形式</span>
<span class="token keyword">func</span> <span class="token function">Slice</span><span class="token punctuation">(</span>ptr <span class="token operator">*</span>ArbitraryType<span class="token punctuation">,</span> <span class="token builtin">len</span> IntegerType<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ArbitraryType

<span class="token comment">// 传入一个切片，得到指向其底层数组的指针</span>
<span class="token keyword">func</span> <span class="token function">SliceData</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span>ArbitraryType<span class="token punctuation">)</span> <span class="token operator">*</span>ArbitraryType

<span class="token comment">// 根据传入的地址和长度，返回字符串</span>
<span class="token keyword">func</span> <span class="token function">String</span><span class="token punctuation">(</span>ptr <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">len</span> IntegerType<span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token comment">// 传入一个字符串，返回其起始内存地址，不过返回的字节不能被修改</span>
<span class="token keyword">func</span> <span class="token function">StringData</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">byte</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尤其是<code>String</code>和<code>StringData</code> 函数，它们并不涉及内存复制，也可以完成转换，不过需要注意的是，使用它们的前提是，得确保数据是只读的，后续不会有任何修改，否则的话字符串就会发生变化，看下面的例子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	bs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
	s <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">SliceData</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	bs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过<code>SliceData</code>获取字节切片的底层数组的地址，然后通过<code>String</code>获取其字符串表达形式，后续再直接修改字节切片，字符串同样也会发生变化，这显然违背了字符串的初衷。再来看个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	str <span class="token operator">:=</span> <span class="token string">&quot;hello,world!&quot;</span>
	bytes <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">StringData</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
    <span class="token comment">// fatal</span>
	bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取了字符串其切片表达形式后，如果尝试修改字节切片，就会直接<code>fatal</code>，下面换个声明字符串的方式看看有什么区别。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> str <span class="token builtin">string</span>
	fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span>
	bytes <span class="token operator">:=</span> unsafe<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">StringData</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
	bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hello,world!
[104 101 108 108 111 44 119 111 114 108 100 33]
bello,world! 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果可以看出来，确实修改成功了。之前所以<code>fatal</code>，在于变量<code>str</code>存储的是字符串字面量，字符串字面量都存储在只读数据段，而非堆栈，从根本上就断绝了字面量声明的字符串后续会被修改的可能性，对于一个普通的字符串变量而言，本质上来说它确实可以被修改，但是这种写法编译器不允许。总之，使用<code>unsafe</code>函数来操作字符串转换并不安全，除非能保证永远不会对数据进行修改。</p><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;hello world!&quot;</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了处理多字节字符的情况，遍历字符串一般会使用<code>for range</code>循环。当使用<code>for range</code>遍历字符串时，编译器会在编译期间展开成如下形式的代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ha <span class="token operator">:=</span> s
<span class="token keyword">for</span> hv1 <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> hv1 <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>
    hv1t <span class="token operator">:=</span> hv1
    hv2 <span class="token operator">:=</span> <span class="token function">rune</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span>hv1<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断是否是单字节字符</span>
    <span class="token keyword">if</span> hv2 <span class="token operator">&lt;</span> utf8<span class="token punctuation">.</span>RuneSelf <span class="token punctuation">{</span>
        hv1<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        hv2<span class="token punctuation">,</span> hv1 <span class="token operator">=</span> <span class="token function">decoderune</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> hv1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    i<span class="token punctuation">,</span> r <span class="token operator">=</span> hv1t<span class="token punctuation">,</span> hv2
	<span class="token comment">// 循环体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在展开的代码中，<code>for range</code>循环会替换成经典的<code>for</code>循环，在循环中，会判断当前字节是否是单字节字符，如果是多字节字符的话会调用运行时函数<code>runtime.decoderune</code>来获取其完整编码，然后再赋值给<code>i</code>,<code>r</code>，处理完过后就到了源代码中定义的循环体执行。</p><p>负责构造中间代码的工作由<code>cmd/compile/internal/walk/range.go</code>中的<code>walkRange</code>函数来完成，同时它也负责处理所有能被<code>for range</code>遍历的类型，这里就不展开了，感兴趣的可以自己去了解。</p>`,61);function g(f,h){const t=i("ExternalLinkIcon");return e(),o("div",null,[u,n("div",r,[k,n("p",null,[s("虽然"),d,s("在版本"),v,s("已经被废弃了，不过它确实很直观，下面的内容还是会使用它来进行讲述，并不影响理解，详情见"),n("a",m,[s("Issues · golang/go (github.com)"),c(t)]),s("。")])]),b])}const w=p(l,[["render",g],["__file","2.string.html.vue"]]);export{w as default};
