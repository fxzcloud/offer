import{_ as t,V as p,W as e,X as s,Y as n,Z as o,$ as c,F as i}from"./framework-8edddef6.js";const l={},u=c(`<h1 id="syncmap" tabindex="-1"><a class="header-anchor" href="#syncmap" aria-hidden="true">#</a> syncmap</h1><p>go标准库提供的<code>sync.Map</code>是一个并发安全的map，使用它时不需要使用锁之类的方式来控制，其实现不算特别复杂，去掉注释总共也就两三百行代码。</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    mu Mutex
    read atomic<span class="token punctuation">.</span>Pointer<span class="token punctuation">[</span>readOnly<span class="token punctuation">]</span>
    dirty <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry
    misses <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它总共只有四个字段，分别如下</p><ul><li><code>read</code>，只读的map，可以理解为对<code>dirty</code>的缓存</li><li><code>dirty</code>，一个普通的map</li><li><code>misses</code>，访问<code>read</code>时没有命中的次数</li><li><code>mu</code>，保护<code>dirty</code>的并发安全</li></ul><p><code>read</code>是<code>sync.readonly</code>类型，其内部依旧是一个map，其中的<code>amended</code>字段表示<code>dirty</code>是否包含<code>read</code>所没有的key。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> readOnly <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	m       <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry
	amended <span class="token builtin">bool</span> <span class="token comment">// true if the dirty map contains some key not in m.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外<code>entry</code>类型结构如下，<code>p</code>是一个指向value的指针。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> entry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	p atomic<span class="token punctuation">.</span>Pointer<span class="token punctuation">[</span>any<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一个entry而言，它有三种可能的情况</p><ol><li>正常情况，存放了对应的值</li><li><code>p</code>为<code>nil</code>，表示该键值对已被删除，此时dirty可能为空，或者其可能依旧存在于dirty中。</li><li><code>p == expunged</code>，<code>expunged</code>是一个空的接口对象，同样代表了键值对已经被删除且不存在于dirty中。</li></ol><p>标准库map的并发安全是通过读写分离来实现的，<code>read</code>和<code>dirty</code>所存储的<code>entry</code>指针都是指向的同一片value，<code>read</code>是只读的，所以多个协程访问时也不会有安全问题，<code>dirty</code>是可以被修改的，受到互斥锁的保护，<code>misses</code>记录了key访问没有命中的次数，当次数累计到一定的值后，当前的<code>dirty</code>就会转变为<code>read</code>，<code>misses</code>清零，这就是<code>sync.Map</code>大致的工作逻辑，后续会对其操作进行更加细致的分析。</p><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202402191626924.png" style="zoom:50%;"><h2 id="读" tabindex="-1"><a class="header-anchor" href="#读" aria-hidden="true">#</a> 读</h2><p>读操作对应<code>Map.Load</code>方法，代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> <span class="token punctuation">(</span>value any<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		e<span class="token punctuation">,</span> ok <span class="token operator">=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			e<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
			m<span class="token punctuation">.</span><span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它首先会访问read，如果存在的话就直接返回，否则就会去尝试持有<code>mu</code>互斥锁，然后再去访问read，因为在获得锁的期间dirty有可能晋升为read，倘若还是没有找到，最终就会去访问dirty，并记录一次miss，然后解锁。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m<span class="token punctuation">.</span>misses<span class="token operator">++</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>misses <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readOnly<span class="token punctuation">{</span>m<span class="token punctuation">:</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">}</span><span class="token punctuation">)</span>
	m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">nil</span>
	m<span class="token punctuation">.</span>misses <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>missLocked</code>方法可以看出，dirty晋升为read的阈值条件是<code>m.misses &gt;= len(m.dirty)</code>。</p><h2 id="写" tabindex="-1"><a class="header-anchor" href="#写" aria-hidden="true">#</a> 写</h2><p>写操作对应的是<code>Store</code>方法，不过实际上也是由<code>Swap</code>方法来完成，<code>previous</code>代表着先前的值，<code>loaded</code>表示key是否存在。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token punctuation">(</span>previous any<span class="token punctuation">,</span> loaded <span class="token builtin">bool</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>写操作的流程分为两部分，如果访问的key存在于read中的话，那么就会直接获取对应的<code>entry</code>，然后通过CAS来更新<code>entry</code>的值，期间不需要上锁。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">trySwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在自旋的期间，如果<code>p == expunged</code>则代表着该key已经被删除了，就会直接返回。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>entry<span class="token punctuation">)</span> <span class="token function">trySwap</span><span class="token punctuation">(</span>i <span class="token operator">*</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>any<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		p <span class="token operator">:=</span> e<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> p <span class="token operator">==</span> expunged <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> e<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> p<span class="token punctuation">,</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果key不存在于read中，就会尝试获取锁来进行接下来的操作，接下来分三种情况。第一种情况，在获取锁的期间dirty晋升为了read，如果访问到的<code>entry</code>是<code>expunged</code>，则说明它已经被删除了，且不存在于dirty中，这时需要将其添加到dirty中，然后再存储对应的值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token keyword">if</span> e<span class="token punctuation">.</span><span class="token function">unexpungeLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> e
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> v <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">swapLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        loaded <span class="token operator">=</span> <span class="token boolean">true</span>
        previous <span class="token operator">=</span> <span class="token operator">*</span>v
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种情况，read中没有，但是dirty中有，也是直接存储对应的值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token keyword">if</span> v <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">swapLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        loaded <span class="token operator">=</span> <span class="token boolean">true</span>
        previous <span class="token operator">=</span> <span class="token operator">*</span>v
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三种情况，read中没有，dirty中也没有，在这里如果<code>read.amended</code>为<code>false</code>的话，代表着dirty是空的，然后会使用<code>m.dirtyLocked</code>将read中所有未删除的键值对复制到ditry中，然后将<code>read.amended</code>标记为<code>true</code>，最后会直接新建一个entry来存放对应的值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
        <span class="token comment">// We&#39;re adding the first new key to the dirty map.</span>
        <span class="token comment">// Make sure it is allocated and mark the read-only map as incomplete.</span>
        m<span class="token punctuation">.</span><span class="token function">dirtyLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readOnly<span class="token punctuation">{</span>m<span class="token punctuation">:</span> read<span class="token punctuation">.</span>m<span class="token punctuation">,</span> amended<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">dirtyLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>dirty <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>read<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> read<span class="token punctuation">.</span>m <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">tryExpungeLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删" tabindex="-1"><a class="header-anchor" href="#删" aria-hidden="true">#</a> 删</h2><p>删除操作对应的是<code>LoadAndDelete</code>方法，它的思路与读操作几乎完全一致，只是多了一个<code>delete</code>函数的调用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">LoadAndDelete</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> <span class="token punctuation">(</span>value any<span class="token punctuation">,</span> loaded <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		e<span class="token punctuation">,</span> ok <span class="token operator">=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			e<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
			<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>dirty<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
			m<span class="token punctuation">.</span><span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除键值对的时候永远只会对ditry执行<code>delete</code>操作，对应read而言，只会将它所存储的entry的值修改为<code>nil</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>entry<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value any<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		p <span class="token operator">:=</span> e<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> p <span class="token operator">==</span> expunged <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> e<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><p>遍历操作对应着<code>Range</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Range</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			read <span class="token operator">=</span> readOnly<span class="token punctuation">{</span>m<span class="token punctuation">:</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">}</span>
			m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>read<span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">nil</span>
			m<span class="token punctuation">.</span>misses <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> k<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> read<span class="token punctuation">.</span>m <span class="token punctuation">{</span>
		v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">f</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遍历时只会遍历read，如果<code>read.amended</code>为<code>true</code>，代表read中的key有缺失，这时会直接将ditry晋升为read，然后通过<code>for range</code>循环来遍历，并对每一个键值对调用回调函数。</p><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h2>`,43),d=s("code",null,"sync.Map",-1),k=s("code",null,"sync.Map",-1),r={href:"https://github.com/orcaman/concurrent-map",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=i("ExternalLinkIcon");return p(),e("div",null,[u,s("p",null,[d,n("采用了读写分离的方式来进行并发控制，它更适合读多写少的场景，因为在大部分情况下访问一个键值对的时候不需要加锁。但是如果要新增一个元素的话，就需要持有一个全局锁，它会阻塞当前map的所有操作，这就导致了写性能的低下，所以"),k,n("并不适用于所有情况，对于读少写多的情况，可以采用分段锁的方式来实现，这样可以避免阻塞全局，这里推荐一个开源实现"),s("a",r,[n("orcaman/concurrent-map: a thread-safe concurrent map for go (github.com)"),o(a)]),n("，采用分片的方式实现，且支持泛型，在性能和使用体验上都会好一些。")])])}const g=t(l,[["render",v],["__file","10.syncmap.html.vue"]]);export{g as default};
