import{_ as p,V as o,W as c,X as n,Y as s,Z as t,$ as e,F as i}from"./framework-8edddef6.js";const l={},u=n("h1",{id:"gorm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gorm","aria-hidden":"true"},"#"),s(" Gorm")],-1),d={href:"https://gorm.io/zh_CN/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/go-gorm/gorm",target:"_blank",rel:"noopener noreferrer"},k=e(`<br><p>在go社区中，对于数据库交互这一块，有两派人，一派人更喜欢简洁的<code>sqlx</code>这一类的库，功能并不那么强大但是自己可以时时刻刻把控sql，性能优化到极致。另一派人喜欢为了开发效率而生的ORM，可以省去开发过程中许多不必要的麻烦。而提到ORM，在go语言社区中就绝对绕不开<code>gorm</code>，它是一个非常老牌的ORM，与之类似的还有相对比较年轻的<code>xorm</code>，<code>ent</code>等。这篇文章讲的就是关于gorm的内容，本文只是对它的基础入门内容做一个讲解，权当是抛砖引玉，想要了解更深的细节可以阅读官方文档，它的中文文档已经相当完善了，并且笔者也是gorm文档的翻译人员之一。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><ul><li>全功能 ORM</li><li>关联 (拥有一个，拥有多个，属于，多对多，多态，单表继承)</li><li>Create，Save，Update，Delete，Find 中钩子方法</li><li>支持 Preload、Joins 的预加载</li><li>事务，嵌套事务，Save Point，Rollback To to Saved Point</li><li>Context、预编译模式、DryRun 模式</li><li>批量插入，FindInBatches，Find/Create with Map，使用 SQL 表达式、Context Valuer 进行 CRUD</li><li>SQL 构建器，Upsert，锁，Optimizer/Index/Comment Hint，命名参数，子查询</li><li>复合主键，索引，约束</li><li>自动迁移</li><li>自定义 Logger</li><li>灵活的可扩展插件 API：Database Resolver（多数据库，读写分离）、Prometheus…</li><li>每个特性都经过了测试的重重考验</li><li>开发者友好</li></ul><p>gorm当然也有一些缺点，比如几乎所有的方法参数都是空接口类型，不去看文档恐怕根本就不知道到底该传什么参数，有时候可以传结构体，有时候可以传字符串，有时候可以传map，有时候可以传切片，语义比较模糊，并且很多情况还是需要自己手写SQL。</p><p>作为替代的有两个orm可以试一试，第一个是<code>aorm</code>，刚开源不久，它不再需要去自己手写表的字段名，大多情况下都是链式操作，基于反射实现，由于star数目不多，可以再观望下。第二个就是<code>ent</code>，是<code>facebook</code>开源的orm，它同样支持链式操作，并且大多数情况下不需要自己去手写SQL，它的设计理念上是基于图（数据结构里面的那个图），实现上基于代码生成而非反射（比较认同这个），但是文档是全英文的，有一定的上手门槛。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>安装gorm库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go get <span class="token parameter variable">-u</span> gorm.io/gorm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h2><p>gorm目前支持以下几种数据库</p><ul><li>MySQL ：<code>&quot;gorm.io/driver/mysql&quot;</code></li><li>PostgreSQL： <code>&quot;gorm.io/driver/postgres&quot;</code></li><li>SQLite：<code>&quot;gorm.io/driver/sqlite&quot;</code></li><li>SQL Server：<code>&quot;gorm.io/driver/sqlserver&quot;</code></li><li>TIDB：<code>&quot;gorm.io/driver/mysql&quot;</code>，TIDB兼容mysql协议</li><li>ClickHouse：<code>&quot;gorm.io/driver/clickhouse&quot;</code></li></ul>`,12),v={href:"https://github.com/CengSin/oracle",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go get <span class="token parameter variable">-u</span> gorm.io/driver/mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用dsn（data source name）连接到数据库，驱动库会自行将dsn解析为对应的配置</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;gorm.io/driver/mysql&quot;</span>
	<span class="token string">&quot;gorm.io/gorm&quot;</span>
	<span class="token string">&quot;log/slog&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	dsn <span class="token operator">:=</span> <span class="token string">&quot;root:123456@tcp(192.168.48.138:3306)/hello?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		slog<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;db connect error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	slog<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;db connect success&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者手动传入配置</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;gorm.io/driver/mysql&quot;</span>
	<span class="token string">&quot;gorm.io/gorm&quot;</span>
	<span class="token string">&quot;log/slog&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		slog<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;db connect error&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	slog<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;db connect success&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方法都是等价的，看自己使用习惯。</p><h3 id="连接配置" tabindex="-1"><a class="header-anchor" href="#连接配置" aria-hidden="true">#</a> 连接配置</h3><p>通过传入<code>gorm.Config</code>配置结构体，我们可以控制gorm的一些行为</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一些简单的解释，使用时可以根据自己的需求来进行配置。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 禁用默认事务，gorm在单个创建和更新时都会开启事务以保持数据一致性</span>
	SkipDefaultTransaction <span class="token builtin">bool</span>
	<span class="token comment">// 自定义的命名策略</span>
	NamingStrategy schema<span class="token punctuation">.</span>Namer
	<span class="token comment">// 保存完整的关联</span>
	FullSaveAssociations <span class="token builtin">bool</span>
	<span class="token comment">// 自定义logger</span>
	Logger logger<span class="token punctuation">.</span>Interface
	<span class="token comment">// 自定义nowfunc，用于注入CreatedAt和UpdatedAt字段</span>
	NowFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time
	<span class="token comment">// 只生成sql不执行</span>
	DryRun <span class="token builtin">bool</span>
	<span class="token comment">// 使用预编译语句</span>
	PrepareStmt <span class="token builtin">bool</span>
	<span class="token comment">// 建立连接后，ping一下数据库</span>
	DisableAutomaticPing <span class="token builtin">bool</span>
	<span class="token comment">// 在迁移数据库时忽略外键</span>
	DisableForeignKeyConstraintWhenMigrating <span class="token builtin">bool</span>
	<span class="token comment">// 在迁移数据库时忽略关联引用</span>
	IgnoreRelationshipsWhenMigrating <span class="token builtin">bool</span>
	<span class="token comment">// 禁用嵌套事务</span>
	DisableNestedTransaction <span class="token builtin">bool</span>
	<span class="token comment">// 运行全局更新，就是不加where的update</span>
	AllowGlobalUpdate <span class="token builtin">bool</span>
	<span class="token comment">// 对表的所有字段进行查询</span>
	QueryFields <span class="token builtin">bool</span>
	<span class="token comment">// 批量创建的size</span>
	CreateBatchSize <span class="token builtin">int</span>
	<span class="token comment">// 启用错误转换</span>
	TranslateError <span class="token builtin">bool</span>

	<span class="token comment">// ClauseBuilders clause builder</span>
	ClauseBuilders <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>clause<span class="token punctuation">.</span>ClauseBuilder
	<span class="token comment">// ConnPool db conn pool</span>
	ConnPool ConnPool
	<span class="token comment">// Dialector database dialector</span>
	Dialector
	<span class="token comment">// Plugins registered plugins</span>
	Plugins <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Plugin

	callbacks  <span class="token operator">*</span>callbacks
	cacheStore <span class="token operator">*</span>sync<span class="token punctuation">.</span>Map
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h2><p>在gorm中，模型与数据库表相对应，它通常由结构体的方式展现，例如下面的结构体。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>
	Name    <span class="token builtin">string</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体的内部可以由基本数据类型与实现了<code>sql.Scanner</code>和 <code>sql.Valuer</code>接口的类型组成。在默认情况下，<code>Person</code>结构体所映射的表名为<code>perons</code>，其为蛇形复数风格，以下划线分隔。列名同样是以蛇形风格，比如<code>Id</code>对应列名<code>id</code>，gorm同样也提供了一些方式来对其进行配置。</p><h3 id="指定列名" tabindex="-1"><a class="header-anchor" href="#指定列名" aria-hidden="true">#</a> 指定列名</h3><p>通过结构体标签，我们可以对结构体字段指定列名，这样在实体映射的时候，gorm就会使用指定的列名。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;column:ID;&quot;\`</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;column:Name;&quot;\`</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指定表名" tabindex="-1"><a class="header-anchor" href="#指定表名" aria-hidden="true">#</a> 指定表名</h3><p>通过实现<code>Table</code>接口，就可以指定表明，它只有一个方法，就是返回表名。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Tabler <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现的方法中，它返回了字符串<code>person</code>，在数据库迁移的时候，gorm会创建名为<code>person</code>的表。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;column:ID;&quot;\`</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;column:Name;&quot;\`</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;person&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于命名策略，也可以在创建连接时传入自己的策略实现来达到自定义的效果。</p><h3 id="时间追踪" tabindex="-1"><a class="header-anchor" href="#时间追踪" aria-hidden="true">#</a> 时间追踪</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>
	Name    <span class="token builtin">string</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>

	CreatedAt sql<span class="token punctuation">.</span>NullTime
	UpdatedAt sql<span class="token punctuation">.</span>NullTime
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;person&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当包含<code>CreatedAt</code>或<code>UpdatedAt</code>字段时，在创建或更新记录时，如果其为零值，那么gorm会自动使用<code>time.Now()</code>来设置时间。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>    <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
		Address<span class="token punctuation">:</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">,</span>
		Mom<span class="token punctuation">:</span>     <span class="token string">&quot;lili&quot;</span><span class="token punctuation">,</span>
		Dad<span class="token punctuation">:</span>     <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// INSERT INTO \`person\` (\`name\`,\`address\`,\`mom\`,\`dad\`,\`created_at\`,\`updated_at\`) VALUES (&#39;jack&#39;,&#39;usa&#39;,&#39;lili&#39;,&#39;tom&#39;,&#39;2023-10-25 14:43:57.16&#39;,&#39;2023-10-25 14:43:57.16&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gorm也支持时间戳追踪</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>

	<span class="token comment">// nanoseconds</span>
	CreatedAt <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;autoCreateTime:nano;&quot;\`</span>
	<span class="token comment">// milliseconds</span>
	UpdatedAt <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;autoUpdateTime;milli;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在<code>Create</code>执行时，等价于下面的SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>person<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>mom<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>dad<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>created_at<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>updated_at<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;usa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;lili&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token number">1698216540519000000</span><span class="token punctuation">,</span><span class="token number">1698216540</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实际情况中，如果有时间追踪的需要，我更推荐后端存储时间戳，在跨时区的情况下，处理更为简单。</p><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model" aria-hidden="true">#</a> Model</h3><p>gorm提供了一个预设的<code>Model</code>结构体，它包含ID主键，以及两个时间追踪字段，和一个软删除记录字段。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    ID        <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primarykey&quot;\`</span>
    CreatedAt time<span class="token punctuation">.</span>Time
    UpdatedAt time<span class="token punctuation">.</span>Time
    DeletedAt DeletedAt <span class="token string">\`gorm:&quot;index&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时只需要将其嵌入到你的实体模型中即可。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	gorm<span class="token punctuation">.</span>Model
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样它就会自动具备<code>gorm.Model</code>所有的特性。</p><h3 id="主键" tabindex="-1"><a class="header-anchor" href="#主键" aria-hidden="true">#</a> 主键</h3><p>在默认情况下，名为<code>Id</code>的字段就是主键，使用结构体标签可以指定主键字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name    <span class="token builtin">string</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>

	CreatedAt sql<span class="token punctuation">.</span>NullTime
	UpdatedAt sql<span class="token punctuation">.</span>NullTime
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个字段形成联合主键</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Address <span class="token builtin">string</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>

	CreatedAt sql<span class="token punctuation">.</span>NullTime
	UpdatedAt sql<span class="token punctuation">.</span>NullTime
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h3><p>通过<code>index</code>结构体标签可以指定列索引</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
    Address <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:idx_addr,unique,sort:desc;&quot;\`</span>
	Mom     <span class="token builtin">string</span>
	Dad     <span class="token builtin">string</span>

	<span class="token comment">// nanoseconds</span>
	CreatedAt <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;autoCreateTime:nano;&quot;\`</span>
	<span class="token comment">// milliseconds</span>
	UpdatedAt <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;autoUpdateTime;milli;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的结构体中，对<code>Address</code>字段建立了唯一索引。两个字段使用同一个名字的索引就会创建复合索引</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Id      <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
    Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
    Address <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:idx_addr,unique;&quot;\`</span>
    School  <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;index:idx_addr,unique;&quot;\`</span>
    Mom     <span class="token builtin">string</span>
    Dad     <span class="token builtin">string</span>

    <span class="token comment">// nanoseconds</span>
    CreatedAt <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;autoCreateTime:nano;&quot;\`</span>
    <span class="token comment">// milliseconds</span>
    UpdatedAt <span class="token builtin">uint64</span> <span class="token string">\`gorm:&quot;autoUpdateTime;milli;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外键" tabindex="-1"><a class="header-anchor" href="#外键" aria-hidden="true">#</a> 外键</h3><p>在结构体中定义外键关系，是通过嵌入结构体的方式来进行的，比如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name <span class="token builtin">string</span>

	MomId <span class="token builtin">uint</span>
	Mom   Mom <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>

	DadId <span class="token builtin">uint</span>
	Dad   Dad <span class="token string">\`gorm:&quot;foreignKey:DadId;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Mom <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>

	Persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Dad <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>

	Persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person <span class="token string">\`gorm:&quot;foreignKey:DadId;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子中，<code>Person</code>结构体有两个外键，分别引用了<code>Dad</code>和<code>Mom</code>两个结构体的主键，默认引用也就是主键。<code>Person</code>对于<code>Dad</code>和<code>Mom</code>是一对一的关系，一个人只能有一个爸爸和妈妈。<code>Dad</code>和<code>Mom</code>对于<code>Person</code>是一对多的关系，因为爸爸和妈妈可以有多个孩子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Mom   Mom <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>嵌入结构体的作用是为了方便指定外键和引用，在默认情况下，外键字段名格式是<code>被引用类型名+Id</code>，比如<code>MomId</code>。默认情况下是引用的主键，通过结构体标签可以指定引用某一个字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name <span class="token builtin">string</span>

	MomId <span class="token builtin">uint</span>
	Mom   Mom <span class="token string">\`gorm:&quot;foreignKey:MomId;references:Sid;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>

	DadId <span class="token builtin">uint</span>
	Dad   Dad <span class="token string">\`gorm:&quot;foreignKey:DadId;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Mom <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Sid  <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;uniqueIndex;&quot;\`</span>
	Name <span class="token builtin">string</span>

	Persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>constraint:OnUpdate:CASCADE,OnDelete:SET NULL;</code>便是定义的外键约束。</p><h3 id="钩子" tabindex="-1"><a class="header-anchor" href="#钩子" aria-hidden="true">#</a> 钩子</h3><p>一个实体模型可以自定义钩子</p><ul><li>创建</li><li>更新</li><li>删除</li><li>查询</li></ul><p>对应的接口分别如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 创建前触发</span>
<span class="token keyword">type</span> BeforeCreateInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">BeforeCreate</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建后触发</span>
<span class="token keyword">type</span> AfterCreateInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">AfterCreate</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新前触发</span>
<span class="token keyword">type</span> BeforeUpdateInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">BeforeUpdate</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新后触发</span>
<span class="token keyword">type</span> AfterUpdateInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">AfterUpdate</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 保存前触发</span>
<span class="token keyword">type</span> BeforeSaveInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">BeforeSave</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 保存后触发</span>
<span class="token keyword">type</span> AfterSaveInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">AfterSave</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 删除前触发</span>
<span class="token keyword">type</span> BeforeDeleteInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">BeforeDelete</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 删除后触发</span>
<span class="token keyword">type</span> AfterDeleteInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">AfterDelete</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token comment">// 查询后触发</span>
<span class="token keyword">type</span> AfterFindInterface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">AfterFind</span><span class="token punctuation">(</span><span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体通过实现这些接口，可以自定义一些行为。</p><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3><p>下面是gorm支持的一些标签</p>`,65),b=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"标签名"),n("th",{style:{"text-align":"left"}},"说明")])],-1),g=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"column")]),n("td",{style:{"text-align":"left"}},"指定 db 列名")],-1),h=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"type")]),n("td",{style:{"text-align":"left"}},[s("列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如："),n("code",null,"not null"),s("、"),n("code",null,"size"),s(", "),n("code",null,"autoIncrement"),s("… 像 "),n("code",null,"varbinary(8)"),s(" 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如："),n("code",null,"MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT")])],-1),f=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"serializer")]),n("td",{style:{"text-align":"left"}},[s("指定将数据序列化或反序列化到数据库中的序列化器, 例如: "),n("code",null,"serializer:json/gob/unixtime")])],-1),q=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"size")]),n("td",{style:{"text-align":"left"}},[s("定义列数据类型的大小或长度，例如 "),n("code",null,"size: 256")])],-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"primaryKey")]),n("td",{style:{"text-align":"left"}},"将列定义为主键")],-1),E=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"unique")]),n("td",{style:{"text-align":"left"}},"将列定义为唯一键")],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"default")]),n("td",{style:{"text-align":"left"}},"定义列的默认值")],-1),w=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"precision")]),n("td",{style:{"text-align":"left"}},"指定列的精度")],-1),I=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"scale")]),n("td",{style:{"text-align":"left"}},"指定列大小")],-1),N=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"not null")]),n("td",{style:{"text-align":"left"}},"指定列为 NOT NULL")],-1),T=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"autoIncrement")]),n("td",{style:{"text-align":"left"}},"指定列为自动增长")],-1),D=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"autoIncrementIncrement")]),n("td",{style:{"text-align":"left"}},"自动步长，控制连续记录之间的间隔")],-1),M=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"embedded")]),n("td",{style:{"text-align":"left"}},"嵌套字段")],-1),A=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"embeddedPrefix")]),n("td",{style:{"text-align":"left"}},"嵌入字段的列名前缀")],-1),P=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"autoCreateTime")]),n("td",{style:{"text-align":"left"}},[s("创建时追踪当前时间，对于 "),n("code",null,"int"),s(" 字段，它会追踪时间戳秒数，您可以使用 "),n("code",null,"nano"),s("/"),n("code",null,"milli"),s(" 来追踪纳秒、毫秒时间戳，例如："),n("code",null,"autoCreateTime:nano")])],-1),S=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"autoUpdateTime")]),n("td",{style:{"text-align":"left"}},[s("创建/更新时追踪当前时间，对于 "),n("code",null,"int"),s(" 字段，它会追踪时间戳秒数，您可以使用 "),n("code",null,"nano"),s("/"),n("code",null,"milli"),s(" 来追踪纳秒、毫秒时间戳，例如："),n("code",null,"autoUpdateTime:milli")])],-1),R=n("td",{style:{"text-align":"left"}},[n("code",null,"index")],-1),C={style:{"text-align":"left"}},_={href:"https://gorm.io/zh_CN/docs/indexes.html",target:"_blank",rel:"noopener noreferrer"},O=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"uniqueIndex")]),n("td",{style:{"text-align":"left"}},[s("与 "),n("code",null,"index"),s(" 相同，但创建的是唯一索引")])],-1),L=n("td",{style:{"text-align":"left"}},[n("code",null,"check")],-1),U={style:{"text-align":"left"}},F=n("code",null,"check:age > 13",-1),B={href:"https://gorm.io/zh_CN/docs/constraints.html",target:"_blank",rel:"noopener noreferrer"},W=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"<-")]),n("td",{style:{"text-align":"left"}},[s("设置字段写入的权限， "),n("code",null,"<-:create"),s(" 只创建、"),n("code",null,"<-:update"),s(" 只更新、"),n("code",null,"<-:false"),s(" 无写入权限、"),n("code",null,"<-"),s(" 创建和更新权限")])],-1),j=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"->")]),n("td",{style:{"text-align":"left"}},[s("设置字段读的权限，"),n("code",null,"->:false"),s(" 无读权限")])],-1),H=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"-")]),n("td",{style:{"text-align":"left"}},[s("忽略该字段，"),n("code",null,"-"),s(" 表示无读写，"),n("code",null,"-:migration"),s(" 表示无迁移权限，"),n("code",null,"-:all"),s(" 表示无读写迁移权限")])],-1),K=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"comment")]),n("td",{style:{"text-align":"left"}},"迁移时为字段添加注释")],-1),V=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"foreignKey")]),n("td",{style:{"text-align":"left"}},"指定当前模型的列作为连接表的外键")],-1),Y=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"references")]),n("td",{style:{"text-align":"left"}},"指定引用表的列名，其将被映射为连接表外键")],-1),G=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"polymorphic")]),n("td",{style:{"text-align":"left"}},"指定多态类型，比如模型名")],-1),Q=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"polymorphicValue")]),n("td",{style:{"text-align":"left"}},"指定多态值、默认表名")],-1),z=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"many2many")]),n("td",{style:{"text-align":"left"}},"指定连接表表名")],-1),$=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"joinForeignKey")]),n("td",{style:{"text-align":"left"}},"指定连接表的外键列名，其将被映射到当前表")],-1),J=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"joinReferences")]),n("td",{style:{"text-align":"left"}},"指定连接表的外键列名，其将被映射到引用表")],-1),X=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"constraint")]),n("td",{style:{"text-align":"left"}},[s("关系约束，例如："),n("code",null,"OnUpdate"),s("、"),n("code",null,"OnDelete")])],-1),Z=e(`<h3 id="迁移" tabindex="-1"><a class="header-anchor" href="#迁移" aria-hidden="true">#</a> 迁移</h3><p><code>AutoMigrate</code>方法会帮助我们进行自动迁移，它会创建表，约束，索引，外键等等。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">AutoMigrate</span><span class="token punctuation">(</span>dst <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>   <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name    <span class="token builtin">string</span> <span class="token string">\`gorm:&quot;type:varchar(100);uniqueIndex;&quot;\`</span>
	Address <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Order<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// CREATE TABLE \`person\` (\`id\` bigint unsigned AUTO_INCREMENT,\`name\` varchar(100),\`address\` longtext,PRIMARY KEY (\`id\`),UNIQUE INDEX \`idx_person_name\` (\`name\`))</span>
<span class="token comment">// CREATE TABLE \`orders\` (\`id\` bigint unsigned AUTO_INCREMENT,\`name\` longtext,PRIMARY KEY (\`id\`))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者也可以我们手动来操作，通过<code>Migrator</code>方法访问<code>Migrator</code>接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Migrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Migrator 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它支持以下接口方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Migrator <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// AutoMigrate</span>
	<span class="token function">AutoMigrate</span><span class="token punctuation">(</span>dst <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token comment">// Database</span>
	<span class="token function">CurrentDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">FullDataTypeOf</span><span class="token punctuation">(</span><span class="token operator">*</span>schema<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> clause<span class="token punctuation">.</span>Expr
	<span class="token function">GetTypeAliases</span><span class="token punctuation">(</span>databaseTypeName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

	<span class="token comment">// Tables</span>
	<span class="token function">CreateTable</span><span class="token punctuation">(</span>dst <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">DropTable</span><span class="token punctuation">(</span>dst <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">HasTable</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token function">RenameTable</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span> newName <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">GetTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tableList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">TableType</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>TableType<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

	<span class="token comment">// Columns</span>
	<span class="token function">AddColumn</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">DropColumn</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">AlterColumn</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">MigrateColumn</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> field <span class="token operator">*</span>schema<span class="token punctuation">.</span>Field<span class="token punctuation">,</span> columnType ColumnType<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">HasColumn</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token function">RenameColumn</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> oldName<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">ColumnTypes</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>ColumnType<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

	<span class="token comment">// Views</span>
	<span class="token function">CreateView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> option ViewOption<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">DropView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token comment">// Constraints</span>
	<span class="token function">CreateConstraint</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">DropConstraint</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">HasConstraint</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

	<span class="token comment">// Indexes</span>
	<span class="token function">CreateIndex</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">DropIndex</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">HasIndex</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token function">RenameIndex</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> oldName<span class="token punctuation">,</span> newName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">GetIndexes</span><span class="token punctuation">(</span>dst <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Index<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法列表中涉及到了数据库，表，列，视图，索引，约束多个维度，对需要自定义的用户来说可以更加精细化的操作。</p><h3 id="指定表注释" tabindex="-1"><a class="header-anchor" href="#指定表注释" aria-hidden="true">#</a> 指定表注释</h3><p>在迁移时，如果想要添加表注释，可以按照如下方法来设置</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;gorm:table_options&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; comment &#39;person table&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Migrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是如果使用的是<code>AutoMigrate()</code>方法来进行迁移，且结构体之间具引用关系，gorm会进行递归先创建引用表，这就会导致被引用表和引用表的注释都是重复的，所以推荐使用<code>CreateTable</code>方法来创建。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在创建表时<code>CreateTable</code>方法需要保证被引用表比引用表先创建，否则会报错，而<code>AutoMigrate</code>方法则不需要，因为它会顺着关系引用关系递归创建。</p></div><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> Create</h3><p>在创建新的记录时，大多数情况都会用到<code>Create</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现有如下的结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span> <span class="token string">\`gorm:&quot;primaryKey;&quot;\`</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一条记录</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>user <span class="token operator">:=</span> Person<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 必须传入引用</span>
db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// 执行过程中发生的错误</span>
err <span class="token operator">=</span> db<span class="token punctuation">.</span>Error
<span class="token comment">// 创建的数目</span>
affected <span class="token operator">:=</span> db<span class="token punctuation">.</span>RowsAffected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完成后，gorm会将主键写入user结构体中，所以这也是为什么必须得传入指针。如果传入的是一个切片，就会批量创建</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>user <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，gorm也会将主键写入切片中。当数据量过大时，也可以使用<code>CreateInBatches</code>方法分批次创建，因为生成的<code>INSERT INTO table VALUES (),()</code>这样的SQL语句会变的很长，每个数据库对SQL长度是有限制的，所以必要的时候可以选择分批次创建。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">CreateInBatches</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除此之外，<code>Save</code>方法也可以创建记录，它的作用是当主键匹配时就更新记录，否则就插入。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Save</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>user <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="upsert" tabindex="-1"><a class="header-anchor" href="#upsert" aria-hidden="true">#</a> Upsert</h3><p><code>Save</code>方法只能是匹配主键，我们可以通过构建<code>Clause</code>来完成更加自定义的upsert。比如下面这行代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>OnConflict<span class="token punctuation">{</span>
    Columns<span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span>clause<span class="token punctuation">.</span>Column<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    DoNothing<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    DoUpdates<span class="token punctuation">:</span> clause<span class="token punctuation">.</span><span class="token function">AssignmentColumns</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    UpdateAll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的作用是当字段<code>name</code>冲突后，更新字段<code>address</code>的值，不冲突的话就会创建一个新的记录。也可以在冲突的时候什么都不做</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>OnConflict<span class="token punctuation">{</span>
    Columns<span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span>clause<span class="token punctuation">.</span>Column<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    DoNothing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接更新所有字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>OnConflict<span class="token punctuation">{</span>
    Columns<span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span>clause<span class="token punctuation">.</span>Column<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    UpdateAll<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用upsert之前，记得给冲突字段添加索引。</p><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h2><h3 id="first" tabindex="-1"><a class="header-anchor" href="#first" aria-hidden="true">#</a> First</h3><p>gorm对于查询而言，提供了相当多的方法可用，第一个就是<code>First</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">First</span><span class="token punctuation">(</span>dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> conds <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的作用是按照主键升序查找第一条记录，例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> person Person
result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
err <span class="token operator">:=</span> result<span class="token punctuation">.</span>Error
affected <span class="token operator">:=</span> result<span class="token punctuation">.</span>RowsAffected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入<code>dest</code>指针方便让gorm将查询到的数据映射到结构体中。</p><p>或者使用<code>Table</code>和<code>Model</code>方法可以指定查询表，前者接收字符串表名，后者接收实体模型。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.Table(&quot;person&quot;).Find(&amp;p)
db.Model(Person{}).Find(&amp;p)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果传入的指针元素包含实体模型比如说结构体指针，或者是结构体切片的指针，那么就不需要手动使用指定查哪个表，这个规则适用于所有的增删改查操作。</p></div><h3 id="take" tabindex="-1"><a class="header-anchor" href="#take" aria-hidden="true">#</a> Take</h3><p><code>Take</code>方法与<code>First</code>类似，区别就是不会根据主键排序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Take</span><span class="token punctuation">(</span>dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> conds <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> person Person
result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
err <span class="token operator">:=</span> result<span class="token punctuation">.</span>Error
affected <span class="token operator">:=</span> result<span class="token punctuation">.</span>RowsAffected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pluck" tabindex="-1"><a class="header-anchor" href="#pluck" aria-hidden="true">#</a> Pluck</h3><p><code>Pluck</code>方法用于批量查询一个表的单列，查询的结果可以收集到一个指定类型的切片中，不一定非得是实体类型的切片。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Pluck</span><span class="token punctuation">(</span>column <span class="token builtin">string</span><span class="token punctuation">,</span> dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如将所有人的地址搜集到一个字符串切片中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> adds <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token comment">// SELECT \`address\` FROM \`person\` WHERE name IN (&#39;jack&#39;,&#39;lili&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pluck</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>adds<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就等同于</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adds<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> Count</h3><p><code>Count</code>方法用于统计实体记录的数量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span>count <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看一个使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> count <span class="token builtin">int64</span>

<span class="token comment">// SELECT count(*) FROM \`person\`</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> Find</h3><p>批量查询最常用的是<code>Find</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Find</span><span class="token punctuation">(</span>dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> conds <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它会根据给定的条件查找出所有符合的记录</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\`</span>
<span class="token keyword">var</span> ps <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> Select</h3><p>gorm在默认情况下是查询所有字段，我们可以通过<code>Select</code>方法来指定字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Select</span><span class="token punctuation">(</span>query <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT \`address\`,\`name\` FROM \`person\` ORDER BY \`person\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时，还可以使用<code>Omit</code>方法来忽略字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Omit</span><span class="token punctuation">(</span>columns <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT \`person\`.\`id\`,\`person\`.\`name\` FROM \`person\` WHERE id IN (1,2,3,4)</span>
db<span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token string">\`\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由<code>Select</code>和<code>Omit</code>选择或忽略的字段，在创建更新查询的时候都会起作用。</p><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> Where</h3><p>条件查询会用到<code>Where</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Where</span><span class="token punctuation">(</span>query <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一个简单的示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在链式操作中使用多个<code>Where</code>会构建多个<code>AND</code>语句，比如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` WHERE id = 1 AND name = &#39;jack&#39; ORDER BY \`person\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用<code>Or</code>方法来构建<code>OR</code>语句</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Or</span><span class="token punctuation">(</span>query <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` WHERE id = 1 OR name = &#39;jack&#39; AND address = &#39;usa&#39; ORDER BY \`person\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Or</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;address = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有<code>Not</code>方法，都是类似的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Not</span><span class="token punctuation">(</span>query <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` WHERE id = 1 OR name = &#39;jack&#39; AND NOT name = &#39;mike&#39; AND address = &#39;usa&#39; ORDER BY \`person\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Or</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Not</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;address = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<code>IN</code>条件，可以直接在<code>Where</code>方法里面传入切片。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;address IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;us&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者多列<code>IN</code>条件，需要用<code>[][]any</code>类型来承载参数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` WHERE (id, name, address) IN ((1,&#39;jack&#39;,&#39;uk&#39;),(2,&#39;mike&#39;,&#39;usa&#39;))</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;(id, name, address) IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>gorm支持where分组使用，就是将上述几个语句结合起来</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>
		db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>
		db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;usa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jp&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`person\` WHERE (name IN (&#39;cn&#39;,&#39;uk&#39;) AND id IN (1,2)) OR (name IN (&#39;usa&#39;,&#39;jp&#39;) AND id IN (3,4))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> Order</h3><p>排序会用到<code>Order</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Order</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来看个使用的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ps <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

<span class="token comment">// SELECT * FROM \`person\` ORDER BY name ASC, id DESC</span>
db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;name ASC, id DESC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以多次调用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` ORDER BY name ASC, id DESC,address</span>
db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;name ASC, id DESC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> Limit</h3><p><code>Limit</code>和<code>Offset</code>方法常常用于分页查询</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span>limit <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Offset</span><span class="token punctuation">(</span>offset <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个简单的分页示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
    ps   <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
    page <span class="token operator">=</span> <span class="token number">2</span>
    size <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">)</span>

<span class="token comment">// SELECT * FROM \`person\` LIMIT 10 OFFSET 10</span>
db<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group" tabindex="-1"><a class="header-anchor" href="#group" aria-hidden="true">#</a> Group</h3><p><code>Group</code>和<code>Having</code>方法多用于分组操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Group</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Having</span><span class="token punctuation">(</span>query <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面看个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
    ps <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
<span class="token punctuation">)</span>

<span class="token comment">// SELECT \`address\` FROM \`person\` GROUP BY \`address\` HAVING address IN (&#39;cn&#39;,&#39;us&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">&quot;address IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;us&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct" aria-hidden="true">#</a> Distinct</h3><p><code>Distinct</code>方法多用于去重</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Distinct</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看一个示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT DISTINCT \`name\` FROM \`person\` WHERE address IN (&#39;cn&#39;,&#39;us&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;address IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;us&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><p>子查询就是嵌套查询，例如想要查询出所有<code>id</code>值大于平均值的人</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` WHERE id &gt; (SELECT AVG(id) FROM \`person\`</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id &gt; (?)&quot;</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;AVG(id)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>from子查询</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM (SELECT * FROM \`person\` WHERE address IN (&#39;cn&#39;,&#39;uk&#39;)) as p</span>
db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;(?) as p&quot;</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;address IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h3><p>gorm使用<code>clause.Locking</code>子句来提供锁的支持</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SELECT * FROM \`person\` FOR UPDATE</span>
db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Locking<span class="token punctuation">{</span>Strength<span class="token punctuation">:</span> <span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>

<span class="token comment">// SELECT * FROM \`person\` FOR SHARE NOWAIT</span>
db<span class="token punctuation">.</span><span class="token function">Clauses</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Locking<span class="token punctuation">{</span>Strength<span class="token punctuation">:</span> <span class="token string">&quot;SHARE&quot;</span><span class="token punctuation">,</span> Options<span class="token punctuation">:</span> <span class="token string">&quot;NOWAIT&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代" aria-hidden="true">#</a> 迭代</h3><p>通过<code>Rows</code>方法可以获取一个迭代器</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>sql<span class="token punctuation">.</span>Rows<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过遍历迭代器，使用<code>ScanRows</code>方法可以将每一行的结果扫描到结构体中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> p Person
    err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">ScanRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h2><h3 id="save" tabindex="-1"><a class="header-anchor" href="#save" aria-hidden="true">#</a> save</h3><p>在创建的时候提到过<code>Save</code>方法，它也可以用来更新记录，并且它会更新所有字段，<strong>即便有些结构体的字段是零值</strong>，不过如果主键匹配不到的话就会进行插入操作了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>Address <span class="token operator">=</span> <span class="token string">&quot;poland&quot;</span>
<span class="token comment">// UPDATE \`person\` SET \`name\`=&#39;json&#39;,\`address\`=&#39;poland&#39; WHERE \`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到它把除了主键以外的字段全都添到了<code>SET</code>语句中。</p><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h3><p>所以大多数情况下，建议使用<code>Update</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>column <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它主要是用来更新单列字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

<span class="token comment">// UPDATE \`person\` SET \`address\`=&#39;poland&#39; WHERE id = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;poland&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updates" tabindex="-1"><a class="header-anchor" href="#updates" aria-hidden="true">#</a> updates</h3><p><code>Updates</code>方法用于更新多列，接收结构体和map作为参数，并且当结构体字段为零值时，会忽略该字段，但在map中不会。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Updates</span><span class="token punctuation">(</span>values <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

<span class="token comment">// UPDATE \`person\` SET \`name\`=&#39;jojo&#39;,\`address\`=&#39;poland&#39; WHERE \`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jojo&quot;</span><span class="token punctuation">,</span> Address<span class="token punctuation">:</span> <span class="token string">&quot;poland&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// UPDATE \`person\` SET \`address\`=&#39;poland&#39;,\`name\`=&#39;jojo&#39; WHERE \`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jojo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;poland&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql表达式" tabindex="-1"><a class="header-anchor" href="#sql表达式" aria-hidden="true">#</a> SQL表达式</h3><p>有些时候，常常会会需要对字段进行一些自增或者自减等与自身进行运算的操作，一般是先查再计算然后更新，或者是使用SQL表达式。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Expr</span><span class="token punctuation">(</span>expr <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> clause<span class="token punctuation">.</span>Expr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看下面的一个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// UPDATE \`person\` SET \`age\`=age + age,\`name\`=&#39;jojo&#39; WHERE \`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jojo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">&quot;age + age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// UPDATE \`person\` SET \`age\`=age * 2 + age,\`name\`=&#39;jojo&#39; WHERE \`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jojo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> gorm<span class="token punctuation">.</span><span class="token function">Expr</span><span class="token punctuation">(</span><span class="token string">&quot;age * 2 + age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><p>在gorm中，删除记录会用到<code>Delete</code>方法，它可以直接传实体结构，也可以传条件。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> conds <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如直接传结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

<span class="token comment">// // DELETE FROM \`person\` WHERE \`person\`.\`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

<span class="token comment">// DELETE FROM \`person\` WHERE \`person\`.\`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者指定条件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// DELETE FROM \`person\` WHERE id = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以简写成</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> p Person

db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>

<span class="token comment">// DELETE FROM \`person\` WHERE id = 2</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">// DELETE FROM \`person\` WHERE \`person\`.\`id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>批量删除的话就是传入切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// DELETE FROM \`person\` WHERE id IN (1,2,3)</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;id IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM \`person\` WHERE \`person\`.\`id\` IN (1,2,3)</span>
db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="软删除" tabindex="-1"><a class="header-anchor" href="#软删除" aria-hidden="true">#</a> 软删除</h3><p>假如你的实体模型使用了软删除，那么在删除时，默认进行更新操作，若要永久删除的话可以使用<code>Unscope</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Unscoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="关联定义" tabindex="-1"><a class="header-anchor" href="#关联定义" aria-hidden="true">#</a> 关联定义</h2><p>gorm提供了表关联的交互能力，通过嵌入结构体和字段的形式来定义结构体与结构体之间的关联。</p><h3 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一" aria-hidden="true">#</a> 一对一</h3><p>一对一关系是最简单的，正常情况下一个人只能有一个母亲，看下面的结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>
	Name    <span class="token builtin">string</span>
	Address <span class="token builtin">string</span>
	Age     <span class="token builtin">uint</span>

	MomId sql<span class="token punctuation">.</span>NullInt64
	Mom   Mom <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Mom <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Person</code>结构体通过嵌入<code>Mom</code>结构体，实现了对<code>Mom</code>类型的引用，其中<code>Person.MomId</code>就是引用字段，主键<code>Mom.Id</code>就是被引用字段，这样就完成了一对一关系的关联。如何自定义外键以及引用和约束还有默认的外键规则这些已经在<a href="#%E5%A4%96%E9%94%AE">外键定义</a>中已经讲到过，就不再赘述</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于外键字段，推荐使用<code>sql</code>包提供的类型，因为外键默认可以为<code>NULL</code>，在使用<code>Create</code>创建记录时，如果使用普通类型，零值<code>0</code>也会被创建，不存在的外键被创建显然是不被允许的。</p></div><h3 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多" aria-hidden="true">#</a> 一对多</h3><p>下面加一个学校结构体，学校与学生是一对多的关系，一个学校有多个学校，但是一个学生只能上一个学校。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Id      <span class="token builtin">uint</span>
    Name    <span class="token builtin">string</span>
    Address <span class="token builtin">string</span>
    Age     <span class="token builtin">uint</span>

    MomId sql<span class="token punctuation">.</span>NullInt64
    Mom   Mom <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>

    SchoolId sql<span class="token punctuation">.</span>NullInt64
    School   School gorm<span class="token punctuation">:</span><span class="token string">&quot;foreignKey:SchoolId;&quot;</span><span class="token string">\`
}

type Mom struct {
    Id   uint
    Name string
}


type School struct {
    Id   uint
    Name string

    Persons []Person \`</span>gorm<span class="token punctuation">:</span><span class="token string">&quot;foreignKey:SchoolId;&quot;</span>\`
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>school.Persons</code>是<code>[]person</code>类型，表示着可以拥有多个学生，而<code>Person</code>则必须要有包含引用<code>School</code>的外键，也就是<code>Person.SchoolId</code>。</p><h3 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多" aria-hidden="true">#</a> 多对多</h3><p>一个人可以拥有很多房子，一个房子也可以住很多人，这就是一个多对多的关系。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id      <span class="token builtin">uint</span>
	Name    <span class="token builtin">string</span>
	Address <span class="token builtin">string</span>
	Age     <span class="token builtin">uint</span>

	MomId sql<span class="token punctuation">.</span>NullInt64
	Mom   Mom <span class="token string">\`gorm:&quot;foreignKey:MomId;&quot;\`</span>

	SchoolId sql<span class="token punctuation">.</span>NullInt64
	School   School <span class="token string">\`gorm:&quot;foreignKey:SchoolId;&quot;\`</span>

	Houses <span class="token punctuation">[</span><span class="token punctuation">]</span>House <span class="token string">\`gorm:&quot;many2many:person_house;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Mom <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> School <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>

	Persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
<span class="token punctuation">}</span>

<span class="token keyword">type</span> House <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id   <span class="token builtin">uint</span>
	Name <span class="token builtin">string</span>

	Persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person <span class="token string">\`gorm:&quot;many2many:person_house;&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> PersonHouse <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	PersonId sql<span class="token punctuation">.</span>NullInt64
	Person   Person <span class="token string">\`gorm:&quot;foreignKey:PersonId;&quot;\`</span>
	HouseId  sql<span class="token punctuation">.</span>NullInt64
	House    House <span class="token string">\`gorm:&quot;foreignKey:HouseId;&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Person</code>和<code>House</code>互相持有对方的切片类型表示多对多的关系，多对多关系一般需要创建连接表，通过<code>many2many</code>来指定连接表，连接表的外键必须要指定正确。</p><p>创建完结构体后让gorm自动迁移到数据库中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tables <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
    School<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    Mom<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    House<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    PersonHouse<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> table <span class="token operator">:=</span> <span class="token keyword">range</span> tables <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">Migrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意引用表与被引用表的先后创建顺序。</p><h2 id="关联操作" tabindex="-1"><a class="header-anchor" href="#关联操作" aria-hidden="true">#</a> 关联操作</h2><p>在创建完上述三种关联关系后，接下来就是如何使用关联来进行增删改查。这主要会用到<code>Association</code>方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Association</span><span class="token punctuation">(</span>column <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Association
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接收一个关联参数，它的值应该是嵌入引用结构体中的被引用类型的字段名。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mom<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如关联查找一个人的母亲，<code>Association</code>的参数就是<code>Mom</code>，也就是<code>Person.Mom</code>字段名。</p><h3 id="创建关联" tabindex="-1"><a class="header-anchor" href="#创建关联" aria-hidden="true">#</a> 创建关联</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 定义好数据</span>
jenny <span class="token operator">:=</span> Mom<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;jenny&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

mit <span class="token operator">:=</span> School<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>
    Persons<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

h1 <span class="token operator">:=</span> House<span class="token punctuation">{</span>
    Id<span class="token punctuation">:</span>      <span class="token number">0</span><span class="token punctuation">,</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
    Persons<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

h2 <span class="token operator">:=</span> House<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;h2&quot;</span><span class="token punctuation">,</span>
    Persons<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

jack <span class="token operator">:=</span> Person<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
    Address<span class="token punctuation">:</span> <span class="token string">&quot;usa&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span>     <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

mike <span class="token operator">:=</span> Person<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span>    <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span>
    Address<span class="token punctuation">:</span> <span class="token string">&quot;uk&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span>     <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// INSERT INTO \`people\` (\`name\`,\`address\`,\`age\`,\`mom_id\`,\`school_id\`) VALUES (&#39;jack&#39;,&#39;usa&#39;,18,NULL,NULL)</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span>
<span class="token comment">// INSERT INTO \`schools\` (\`name\`) VALUES (&#39;MIT&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span>

<span class="token comment">// 添加Person与Mom的关联，一对一关联</span>
<span class="token comment">// INSERT INTO \`moms\` (\`name\`) VALUES (&#39;jenny&#39;) ON DUPLICATE KEY UPDATE \`id\`=\`id\`</span>
<span class="token comment">// UPDATE \`people\` SET \`mom_id\`=1 WHERE \`id\` = 1</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jenny<span class="token punctuation">)</span> 

<span class="token comment">// 添加school与Person的关联，一对多关联</span>
<span class="token comment">// INSERT INTO \`people\` (\`name\`,\`address\`,\`age\`,\`mom_id\`,\`school_id\`,\`id\`) VALUES (&#39;jack&#39;,&#39;usa&#39;,18,1,1,1),(&#39;mike&#39;,&#39;uk&#39;,20,NULL,1,DEFAULT) ON DUPLICATE KEY UPDATE \`school_id\`=VALUES(\`school_id\`)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span>jack<span class="token punctuation">,</span> mike<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 添加Person与Houses的关联，多对多关联</span>
<span class="token comment">// INSERT INTO \`houses\` (\`name\`) VALUES (&#39;h1&#39;),(&#39;h2&#39;) ON DUPLICATE KEY UPDATE \`id\`=\`id\`</span>
<span class="token comment">// INSERT INTO \`person_house\` (\`person_id\`,\`house_id\`) VALUES (1,1),(1,2) ON DUPLICATE KEY UPDATE \`person_id\`=\`person_id\`</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>House<span class="token punctuation">{</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如所有的记录都不存在，在进行关联创建时，也会先创建记录再创建关联。</p><h3 id="查找关联" tabindex="-1"><a class="header-anchor" href="#查找关联" aria-hidden="true">#</a> 查找关联</h3><p>下面演示如何进行查找关联。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 一对一关联查找</span>
<span class="token keyword">var</span> person Person
<span class="token keyword">var</span> mom Mom

<span class="token comment">// SELECT * FROM \`people\` ORDER BY \`people\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`moms\` WHERE \`moms\`.\`id\` = 1</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mom<span class="token punctuation">)</span>

<span class="token comment">// 一对多关联查找</span>
<span class="token keyword">var</span> school School
<span class="token keyword">var</span> persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

<span class="token comment">// SELECT * FROM \`schools\` ORDER BY \`schools\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>school<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`people\` WHERE \`people\`.\`school_id\` = 1</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>school<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>persons<span class="token punctuation">)</span>

<span class="token comment">// 多对多关联查找</span>
<span class="token keyword">var</span> houses <span class="token punctuation">[</span><span class="token punctuation">]</span>House

<span class="token comment">// SELECT \`houses\`.\`id\`,\`houses\`.\`name\` FROM \`houses\` JOIN \`person_house\` ON \`person_house\`.\`house_id\` = \`houses\`.\`id\` AND \`person_house\`.\`person_id\` IN (1,2)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>persons<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>houses<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关联查找会根据已有的数据，去引用表中查找符合条件的记录，对于多对多关系而言，gorm会自动完成表连接这一过程。</p><h3 id="更新关联" tabindex="-1"><a class="header-anchor" href="#更新关联" aria-hidden="true">#</a> 更新关联</h3><p>下面演示如何进行更新关联</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 一对一关联更新</span>
<span class="token keyword">var</span> jack Person

lili <span class="token operator">:=</span> Mom<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// SELECT * FROM \`people\` WHERE name = &#39;jack&#39; ORDER BY \`people\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span>

<span class="token comment">// INSERT INTO \`moms\` (\`name\`) VALUES (&#39;lili&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lili<span class="token punctuation">)</span>

<span class="token comment">// INSERT INTO \`moms\` (\`name\`,\`id\`) VALUES (&#39;lili&#39;,2) ON DUPLICATE KEY UPDATE \`id\`=\`id\`</span>
<span class="token comment">// UPDATE \`people\` SET \`mom_id\`=2 WHERE \`id\` = 1</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lili<span class="token punctuation">)</span>

<span class="token comment">// 一对多关联更新</span>

<span class="token keyword">var</span> mit School
newPerson <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;bob&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;jojo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment">// INSERT INTO \`people\` (\`name\`,\`address\`,\`age\`,\`mom_id\`,\`school_id\`) VALUES (&#39;bob&#39;,&#39;&#39;,0,NULL,NULL),(&#39;jojo&#39;,&#39;&#39;,0,NULL,NULL)</span>
db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newPerson<span class="token punctuation">)</span>

<span class="token comment">//  SELECT * FROM \`schools\` WHERE name = &#39;mit&#39; ORDER BY \`schools\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span>

<span class="token comment">// INSERT INTO \`people\` (\`name\`,\`address\`,\`age\`,\`mom_id\`,\`school_id\`,\`id\`) VALUES (&#39;bob&#39;,&#39;&#39;,0,NULL,1,4),(&#39;jojo&#39;,&#39;&#39;,0,NULL,1,5) ON DUPLICATE KEY UPDATE \`school_id\`=VALUES(\`school_id\`)</span>
<span class="token comment">//  UPDATE \`people\` SET \`school_id\`=NULL WHERE \`people\`.\`id\` NOT IN (4,5) AND \`people\`.\`school_id\` = 1</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span>

<span class="token comment">// 多对多关联更新</span>

<span class="token comment">// INSERT INTO \`houses\` (\`name\`) VALUES (&#39;h3&#39;),(&#39;h4&#39;),(&#39;h5&#39;) ON DUPLICATE KEY UPDATE \`id\`=\`id\`</span>
<span class="token comment">// INSERT INTO \`person_house\` (\`person_id\`,\`house_id\`) VALUES (1,3),(1,4),(1,5) ON DUPLICATE KEY UPDATE \`person_id\`=\`person_id\`</span>
<span class="token comment">// DELETE FROM \`person_house\` WHERE \`person_house\`.\`person_id\` = 1 AND \`person_house\`.\`house_id\` NOT IN (3,4,5)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>House<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;h3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;h4&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;h5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在关联更新时，如果被引用数据和引用数据都不存在，gorm会尝试创建它们。</p><h3 id="删除关联" tabindex="-1"><a class="header-anchor" href="#删除关联" aria-hidden="true">#</a> 删除关联</h3><p>下面演示如何删除关联</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 一对一关联删除</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
    jack Person
    lili Mom
<span class="token punctuation">)</span>

<span class="token comment">// SELECT * FROM \`people\` WHERE name = &#39;jack&#39; ORDER BY \`people\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span>

<span class="token comment">//  SELECT * FROM \`moms\` WHERE name = &#39;lili&#39; ORDER BY \`moms\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lili<span class="token punctuation">)</span>

<span class="token comment">// UPDATE \`people\` SET \`mom_id\`=NULL WHERE \`people\`.\`id\` = 1 AND \`people\`.\`mom_id\` = 2</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lili<span class="token punctuation">)</span>

<span class="token comment">// 一对多关联删除</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
    mit     School
    persons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person
<span class="token punctuation">)</span>

<span class="token comment">// SELECT * FROM \`schools\` WHERE name = &#39;mit&#39; ORDER BY \`schools\`.\`id\` LIMIT 1</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`people\` WHERE name IN (&#39;jack&#39;,&#39;mike&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>persons<span class="token punctuation">)</span>

<span class="token comment">// UPDATE \`people\` SET \`school_id\`=NULL WHERE \`people\`.\`school_id\` = 1 AND \`people\`.\`id\` IN (1,2)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>persons<span class="token punctuation">)</span>

<span class="token comment">// 多对多关联删除</span>
<span class="token keyword">var</span> houses <span class="token punctuation">[</span><span class="token punctuation">]</span>House

<span class="token comment">// SELECT * FROM \`houses\` WHERE name IN (&#39;h3&#39;,&#39;h4&#39;)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name IN ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;h3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h4&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>houses<span class="token punctuation">)</span>

<span class="token comment">// DELETE FROM \`person_house\` WHERE \`person_house\`.\`person_id\` = 1 AND \`person_house\`.\`house_id\` IN (3,4)</span>
db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>houses<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关联删除时只会删除它们之间的引用关系，并不会删除实体记录。我们还可以使用<code>Clear</code>方法来直接清空关联</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要删除对应的实体记录，可以在<code>Association</code>操作后面加上<code>Unscoped</code>操作（不会影响many2many）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unscoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>houses<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于一对多和多对多而言，可以使用<code>Select</code>操作来删除记录</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
    mit     School
<span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mit<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预加载" tabindex="-1"><a class="header-anchor" href="#预加载" aria-hidden="true">#</a> 预加载</h3><p>预加载用于查询关联数据，对于具有关联关系的实体而言，它会先预先加载被关联引用的实体。之前提到的关联查询是对关联关系进行查询，预加载是直接对实体记录进行查询，包括所有的关联关系。<strong>从语法上来说</strong>，关联查询需要先查询指定的<code>[]Person</code>，然后再根据<code>[]Person</code> 去查询关联的<code>[]Mom</code>，预加载从语法上直接查询<code>[]Person</code>，并且也会将所有的关联关系顺带都加载了，不过实际上它们执行的SQL都是差不多的。下面看一个例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

<span class="token comment">// SELECT * FROM \`moms\` WHERE \`moms\`.\`id\` = 1</span>
<span class="token comment">// SELECT * FROM \`people\`</span>
db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个一对一关联查询的例子，它的输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">[</span><span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">1</span> Name<span class="token punctuation">:</span>jack Address<span class="token punctuation">:</span>usa Age<span class="token punctuation">:</span><span class="token number">18</span> MomId<span class="token punctuation">:</span><span class="token punctuation">{</span>Int64<span class="token punctuation">:</span><span class="token number">1</span> Valid<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span> Mom<span class="token punctuation">:</span><span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">1</span> Name<span class="token punctuation">:</span>jenny<span class="token punctuation">}</span> SchoolId<span class="token punctuation">:</span><span class="token punctuation">{</span>Int64<span class="token punctuation">:</span><span class="token number">1</span> Valid<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span> School<span class="token punctuation">:</span><span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Name<span class="token punctuation">:</span> Persons<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> Houses<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">2</span> Name<span class="token punctuation">:</span>mike Address<span class="token punctuation">:</span>uk Age<span class="token punctuation">:</span><span class="token number">20</span> MomId<span class="token punctuation">:</span><span class="token punctuation">{</span>Int64<span class="token punctuation">:</span><span class="token number">0</span> Valid<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span> Mom<span class="token punctuation">:</span><span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Name<span class="token punctuation">:</span><span class="token punctuation">}</span> SchoolId<span class="token punctuation">:</span><span class="token punctuation">{</span>Int64<span class="token punctuation">:</span><span class="token number">1</span> Valid<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span> School<span class="token punctuation">:</span><span class="token punctuation">{</span>Id<span class="token punctuation">:</span><span class="token number">0</span> Name<span class="token punctuation">:</span> Persons<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> Houses<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到将关联的<code>Mom</code>一并查询出来了，但是没有预加载学校关系，所有<code>School</code>结构体都是零值。还可以使用<code>clause.Associations</code>表示预加载全部的关系，除了嵌套的关系。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面来看一个嵌套预加载的例子，它的作用是查询出所有学校关联的所有学生以及每一个学生所关联的母亲和每一个学生所拥有的房子，而且还要查询出每一个房子的主人集合，学校-&gt;学生-&gt;房子-&gt;学生。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> schools <span class="token punctuation">[</span><span class="token punctuation">]</span>School

db<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Persons.Mom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Persons.Houses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">Preload</span><span class="token punctuation">(</span><span class="token string">&quot;Persons.Houses.Persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>schools<span class="token punctuation">)</span>

<span class="token comment">// 输出代码，逻辑可以忽略</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> school <span class="token operator">:=</span> <span class="token keyword">range</span> schools <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;school&quot;</span><span class="token punctuation">,</span> school<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> person <span class="token operator">:=</span> <span class="token keyword">range</span> school<span class="token punctuation">.</span>Persons <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;mom&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>Mom<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> house <span class="token operator">:=</span> <span class="token keyword">range</span> person<span class="token punctuation">.</span>Houses <span class="token punctuation">{</span>
            <span class="token keyword">var</span> persons <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> house<span class="token punctuation">.</span>Persons <span class="token punctuation">{</span>
                persons <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>persons<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;house&quot;</span><span class="token punctuation">,</span> house<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">&quot;owner&quot;</span><span class="token punctuation">,</span> persons<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>school MIT
person jack
mom jenny
house h1 owner [jack]
house h2 owner [jack]

person mike
mom 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到输出了每一个学校的每一个学生的母亲以及它们的房子，还有房子的所有主人。</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><p>gorm默认开启事务，任何插入和更新操作失败后都会回滚，可以在<a href="#%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE">连接配置</a>中关闭，性能大概会提升30%左右。gorm中事务的使用有多种方法，下面简单介绍下。</p><h3 id="自动" tabindex="-1"><a class="header-anchor" href="#自动" aria-hidden="true">#</a> 自动</h3><p>闭包事务，通过<code>Transaction</code>方法，传入一个闭包函数，如果函数返回值不为nil，那么就会自动回滚。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Transaction</span><span class="token punctuation">(</span>fc <span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>sql<span class="token punctuation">.</span>TxOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面看一个例子，闭包中的操作应该使用参数<code>tx</code>，而非外部的<code>db</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ps <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

db<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手动" tabindex="-1"><a class="header-anchor" href="#手动" aria-hidden="true">#</a> 手动</h3><p>比较推荐使用手动事务，由我们自己来控制何时回滚，何时提交。手动事务会用到下面三个方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Begin方法用于开启事务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Begin</span><span class="token punctuation">(</span>opts <span class="token operator">...</span><span class="token operator">*</span>sql<span class="token punctuation">.</span>TxOptions<span class="token punctuation">)</span> <span class="token operator">*</span>DB 

<span class="token comment">// Rollback方法用于回滚事务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>DB 

<span class="token comment">// Commit方法用于提交事务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>DB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面看一个例子，开启事务后，就应该使用<code>tx</code>来操作orm。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ps <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以指定回滚点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ps <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

tx<span class="token punctuation">.</span><span class="token function">SavePoint</span><span class="token punctuation">(</span><span class="token string">&quot;createBatch&quot;</span><span class="token punctuation">)</span>

err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>Error
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    tx<span class="token punctuation">.</span><span class="token function">RollbackTo</span><span class="token punctuation">(</span><span class="token string">&quot;createBatch&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果你阅读完了上面的所有内容，并动手敲了代码，那么你就可以使用gorm进行对数据库进行增删改查了，gorm除了这些操作以外，还有其它许多功能，更多细节可以前往官方文档了解。</p>`,243);function nn(sn,an){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("官方文档："),n("a",d,[s("GORM - The fantastic ORM library for Golang, aims to be developer friendly."),t(a)])]),n("p",null,[s("开源仓库："),n("a",r,[s("go-gorm/gorm: The fantastic ORM library for Golang, aims to be developer friendly (github.com)"),t(a)])]),k,n("p",null,[s("除此之外，还有一些其它的数据库驱动是由第三方开发者提供的，比如oracle的驱动"),n("a",v,[s("CengSin/oracle"),t(a)]),s("。本文接下来将使用MySQL来进行演示，使用的什么数据库，就需要安装什么驱动，这里安装Mysql的gorm驱动。")]),m,n("table",null,[b,n("tbody",null,[g,h,f,q,y,E,x,w,I,N,T,D,M,A,P,S,n("tr",null,[R,n("td",C,[s("根据参数创建索引，多个字段使用相同的名称则创建复合索引，查看 "),n("a",_,[s("索引open in new window"),t(a)]),s(" 获取详情")])]),O,n("tr",null,[L,n("td",U,[s("创建检查约束，例如 "),F,s("，查看 "),n("a",B,[s("约束open in new window"),t(a)]),s(" 获取详情")])]),W,j,H,K,V,Y,G,Q,z,$,J,X])]),Z])}const en=p(l,[["render",nn],["__file","gorm.html.vue"]]);export{en as default};
